{"ast":null,"code":"var _jsxFileName = \"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/ActionMapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { api } from '../../services/api';\nimport { META_ACTION_TYPES, ALL_META_ACTION_TYPES, SUGGESTED_BUSINESS_CONCEPTS, getActionTypeCategory, getBusinessConceptSuggestions } from './utils/metaActionTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionMapper = () => {\n  _s();\n  const [mappings, setMappings] = useState({});\n  const [availableActions, setAvailableActions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMapping, setNewMapping] = useState({\n    conceptName: '',\n    actionTypes: [],\n    aggregationType: 'sum' // 'sum', 'count', 'average'\n  });\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // Default business concepts from comprehensive analysis\n  const businessConcepts = Object.keys(SUGGESTED_BUSINESS_CONCEPTS);\n  useEffect(() => {\n    loadMappings();\n    loadKnownActionTypes();\n  }, []);\n  const loadKnownActionTypes = () => {\n    // Start with our comprehensive list of 49 known action types\n    setAvailableActions(ALL_META_ACTION_TYPES);\n\n    // Also try to discover additional ones from historical data\n    discoverAvailableActions();\n  };\n  const loadMappings = async () => {\n    try {\n      // Try to load from backend first\n      const backendMappings = await api.getActionMappings();\n      if (backendMappings.mappings && Object.keys(backendMappings.mappings).length > 0) {\n        setMappings(backendMappings.mappings);\n        // Also sync to localStorage for offline access\n        localStorage.setItem('meta_action_mappings', JSON.stringify(backendMappings.mappings));\n        return;\n      }\n\n      // Fallback to localStorage\n      const savedMappings = localStorage.getItem('meta_action_mappings');\n      if (savedMappings) {\n        const localMappings = JSON.parse(savedMappings);\n        setMappings(localMappings);\n        // Sync localStorage mappings to backend\n        if (Object.keys(localMappings).length > 0) {\n          await api.saveActionMappings(localMappings);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading mappings:', error);\n      // Fallback to localStorage if backend fails\n      try {\n        const savedMappings = localStorage.getItem('meta_action_mappings');\n        if (savedMappings) {\n          setMappings(JSON.parse(savedMappings));\n        }\n      } catch (localError) {\n        console.error('Error loading from localStorage:', localError);\n      }\n    }\n  };\n  const saveMappings = async newMappings => {\n    try {\n      // Save to backend\n      await api.saveActionMappings(newMappings);\n\n      // Update local state\n      setMappings(newMappings);\n\n      // Also save to localStorage as backup\n      localStorage.setItem('meta_action_mappings', JSON.stringify(newMappings));\n      console.log('Action mappings saved successfully');\n    } catch (error) {\n      console.error('Error saving mappings to backend:', error);\n\n      // Fallback to localStorage only\n      setMappings(newMappings);\n      localStorage.setItem('meta_action_mappings', JSON.stringify(newMappings));\n      alert('Mappings saved locally, but failed to sync to server. They will be synced next time the page loads.');\n    }\n  };\n  const discoverAvailableActions = async () => {\n    setLoading(true);\n    try {\n      // Get recent historical data to discover action types\n      const configs = await api.getHistoricalConfigurations();\n      const discoveredActionTypes = new Set();\n      for (const config of configs.slice(0, 3)) {\n        // Check recent configs\n        if (config.day_count > 0) {\n          try {\n            const data = await api.exportHistoricalData({\n              start_date: config.latest_date,\n              end_date: config.latest_date,\n              fields: config.fields,\n              breakdowns: config.breakdowns\n            });\n\n            // Extract action types from the data\n            data.data.forEach(dayData => {\n              let records = [];\n\n              // More defensive extraction of records\n              if (dayData.data && dayData.data.data && Array.isArray(dayData.data.data)) {\n                records = dayData.data.data;\n              } else if (dayData.data && Array.isArray(dayData.data)) {\n                records = dayData.data;\n              } else {\n                console.warn('Unexpected data structure in ActionMapper:', dayData);\n                return; // Skip this dayData\n              }\n              if (!Array.isArray(records)) {\n                console.warn('Records is not an array in ActionMapper:', typeof records, records);\n                return;\n              }\n              records.forEach(record => {\n                if (!record || typeof record !== 'object') {\n                  console.warn('Invalid record in ActionMapper:', record);\n                  return;\n                }\n\n                // Extract from actions\n                if (record.actions && Array.isArray(record.actions)) {\n                  record.actions.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from action_values\n                if (record.action_values && Array.isArray(record.action_values)) {\n                  record.action_values.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from conversions\n                if (record.conversions && Array.isArray(record.conversions)) {\n                  record.conversions.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from conversion_values\n                if (record.conversion_values && Array.isArray(record.conversion_values)) {\n                  record.conversion_values.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n              });\n            });\n          } catch (error) {\n            console.error(`Error loading data for config ${config.config_hash}:`, error);\n          }\n        }\n      }\n\n      // Merge discovered actions with our comprehensive list\n      const allActions = new Set([...ALL_META_ACTION_TYPES, ...Array.from(discoveredActionTypes)]);\n      setAvailableActions(Array.from(allActions).sort());\n    } catch (error) {\n      console.error('Error discovering actions:', error);\n      // Fallback to our comprehensive list\n      setAvailableActions(ALL_META_ACTION_TYPES);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const addMapping = () => {\n    if (!newMapping.conceptName || newMapping.actionTypes.length === 0) {\n      alert('Please enter a concept name and select at least one action type');\n      return;\n    }\n    const newMappings = {\n      ...mappings,\n      [newMapping.conceptName]: {\n        actionTypes: newMapping.actionTypes,\n        aggregationType: newMapping.aggregationType,\n        createdAt: new Date().toISOString()\n      }\n    };\n    saveMappings(newMappings);\n    setNewMapping({\n      conceptName: '',\n      actionTypes: [],\n      aggregationType: 'sum'\n    });\n    setShowAddForm(false);\n  };\n  const deleteMapping = conceptName => {\n    if (window.confirm(`Are you sure you want to delete the mapping for \"${conceptName}\"?`)) {\n      const newMappings = {\n        ...mappings\n      };\n      delete newMappings[conceptName];\n      saveMappings(newMappings);\n    }\n  };\n  const toggleActionType = actionType => {\n    const currentTypes = newMapping.actionTypes;\n    const newTypes = currentTypes.includes(actionType) ? currentTypes.filter(t => t !== actionType) : [...currentTypes, actionType];\n    setNewMapping({\n      ...newMapping,\n      actionTypes: newTypes\n    });\n  };\n  const categorizeActionTypes = actionTypes => {\n    const categories = {};\n\n    // Initialize categories based on our comprehensive categorization\n    Object.keys(META_ACTION_TYPES).forEach(category => {\n      const categoryName = category.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n      categories[categoryName] = [];\n    });\n\n    // Add 'Other' category for unknown action types\n    categories['Other'] = [];\n    actionTypes.forEach(actionType => {\n      const category = getActionTypeCategory(actionType);\n      if (category === 'OTHER') {\n        categories['Other'].push(actionType);\n      } else {\n        const categoryName = category.replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n        if (categories[categoryName]) {\n          categories[categoryName].push(actionType);\n        } else {\n          categories['Other'].push(actionType);\n        }\n      }\n    });\n    return categories;\n  };\n  const getSuggestions = () => {\n    if (newMapping.actionTypes.length === 0) return [];\n    return getBusinessConceptSuggestions(newMapping.actionTypes);\n  };\n  const applySuggestion = suggestion => {\n    setNewMapping({\n      ...newMapping,\n      conceptName: suggestion.concept,\n      actionTypes: [...new Set([...newMapping.actionTypes, ...suggestion.matchingActions])]\n    });\n  };\n  const getMappingStats = () => {\n    const totalMappings = Object.keys(mappings).length;\n    const totalActionsMapped = Object.values(mappings).reduce((sum, mapping) => sum + mapping.actionTypes.length, 0);\n    const unmappedActions = availableActions.filter(action => !Object.values(mappings).some(mapping => mapping.actionTypes.includes(action)));\n    return {\n      totalMappings,\n      totalActionsMapped,\n      unmappedActions\n    };\n  };\n  const stats = getMappingStats();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold\",\n          children: \"Meta Action Mapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowAddForm(!showAddForm),\n          className: \"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",\n          children: showAddForm ? 'Cancel' : 'Add New Mapping'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm text-gray-600 dark:text-gray-400 mb-4\",\n        children: \"Map Meta action types to business concepts for better reporting and analysis. This helps aggregate related actions into meaningful metrics.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-blue-50 dark:bg-blue-900 p-3 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-blue-600 dark:text-blue-300\",\n            children: \"Total Mappings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl font-bold text-blue-800 dark:text-blue-100\",\n            children: stats.totalMappings\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-green-50 dark:bg-green-900 p-3 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-green-600 dark:text-green-300\",\n            children: \"Actions Mapped\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl font-bold text-green-800 dark:text-green-100\",\n            children: stats.totalActionsMapped\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-orange-50 dark:bg-orange-900 p-3 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-orange-600 dark:text-orange-300\",\n            children: \"Unmapped Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xl font-bold text-orange-800 dark:text-orange-100\",\n            children: stats.unmappedActions.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm text-gray-500\",\n          children: [availableActions.length, \" unique action types available (including \", ALL_META_ACTION_TYPES.length, \" known from comprehensive analysis)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: discoverAvailableActions,\n          disabled: loading,\n          className: \"text-sm text-blue-600 hover:text-blue-800 disabled:text-gray-400\",\n          children: loading ? 'Discovering...' : 'Refresh Action Types'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), showAddForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium mb-4\",\n        children: \"Create New Mapping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium mb-1\",\n            children: \"Concept Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMapping.conceptName,\n            onChange: e => setNewMapping({\n              ...newMapping,\n              conceptName: e.target.value\n            }),\n            placeholder: \"e.g., conversions, leads, purchases\",\n            className: \"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-1 text-xs text-gray-500\",\n            children: [\"Suggested: \", businessConcepts.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium mb-1\",\n            children: \"Aggregation Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: newMapping.aggregationType,\n            onChange: e => setNewMapping({\n              ...newMapping,\n              aggregationType: e.target.value\n            }),\n            className: \"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"sum\",\n              children: \"Sum (total count/value)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"count\",\n              children: \"Count (number of action types)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"average\",\n              children: \"Average (mean value)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), newMapping.actionTypes.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-between mb-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-blue-800 dark:text-blue-200\",\n            children: \"\\uD83D\\uDCA1 Smart Suggestions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowSuggestions(!showSuggestions),\n            className: \"text-xs text-blue-600 hover:text-blue-800\",\n            children: [showSuggestions ? 'Hide' : 'Show', \" Suggestions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 15\n        }, this), showSuggestions && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [getSuggestions().map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between p-2 bg-white dark:bg-gray-700 rounded text-xs\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium text-blue-600\",\n                children: suggestion.concept\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-gray-500 ml-2\",\n                children: [\"(\", Math.round(suggestion.confidence * 100), \"% match)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-gray-400 mt-1\",\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => applySuggestion(suggestion),\n              className: \"px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\",\n              children: \"Apply\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 21\n          }, this)), getSuggestions().length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs text-gray-500 italic\",\n            children: \"No business concept suggestions for your current selection.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium mb-2\",\n          children: [\"Select Action Types (\", newMapping.actionTypes.length, \" selected)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 13\n        }, this), Object.entries(categorizeActionTypes(availableActions)).map(([category, actions]) => actions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\",\n            children: category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-2\",\n            children: actions.map(actionType => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleActionType(actionType),\n              className: `px-3 py-1 rounded-full text-xs ${newMapping.actionTypes.includes(actionType) ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300'}`,\n              children: actionType\n            }, actionType, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 19\n          }, this)]\n        }, category, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addMapping,\n          className: \"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\",\n          children: \"Create Mapping\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowAddForm(false),\n          className: \"px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium mb-4\",\n        children: [\"Current Mappings (\", Object.keys(mappings).length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), Object.keys(mappings).length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center py-8 text-gray-500\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No mappings created yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm mt-2\",\n          children: \"Create your first mapping to start organizing action types into business concepts.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-4\",\n        children: Object.entries(mappings).map(([conceptName, mapping]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-gray-200 dark:border-gray-700 rounded-lg p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-between items-start mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"text-lg font-medium text-blue-800 dark:text-blue-200\",\n                children: conceptName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 473,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-500\",\n                children: [\"Aggregation: \", mapping.aggregationType, \" \\u2022 \", mapping.actionTypes.length, \" action types\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteMapping(conceptName),\n              className: \"text-red-500 hover:text-red-700 text-sm\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-wrap gap-2\",\n            children: mapping.actionTypes.map(actionType => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs\",\n              children: actionType\n            }, actionType, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 17\n          }, this)]\n        }, conceptName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this), stats.unmappedActions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-medium mb-4\",\n        children: [\"Unmapped Action Types (\", stats.unmappedActions.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap gap-2\",\n        children: stats.unmappedActions.map(actionType => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"px-2 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 rounded text-xs\",\n          children: actionType\n        }, actionType, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionMapper, \"5i0W4dwDdD7vOZcsnG3XP++T7Oc=\");\n_c = ActionMapper;\nexport default ActionMapper;\nvar _c;\n$RefreshReg$(_c, \"ActionMapper\");","map":{"version":3,"names":["React","useState","useEffect","api","META_ACTION_TYPES","ALL_META_ACTION_TYPES","SUGGESTED_BUSINESS_CONCEPTS","getActionTypeCategory","getBusinessConceptSuggestions","jsxDEV","_jsxDEV","ActionMapper","_s","mappings","setMappings","availableActions","setAvailableActions","loading","setLoading","newMapping","setNewMapping","conceptName","actionTypes","aggregationType","showAddForm","setShowAddForm","showSuggestions","setShowSuggestions","businessConcepts","Object","keys","loadMappings","loadKnownActionTypes","discoverAvailableActions","backendMappings","getActionMappings","length","localStorage","setItem","JSON","stringify","savedMappings","getItem","localMappings","parse","saveActionMappings","error","console","localError","saveMappings","newMappings","log","alert","configs","getHistoricalConfigurations","discoveredActionTypes","Set","config","slice","day_count","data","exportHistoricalData","start_date","latest_date","end_date","fields","breakdowns","forEach","dayData","records","Array","isArray","warn","record","actions","action","action_type","add","action_values","conversions","conversion_values","config_hash","allActions","from","sort","addMapping","createdAt","Date","toISOString","deleteMapping","window","confirm","toggleActionType","actionType","currentTypes","newTypes","includes","filter","t","categorizeActionTypes","categories","category","categoryName","replace","toLowerCase","l","toUpperCase","push","getSuggestions","applySuggestion","suggestion","concept","matchingActions","getMappingStats","totalMappings","totalActionsMapped","values","reduce","sum","mapping","unmappedActions","some","stats","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","type","value","onChange","e","target","placeholder","join","map","index","Math","round","confidence","description","entries","_c","$RefreshReg$"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/ActionMapper.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { api } from '../../services/api';\nimport { \n  META_ACTION_TYPES, \n  ALL_META_ACTION_TYPES, \n  SUGGESTED_BUSINESS_CONCEPTS,\n  getActionTypeCategory,\n  getBusinessConceptSuggestions \n} from './utils/metaActionTypes';\n\nconst ActionMapper = () => {\n  const [mappings, setMappings] = useState({});\n  const [availableActions, setAvailableActions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMapping, setNewMapping] = useState({\n    conceptName: '',\n    actionTypes: [],\n    aggregationType: 'sum' // 'sum', 'count', 'average'\n  });\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // Default business concepts from comprehensive analysis\n  const businessConcepts = Object.keys(SUGGESTED_BUSINESS_CONCEPTS);\n\n  useEffect(() => {\n    loadMappings();\n    loadKnownActionTypes();\n  }, []);\n\n  const loadKnownActionTypes = () => {\n    // Start with our comprehensive list of 49 known action types\n    setAvailableActions(ALL_META_ACTION_TYPES);\n    \n    // Also try to discover additional ones from historical data\n    discoverAvailableActions();\n  };\n\n  const loadMappings = async () => {\n    try {\n      // Try to load from backend first\n      const backendMappings = await api.getActionMappings();\n      if (backendMappings.mappings && Object.keys(backendMappings.mappings).length > 0) {\n        setMappings(backendMappings.mappings);\n        // Also sync to localStorage for offline access\n        localStorage.setItem('meta_action_mappings', JSON.stringify(backendMappings.mappings));\n        return;\n      }\n      \n      // Fallback to localStorage\n      const savedMappings = localStorage.getItem('meta_action_mappings');\n      if (savedMappings) {\n        const localMappings = JSON.parse(savedMappings);\n        setMappings(localMappings);\n        // Sync localStorage mappings to backend\n        if (Object.keys(localMappings).length > 0) {\n          await api.saveActionMappings(localMappings);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading mappings:', error);\n      // Fallback to localStorage if backend fails\n      try {\n        const savedMappings = localStorage.getItem('meta_action_mappings');\n        if (savedMappings) {\n          setMappings(JSON.parse(savedMappings));\n        }\n      } catch (localError) {\n        console.error('Error loading from localStorage:', localError);\n      }\n    }\n  };\n\n  const saveMappings = async (newMappings) => {\n    try {\n      // Save to backend\n      await api.saveActionMappings(newMappings);\n      \n      // Update local state\n      setMappings(newMappings);\n      \n      // Also save to localStorage as backup\n      localStorage.setItem('meta_action_mappings', JSON.stringify(newMappings));\n      \n      console.log('Action mappings saved successfully');\n    } catch (error) {\n      console.error('Error saving mappings to backend:', error);\n      \n      // Fallback to localStorage only\n      setMappings(newMappings);\n      localStorage.setItem('meta_action_mappings', JSON.stringify(newMappings));\n      \n      alert('Mappings saved locally, but failed to sync to server. They will be synced next time the page loads.');\n    }\n  };\n\n  const discoverAvailableActions = async () => {\n    setLoading(true);\n    try {\n      // Get recent historical data to discover action types\n      const configs = await api.getHistoricalConfigurations();\n      const discoveredActionTypes = new Set();\n\n      for (const config of configs.slice(0, 3)) { // Check recent configs\n        if (config.day_count > 0) {\n          try {\n            const data = await api.exportHistoricalData({\n              start_date: config.latest_date,\n              end_date: config.latest_date,\n              fields: config.fields,\n              breakdowns: config.breakdowns\n            });\n\n            // Extract action types from the data\n            data.data.forEach(dayData => {\n              let records = [];\n              \n              // More defensive extraction of records\n              if (dayData.data && dayData.data.data && Array.isArray(dayData.data.data)) {\n                records = dayData.data.data;\n              } else if (dayData.data && Array.isArray(dayData.data)) {\n                records = dayData.data;\n              } else {\n                console.warn('Unexpected data structure in ActionMapper:', dayData);\n                return; // Skip this dayData\n              }\n              \n              if (!Array.isArray(records)) {\n                console.warn('Records is not an array in ActionMapper:', typeof records, records);\n                return;\n              }\n              \n              records.forEach(record => {\n                if (!record || typeof record !== 'object') {\n                  console.warn('Invalid record in ActionMapper:', record);\n                  return;\n                }\n                \n                // Extract from actions\n                if (record.actions && Array.isArray(record.actions)) {\n                  record.actions.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from action_values\n                if (record.action_values && Array.isArray(record.action_values)) {\n                  record.action_values.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from conversions\n                if (record.conversions && Array.isArray(record.conversions)) {\n                  record.conversions.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from conversion_values\n                if (record.conversion_values && Array.isArray(record.conversion_values)) {\n                  record.conversion_values.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n              });\n            });\n          } catch (error) {\n            console.error(`Error loading data for config ${config.config_hash}:`, error);\n          }\n        }\n      }\n\n      // Merge discovered actions with our comprehensive list\n      const allActions = new Set([...ALL_META_ACTION_TYPES, ...Array.from(discoveredActionTypes)]);\n      setAvailableActions(Array.from(allActions).sort());\n    } catch (error) {\n      console.error('Error discovering actions:', error);\n      // Fallback to our comprehensive list\n      setAvailableActions(ALL_META_ACTION_TYPES);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addMapping = () => {\n    if (!newMapping.conceptName || newMapping.actionTypes.length === 0) {\n      alert('Please enter a concept name and select at least one action type');\n      return;\n    }\n\n    const newMappings = {\n      ...mappings,\n      [newMapping.conceptName]: {\n        actionTypes: newMapping.actionTypes,\n        aggregationType: newMapping.aggregationType,\n        createdAt: new Date().toISOString()\n      }\n    };\n\n    saveMappings(newMappings);\n    setNewMapping({ conceptName: '', actionTypes: [], aggregationType: 'sum' });\n    setShowAddForm(false);\n  };\n\n  const deleteMapping = (conceptName) => {\n    if (window.confirm(`Are you sure you want to delete the mapping for \"${conceptName}\"?`)) {\n      const newMappings = { ...mappings };\n      delete newMappings[conceptName];\n      saveMappings(newMappings);\n    }\n  };\n\n  const toggleActionType = (actionType) => {\n    const currentTypes = newMapping.actionTypes;\n    const newTypes = currentTypes.includes(actionType)\n      ? currentTypes.filter(t => t !== actionType)\n      : [...currentTypes, actionType];\n    \n    setNewMapping({ ...newMapping, actionTypes: newTypes });\n  };\n\n  const categorizeActionTypes = (actionTypes) => {\n    const categories = {};\n    \n    // Initialize categories based on our comprehensive categorization\n    Object.keys(META_ACTION_TYPES).forEach(category => {\n      const categoryName = category.replace(/_/g, ' ').toLowerCase()\n        .replace(/\\b\\w/g, l => l.toUpperCase());\n      categories[categoryName] = [];\n    });\n    \n    // Add 'Other' category for unknown action types\n    categories['Other'] = [];\n\n    actionTypes.forEach(actionType => {\n      const category = getActionTypeCategory(actionType);\n      if (category === 'OTHER') {\n        categories['Other'].push(actionType);\n      } else {\n        const categoryName = category.replace(/_/g, ' ').toLowerCase()\n          .replace(/\\b\\w/g, l => l.toUpperCase());\n        if (categories[categoryName]) {\n          categories[categoryName].push(actionType);\n        } else {\n          categories['Other'].push(actionType);\n        }\n      }\n    });\n\n    return categories;\n  };\n\n  const getSuggestions = () => {\n    if (newMapping.actionTypes.length === 0) return [];\n    return getBusinessConceptSuggestions(newMapping.actionTypes);\n  };\n\n  const applySuggestion = (suggestion) => {\n    setNewMapping({\n      ...newMapping,\n      conceptName: suggestion.concept,\n      actionTypes: [...new Set([...newMapping.actionTypes, ...suggestion.matchingActions])]\n    });\n  };\n\n  const getMappingStats = () => {\n    const totalMappings = Object.keys(mappings).length;\n    const totalActionsMapped = Object.values(mappings).reduce((sum, mapping) => sum + mapping.actionTypes.length, 0);\n    const unmappedActions = availableActions.filter(action => \n      !Object.values(mappings).some(mapping => mapping.actionTypes.includes(action))\n    );\n\n    return { totalMappings, totalActionsMapped, unmappedActions };\n  };\n\n  const stats = getMappingStats();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">Meta Action Mapping</h2>\n          <button\n            onClick={() => setShowAddForm(!showAddForm)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            {showAddForm ? 'Cancel' : 'Add New Mapping'}\n          </button>\n        </div>\n\n        <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n          Map Meta action types to business concepts for better reporting and analysis. \n          This helps aggregate related actions into meaningful metrics.\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-900 p-3 rounded\">\n            <div className=\"text-sm text-blue-600 dark:text-blue-300\">Total Mappings</div>\n            <div className=\"text-xl font-bold text-blue-800 dark:text-blue-100\">{stats.totalMappings}</div>\n          </div>\n          <div className=\"bg-green-50 dark:bg-green-900 p-3 rounded\">\n            <div className=\"text-sm text-green-600 dark:text-green-300\">Actions Mapped</div>\n            <div className=\"text-xl font-bold text-green-800 dark:text-green-100\">{stats.totalActionsMapped}</div>\n          </div>\n          <div className=\"bg-orange-50 dark:bg-orange-900 p-3 rounded\">\n            <div className=\"text-sm text-orange-600 dark:text-orange-300\">Unmapped Actions</div>\n            <div className=\"text-xl font-bold text-orange-800 dark:text-orange-100\">{stats.unmappedActions.length}</div>\n          </div>\n        </div>\n\n        {/* Discovery */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-500\">\n            {availableActions.length} unique action types available (including {ALL_META_ACTION_TYPES.length} known from comprehensive analysis)\n          </span>\n          <button\n            onClick={discoverAvailableActions}\n            disabled={loading}\n            className=\"text-sm text-blue-600 hover:text-blue-800 disabled:text-gray-400\"\n          >\n            {loading ? 'Discovering...' : 'Refresh Action Types'}\n          </button>\n        </div>\n      </div>\n\n      {/* Add New Mapping Form */}\n      {showAddForm && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Create New Mapping</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Concept Name\n              </label>\n              <input\n                type=\"text\"\n                value={newMapping.conceptName}\n                onChange={(e) => setNewMapping({ ...newMapping, conceptName: e.target.value })}\n                placeholder=\"e.g., conversions, leads, purchases\"\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n              />\n              <div className=\"mt-1 text-xs text-gray-500\">\n                Suggested: {businessConcepts.join(', ')}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Aggregation Type\n              </label>\n              <select\n                value={newMapping.aggregationType}\n                onChange={(e) => setNewMapping({ ...newMapping, aggregationType: e.target.value })}\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n              >\n                <option value=\"sum\">Sum (total count/value)</option>\n                <option value=\"count\">Count (number of action types)</option>\n                <option value=\"average\">Average (mean value)</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Intelligent Suggestions */}\n          {newMapping.actionTypes.length > 0 && (\n            <div className=\"mb-4 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">💡 Smart Suggestions</h4>\n                <button\n                  onClick={() => setShowSuggestions(!showSuggestions)}\n                  className=\"text-xs text-blue-600 hover:text-blue-800\"\n                >\n                  {showSuggestions ? 'Hide' : 'Show'} Suggestions\n                </button>\n              </div>\n              \n              {showSuggestions && (\n                <div className=\"space-y-2\">\n                  {getSuggestions().map((suggestion, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-white dark:bg-gray-700 rounded text-xs\">\n                      <div>\n                        <span className=\"font-medium text-blue-600\">{suggestion.concept}</span>\n                        <span className=\"text-gray-500 ml-2\">({Math.round(suggestion.confidence * 100)}% match)</span>\n                        <div className=\"text-gray-400 mt-1\">{suggestion.description}</div>\n                      </div>\n                      <button\n                        onClick={() => applySuggestion(suggestion)}\n                        className=\"px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                      >\n                        Apply\n                      </button>\n                    </div>\n                  ))}\n                  {getSuggestions().length === 0 && (\n                    <div className=\"text-xs text-gray-500 italic\">\n                      No business concept suggestions for your current selection.\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-2\">\n              Select Action Types ({newMapping.actionTypes.length} selected)\n            </label>\n            \n            {Object.entries(categorizeActionTypes(availableActions)).map(([category, actions]) => (\n              actions.length > 0 && (\n                <div key={category} className=\"mb-4\">\n                  <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">{category}</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {actions.map(actionType => (\n                      <button\n                        key={actionType}\n                        onClick={() => toggleActionType(actionType)}\n                        className={`px-3 py-1 rounded-full text-xs ${\n                          newMapping.actionTypes.includes(actionType)\n                            ? 'bg-blue-500 text-white'\n                            : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300'\n                        }`}\n                      >\n                        {actionType}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )\n            ))}\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={addMapping}\n              className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n            >\n              Create Mapping\n            </button>\n            <button\n              onClick={() => setShowAddForm(false)}\n              className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Existing Mappings */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-medium mb-4\">Current Mappings ({Object.keys(mappings).length})</h3>\n        \n        {Object.keys(mappings).length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>No mappings created yet.</p>\n            <p className=\"text-sm mt-2\">Create your first mapping to start organizing action types into business concepts.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(mappings).map(([conceptName, mapping]) => (\n              <div key={conceptName} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <h4 className=\"text-lg font-medium text-blue-800 dark:text-blue-200\">{conceptName}</h4>\n                    <div className=\"text-sm text-gray-500\">\n                      Aggregation: {mapping.aggregationType} • {mapping.actionTypes.length} action types\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => deleteMapping(conceptName)}\n                    className=\"text-red-500 hover:text-red-700 text-sm\"\n                  >\n                    Delete\n                  </button>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {mapping.actionTypes.map(actionType => (\n                    <span\n                      key={actionType}\n                      className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs\"\n                    >\n                      {actionType}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Unmapped Actions */}\n      {stats.unmappedActions.length > 0 && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Unmapped Action Types ({stats.unmappedActions.length})</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {stats.unmappedActions.map(actionType => (\n              <span\n                key={actionType}\n                className=\"px-2 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 rounded text-xs\"\n              >\n                {actionType}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ActionMapper; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}