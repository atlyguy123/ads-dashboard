{"ast":null,"code":"import _objectSpread from\"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';// Base URL for API requests - updated to use localhost:5001 consistently\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5001';// Create an axios instance\nconst apiClient=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'},// Increase timeout for large responses\ntimeout:600000,// 10 minutes\n// Set max content length to 500MB\nmaxContentLength:500*1024*1024,maxBodyLength:500*1024*1024});// Add response interceptor to handle large responses\napiClient.interceptors.response.use(response=>{// Log response size for debugging\nif(response.data){const responseSize=JSON.stringify(response.data).length;if(responseSize>10*1024*1024){// 10MB+\nconsole.warn(\"Large API response: \".concat((responseSize/(1024*1024)).toFixed(2),\" MB\"));}}return response;},error=>{var _error$message,_error$message2;// Enhanced error handling for memory issues\nif(error.code==='ERR_INSUFFICIENT_RESOURCES'||(_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes('out of memory')||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes('Maximum call stack')){console.error('Response too large for browser to handle:',error);error.message='Response is too large for your browser to handle. Please use debug mode or reduce the date range.';}return Promise.reject(error);});export const api={// Mixpanel Debug Endpoints\n/**\n   * Get raw Mixpanel data with filters\n   * @param {Object} params - Query parameters\n   * @returns {Promise<Object>} - Response data\n   */getRawMixpanelData:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await apiClient.get('/api/mixpanel/data',{params});return response.data;}catch(error){console.error('Error fetching Mixpanel data:',error);throw error;}},/**\n   * Get the last Mixpanel data load timestamp\n   * @returns {Promise<Object>} - Response with timestamp\n   */getMixpanelDebugSyncTS:async()=>{try{const response=await apiClient.get('/api/mixpanel/debug/sync-ts');return response.data;}catch(error){console.error('Error fetching Mixpanel sync timestamp:',error);throw error;}},/**\n   * Reset the last Mixpanel data load timestamp\n   * @returns {Promise<Object>} - Response with success message\n   */resetMixpanelDebugSyncTS:async()=>{try{const response=await apiClient.post('/api/mixpanel/debug/sync-ts/reset');return response.data;}catch(error){console.error('Error resetting Mixpanel sync timestamp:',error);throw error;}},/**\n   * Get the latest processed date to continue from\n   * @returns {Promise<Object>} - Response with latest processed date info\n   */getLatestProcessedDate:async()=>{try{const response=await apiClient.get('/api/mixpanel/debug/latest-processed-date');return response.data;}catch(error){console.error('Error fetching latest processed date:',error);throw error;}},/**\n   * Reset all Mixpanel data in the database\n   * @returns {Promise<Object>} - Response with success message\n   */resetMixpanelDatabase:async()=>{try{const response=await apiClient.post('/api/mixpanel/debug/database/reset');return response.data;}catch(error){console.error('Error resetting Mixpanel database:',error);throw error;}},/**\n   * Refresh Mixpanel data by clearing data directories\n   * @returns {Promise<Object>} - Response with success message\n   */refreshMixpanelData:async()=>{try{const response=await apiClient.post('/api/mixpanel/debug/data/refresh');return response.data;}catch(error){console.error('Error refreshing Mixpanel data:',error);throw error;}},/**\n   * Trigger Mixpanel data ingestion\n   * @param {string} startDate - Optional start date (YYYY-MM-DD)\n   * @returns {Promise<Object>} - Response with success message\n   */triggerMixpanelIngest:async startDate=>{try{const response=await apiClient.post('/api/mixpanel/ingest',null,{params:startDate?{start_date:startDate}:{}});return response.data;}catch(error){console.error('Error triggering data ingest:',error);throw error;}},/**\n   * Start the Mixpanel data processing pipeline\n   * @param {Object} options - Processing options\n   * @param {string} options.start_date - Start date (YYYY-MM-DD)\n   * @param {boolean} options.wipe_folder - Whether to wipe the folder before processing\n   * @returns {Promise<Object>} - Response with success status\n   */startMixpanelProcessing:async options=>{try{const response=await apiClient.post('/api/mixpanel/process/start',options);return response.data;}catch(error){console.error('Error starting Mixpanel processing:',error);throw error;}},/**\n   * Get the current status of Mixpanel data processing\n   * @returns {Promise<Object>} - Response with processing status\n   */getMixpanelProcessStatus:async()=>{try{const response=await apiClient.get('/api/mixpanel/process/status');return response.data;}catch(error){console.error('Error fetching process status:',error);throw error;}},/**\n   * Cancel the current Mixpanel data processing job\n   * @returns {Promise<Object>} - Response with success status\n   */cancelMixpanelProcessing:async()=>{try{const response=await apiClient.post('/api/mixpanel/process/cancel');return response.data;}catch(error){console.error('Error canceling processing:',error);throw error;}},/**\n   * Get test DB user data\n   * @param {string} distinctId - Optional user distinct ID\n   * @returns {Promise<Object>} - Response with user data\n   */getTestDbUser:async distinctId=>{try{const response=await apiClient.get('/api/mixpanel/debug/test-db-user',{params:distinctId?{distinct_id:distinctId}:{}});return response.data;}catch(error){console.error('Error fetching test DB user:',error);throw error;}},/**\n   * Get test DB events data\n   * @param {string} distinctId - Optional user distinct ID\n   * @returns {Promise<Object>} - Response with events data\n   */getTestDbEvents:async distinctId=>{try{const response=await apiClient.get('/api/mixpanel/debug/test-db-events',{params:distinctId?{distinct_id:distinctId}:{}});return response.data;}catch(error){console.error('Error fetching test DB events:',error);throw error;}},/**\n   * Fetch Meta API data\n   * @param {Object} params - Request parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {number} params.time_increment - Time increment in days\n   * @param {string} [params.fields] - Comma-separated list of fields to retrieve\n   * @returns {Promise<Object>} - Response with Meta API data\n   */fetchMetaData:async params=>{try{const response=await apiClient.post('/api/meta/fetch',params);return response.data;}catch(error){console.error('Error fetching Meta API data:',error);throw error;}},/**\n   * Check the status of an async Meta API job\n   * @param {string} reportRunId - The report run ID\n   * @returns {Promise<Object>} - Job status information\n   */checkMetaJobStatus:async reportRunId=>{try{const response=await apiClient.get(\"/api/meta/job/\".concat(reportRunId,\"/status\"));return response.data;}catch(error){console.error('Error checking Meta job status:',error);throw error;}},/**\n   * Get results from a completed async Meta API job\n   * @param {string} reportRunId - The report run ID\n   * @param {boolean} useFileUrl - Whether to use file URL download\n   * @returns {Promise<Object>} - Job results\n   */getMetaJobResults:async function(reportRunId){let useFileUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{const response=await apiClient.get(\"/api/meta/job/\".concat(reportRunId,\"/results\"),{params:{use_file_url:useFileUrl}});return response.data;}catch(error){console.error('Error getting Meta job results:',error);throw error;}},// --- Cohort Analyzer API Methods ---\nanalyzeCohortData:async filters=>{try{const response=await apiClient.post('/api/cohort-analysis',filters);return response.data;}catch(error){var _error$response,_error$response2;console.error('Error analyzing cohort data:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);throw((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error;}},// --- Cohort Analyzer V3 API Methods ---\nanalyzeCohortDataV3:async filters=>{try{console.log('[V3] Sending cohort analysis request to V3 API:',filters);const response=await apiClient.post('/api/v3/cohort/analyze',filters);console.log('[V3] Received response from V3 API:',response.data);return response.data;}catch(error){var _error$response3,_error$response4;console.error('Error analyzing cohort data with V3 API:',((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data)||error.message);throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||error;}},analyzeCohortDataV3Enhanced:async filters=>{try{console.log('[V3] Sending enhanced cohort analysis request to V3 API:',filters);const response=await apiClient.post('/api/v3/cohort/analyze-enhanced',filters);console.log('[V3] Received enhanced response from V3 API:',response.data);return response.data;}catch(error){var _error$response5,_error$response6;console.error('Error analyzing cohort data with V3 Enhanced API:',((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data)||error.message);throw((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.data)||error;}},// --- Cohort Analyzer V3 Refactored API Methods ---\nanalyzeCohortDataV3Refactored:async filters=>{try{console.log('[V3-Refactored] Sending cohort analysis request to V3 Refactored API:',filters);const response=await apiClient.post('/api/v3/cohort/analyze-refactored',filters);console.log('[V3-Refactored] Received response from V3 Refactored API:',response.data);return response.data;}catch(error){var _error$response7,_error$response8;console.error('Error analyzing cohort data with V3 Refactored API:',((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||error.message);throw((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.data)||error;}},getV3RefactoredHealth:async()=>{try{const response=await apiClient.get('/api/v3/cohort/refactored-health');return response.data;}catch(error){var _error$response9,_error$response0;console.error('Error checking V3 Refactored health:',((_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data)||error.message);throw((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.data)||error;}},getV3RefactoredVersion:async()=>{try{const response=await apiClient.get('/api/v3/cohort/refactored-version');return response.data;}catch(error){var _error$response1,_error$response10;console.error('Error getting V3 Refactored version:',((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.data)||error.message);throw((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.data)||error;}},// V3 Refactored Debug Methods\nrunV3RefactoredStageAnalysis:async(filters,stage)=>{try{console.log(\"\\uD83D\\uDE80\\uD83D\\uDE80\\uD83D\\uDE80 [V3-REFACTORED API] CALLING runV3RefactoredStageAnalysis for stage: \".concat(stage));console.log(\"\\uD83D\\uDE80\\uD83D\\uDE80\\uD83D\\uDE80 [V3-REFACTORED API] Will POST to: /api/v3/cohort/analyze-refactored\");console.log(\"\\uD83D\\uDE80\\uD83D\\uDE80\\uD83D\\uDE80 [V3-REFACTORED API] Filters:\",filters);const debugFilters=_objectSpread(_objectSpread({},filters),{},{debug_mode:true,debug_stage:stage,pipeline_version:'3.0.0_refactored'});console.log(\"\\uD83D\\uDE80\\uD83D\\uDE80\\uD83D\\uDE80 [V3-REFACTORED API] Final payload:\",debugFilters);const response=await apiClient.post('/api/v3/cohort/analyze-refactored',debugFilters);console.log(\"\\uD83D\\uDE80\\uD83D\\uDE80\\uD83D\\uDE80 [V3-REFACTORED API] SUCCESS! Received response:\",response.data);return response.data;}catch(error){var _error$response11,_error$response12;console.error(\"\\uD83D\\uDEA8\\uD83D\\uDEA8\\uD83D\\uDEA8 [V3-REFACTORED API] ERROR in stage \".concat(stage,\" analysis:\"),((_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.data)||error.message);throw((_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.data)||error;}},getV3Health:async()=>{try{const response=await apiClient.get('/api/v3/cohort/health');return response.data;}catch(error){var _error$response13,_error$response14;console.error('Error checking V3 health:',((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.data)||error.message);throw((_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.data)||error;}},getV3Version:async()=>{try{const response=await apiClient.get('/api/v3/cohort/version');return response.data;}catch(error){var _error$response15,_error$response16;console.error('Error getting V3 version:',((_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.data)||error.message);throw((_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.data)||error;}},getCohortUserTimeline:async filters=>{try{console.log('[DEBUG] getCohortUserTimeline called with filters:',filters);// Convert optional_filters to legacy format for the unified pipeline\nconst optional_filters=filters.optional_filters||[];let primary_user_filter={};let secondary_filters=[];if(optional_filters.length>0){// Convert optional_filters to legacy format\nconst user_filters=optional_filters.filter(f=>f.property_source==='user');const event_filters=optional_filters.filter(f=>f.property_source==='event');// Use the first user filter as primary_user_filter\nprimary_user_filter=user_filters.length>0?user_filters[0]:{};// Only event filters go to secondary_filters\nsecondary_filters=event_filters;}else{// Fall back to legacy format if provided\nprimary_user_filter=filters.primary_user_filter||{};secondary_filters=filters.secondary_filters||[];}const payload={date_from:filters.date_from_str,date_to:filters.date_to_str,primary_user_filter:primary_user_filter,secondary_filters:secondary_filters,config:{}};console.log('[DEBUG] getCohortUserTimeline sending payload:',payload);const response=await apiClient.post('/api/cohort-pipeline/timeline',payload);console.log('[DEBUG] getCohortUserTimeline received response:',response.data);return response.data;}catch(error){var _error$response17,_error$response18;console.error('Error fetching cohort user timeline:',((_error$response17=error.response)===null||_error$response17===void 0?void 0:_error$response17.data)||error.message);console.error('[DEBUG] getCohortUserTimeline full error:',error);throw((_error$response18=error.response)===null||_error$response18===void 0?void 0:_error$response18.data)||error;}},getUserEventRevenueTimeline:async function(filters){let distinctId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let productId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{var _v3Data$stage_results;console.log('[DEBUG] getUserEventRevenueTimeline called with filters:',filters,'distinctId:',distinctId,'productId:',productId);// CRITICAL FIX: Use V3 API instead of legacy API\n// The legacy API has the business logic bug where trial conversions incorrectly set initial_purchase = 1\n// The V3 API uses the correct EventStateTracker that properly handles business rules\n// Convert filters to V3 format\nconst v3Payload={date_from_str:filters.date_from_str,date_to_str:filters.date_to_str,// Convert optional_filters to V3 user_filters format\nuser_filters:[]};// Handle filter conversion\nif(filters.optional_filters&&filters.optional_filters.length>0){// Use optional_filters (new format)\nv3Payload.user_filters=filters.optional_filters.filter(f=>f.property_source==='user');}else if(filters.primary_user_filter&&filters.primary_user_filter.property_name){// Convert legacy primary_user_filter format\nv3Payload.user_filters=[{property_name:filters.primary_user_filter.property_name,property_values:filters.primary_user_filter.property_values,property_source:'user'}];}// Add user/product filtering if specified\nif(distinctId)v3Payload.distinct_id=distinctId;if(productId)v3Payload.product_id=productId;console.log('[DEBUG] getUserEventRevenueTimeline sending V3 payload:',v3Payload);// Use V3 API endpoint that has correct business logic\nconst response=await apiClient.post('/api/v3/cohort/analyze-refactored',v3Payload);console.log('[DEBUG] getUserEventRevenueTimeline received V3 response:',response.data);// Convert V3 response to legacy format for compatibility with existing frontend code\nconst v3Data=response.data;const stage3Data=v3Data===null||v3Data===void 0?void 0:(_v3Data$stage_results=v3Data.stage_results)===null||_v3Data$stage_results===void 0?void 0:_v3Data$stage_results.stage3;if(!stage3Data||!stage3Data.timeline_results){throw new Error('Invalid V3 response format');}const timelineResults=stage3Data.timeline_results;// Convert V3 timeline data to legacy format\nconst legacyFormat={dates:timelineResults.dates||[],event_rows:{},estimate_rows:{},arpc_per_product:timelineResults.arpc_per_product||{},available_users:Object.keys(timelineResults.user_daily_metrics||{}),available_products:timelineResults.available_products||[]};// Convert daily metrics to legacy event_rows format\nif(timelineResults.timeline_data){legacyFormat.dates.forEach(date=>{const dayData=timelineResults.timeline_data[date]||{};// Map V3 field names to legacy field names\nif(!legacyFormat.event_rows.trial_started)legacyFormat.event_rows.trial_started={};if(!legacyFormat.event_rows.trial_pending)legacyFormat.event_rows.trial_pending={};if(!legacyFormat.event_rows.trial_ended)legacyFormat.event_rows.trial_ended={};if(!legacyFormat.event_rows.trial_converted)legacyFormat.event_rows.trial_converted={};if(!legacyFormat.event_rows.trial_canceled)legacyFormat.event_rows.trial_canceled={};if(!legacyFormat.event_rows.initial_purchase)legacyFormat.event_rows.initial_purchase={};if(!legacyFormat.event_rows.subscription_active)legacyFormat.event_rows.subscription_active={};if(!legacyFormat.event_rows.subscription_cancelled)legacyFormat.event_rows.subscription_cancelled={};if(!legacyFormat.event_rows.refund)legacyFormat.event_rows.refund={};legacyFormat.event_rows.trial_started[date]=dayData.trial_started||0;legacyFormat.event_rows.trial_pending[date]=dayData.trial_pending||0;legacyFormat.event_rows.trial_ended[date]=dayData.trial_ended||0;legacyFormat.event_rows.trial_converted[date]=dayData.trial_converted||0;legacyFormat.event_rows.trial_canceled[date]=dayData.trial_cancelled||0;// Note: cancelled vs canceled\nlegacyFormat.event_rows.initial_purchase[date]=dayData.initial_purchase||0;// CRITICAL: This will now be 0 for trial conversions\nlegacyFormat.event_rows.subscription_active[date]=dayData.subscription_active||0;legacyFormat.event_rows.subscription_cancelled[date]=dayData.subscription_cancelled||0;legacyFormat.event_rows.refund[date]=dayData.refund_count||0;// Revenue data\nif(!legacyFormat.estimate_rows.current_revenue)legacyFormat.estimate_rows.current_revenue={};if(!legacyFormat.estimate_rows.estimated_revenue)legacyFormat.estimate_rows.estimated_revenue={};if(!legacyFormat.estimate_rows.estimated_net_revenue)legacyFormat.estimate_rows.estimated_net_revenue={};legacyFormat.estimate_rows.current_revenue[date]=dayData.revenue||0;legacyFormat.estimate_rows.estimated_revenue[date]=dayData.estimated_revenue||0;legacyFormat.estimate_rows.estimated_net_revenue[date]=dayData.estimated_revenue||0;});}// Add cumulative data for legacy compatibility\nlegacyFormat.event_rows.cumulative_initial_purchase={};let cumulativeInitialPurchase=0;legacyFormat.dates.forEach(date=>{cumulativeInitialPurchase+=legacyFormat.event_rows.initial_purchase[date]||0;legacyFormat.event_rows.cumulative_initial_purchase[date]=cumulativeInitialPurchase;});console.log('[DEBUG] getUserEventRevenueTimeline converted to legacy format:',legacyFormat);return legacyFormat;}catch(err){console.error('getUserEventRevenueTimeline error:',err);throw err;}},getDiscoverableCohortProperties:async()=>{try{const response=await apiClient.get('/api/cohort_analyzer/discoverable_properties');return response.data;}catch(error){var _error$response19,_error$response20;console.error('Error fetching discoverable cohort properties:',((_error$response19=error.response)===null||_error$response19===void 0?void 0:_error$response19.data)||error.message);throw((_error$response20=error.response)===null||_error$response20===void 0?void 0:_error$response20.data)||error;}},getDiscoverableCohortPropertyValues:async(propertyKey,propertySource)=>{try{const response=await apiClient.get('/api/cohort_analyzer/property_values',{params:{property_key:propertyKey,property_source:propertySource}});return response.data;}catch(error){var _error$response21,_error$response22;console.error(\"Error fetching values for \".concat(propertyKey,\" (\").concat(propertySource,\"):\"),((_error$response21=error.response)===null||_error$response21===void 0?void 0:_error$response21.data)||error.message);throw((_error$response22=error.response)===null||_error$response22===void 0?void 0:_error$response22.data)||error;}},triggerCohortPropertyDiscovery:async()=>{try{const response=await apiClient.post('/api/cohort_analyzer/trigger_discovery');return response.data;}catch(error){var _error$response23,_error$response24;console.error('Error triggering cohort property discovery:',((_error$response23=error.response)===null||_error$response23===void 0?void 0:_error$response23.data)||error.message);throw((_error$response24=error.response)===null||_error$response24===void 0?void 0:_error$response24.data)||error;}},enableCohortProperties:async()=>{try{const response=await apiClient.post('/api/cohort_analyzer/enable_properties');return response.data;}catch(error){var _error$response25,_error$response26;console.error('Error enabling cohort properties:',((_error$response25=error.response)===null||_error$response25===void 0?void 0:_error$response25.data)||error.message);throw((_error$response26=error.response)===null||_error$response26===void 0?void 0:_error$response26.data)||error;}},getPropertyDiscoveryStatus:async()=>{try{const response=await apiClient.get('/api/cohort_analyzer/discovery_status');return response.data;}catch(error){var _error$response27,_error$response28;console.error('Error checking property discovery status:',((_error$response27=error.response)===null||_error$response27===void 0?void 0:_error$response27.data)||error.message);throw((_error$response28=error.response)===null||_error$response28===void 0?void 0:_error$response28.data)||error;}},// --- Mixpanel Debug API Methods ---\ngetMixpanelDatabaseStats:async()=>{try{const response=await apiClient.get('/api/mixpanel/debug/database-stats');return response.data;}catch(error){console.error('Error fetching Mixpanel database statistics:',error);throw error;}},/**\n   * Get events for a specific user\n   * @param {string} userId - User ID or distinct ID\n   * @returns {Promise<Array>} - Response with user events\n   */getUserEvents:async userId=>{try{const response=await apiClient.get('/api/mixpanel/debug/user-events',{params:{user_id:userId}});return response.data;}catch(error){console.error('Error fetching user events:',error);throw error;}},// --- Meta Historical Data API Methods ---\n/**\n   * Start a historical data collection job\n   * @param {Object} params - Collection parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @returns {Promise<Object>} - Response with job ID\n   */startHistoricalCollection:async params=>{try{const response=await apiClient.post('/api/meta/historical/start',params);return response.data;}catch(error){console.error('Error starting historical collection:',error);throw error;}},/**\n   * Get status of a historical collection job\n   * @param {string} jobId - Job ID\n   * @returns {Promise<Object>} - Job status information\n   */getHistoricalJobStatus:async jobId=>{try{const response=await apiClient.get(\"/api/meta/historical/jobs/\".concat(jobId,\"/status\"));return response.data;}catch(error){console.error('Error getting job status:',error);throw error;}},/**\n   * Cancel a historical collection job\n   * @param {string} jobId - Job ID\n   * @returns {Promise<Object>} - Cancellation confirmation\n   */cancelHistoricalJob:async jobId=>{try{const response=await apiClient.post(\"/api/meta/historical/jobs/\".concat(jobId,\"/cancel\"));return response.data;}catch(error){console.error('Error cancelling job:',error);throw error;}},/**\n   * Get data coverage summary for a configuration\n   * @param {Object} params - Configuration parameters\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @param {string} [params.start_date] - Optional start date filter\n   * @param {string} [params.end_date] - Optional end date filter\n   * @returns {Promise<Object>} - Coverage summary\n   */getDataCoverage:async params=>{try{const response=await apiClient.get('/api/meta/historical/coverage',{params});return response.data;}catch(error){console.error('Error getting data coverage:',error);throw error;}},/**\n   * Get list of missing dates for a configuration\n   * @param {Object} params - Configuration parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @returns {Promise<Object>} - Missing dates information\n   */getMissingDates:async params=>{try{const response=await apiClient.get('/api/meta/historical/missing-dates',{params});return response.data;}catch(error){console.error('Error getting missing dates:',error);throw error;}},/**\n   * Delete all data for a specific historical configuration\n   * @param {string} configHash - Configuration hash to delete\n   * @returns {Promise<Object>} - Deletion confirmation\n   */deleteHistoricalConfiguration:async configHash=>{try{const response=await apiClient.delete(\"/api/meta/historical/configurations/\".concat(configHash));return response.data;}catch(error){console.error('Error deleting historical configuration:',error);throw error;}},/**\n   * Get all stored request configurations\n   * @returns {Promise<Array>} - List of configurations\n   */getHistoricalConfigurations:async()=>{try{const response=await apiClient.get('/api/meta/historical/configurations');return response.data;}catch(error){console.error('Error getting configurations:',error);throw error;}},/**\n   * Export stored data for a configuration and date range\n   * @param {Object} params - Export parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @param {string} [params.format] - Export format (default: 'json')\n   * @returns {Promise<Object>} - Exported data\n   */exportHistoricalData:async params=>{try{const response=await apiClient.get('/api/meta/historical/export',{params});return response.data;}catch(error){console.error('Error exporting data:',error);throw error;}},/**\n   * Get stored data for a specific day and configuration\n   * @param {Object} params - Day data parameters\n   * @param {string} params.date - Date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @returns {Promise<Object>} - Day data\n   */getHistoricalDayData:async params=>{try{const response=await apiClient.post('/api/meta/historical/get-day-data',params);return response.data;}catch(error){console.error('Error getting day data:',error);throw error;}},/**\n   * Get current action mappings\n   * @returns {Promise<Object>} - Action mappings\n   */getActionMappings:async()=>{try{const response=await apiClient.get('/api/meta/action-mappings');return response.data;}catch(error){console.error('Error getting action mappings:',error);throw error;}},/**\n   * Save action mappings\n   * @param {Object} mappings - Action mappings to save\n   * @returns {Promise<Object>} - Save confirmation\n   */saveActionMappings:async mappings=>{try{const response=await apiClient.post('/api/meta/action-mappings',{mappings});return response.data;}catch(error){console.error('Error saving action mappings:',error);throw error;}}};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","timeout","maxContentLength","maxBodyLength","interceptors","response","use","data","responseSize","JSON","stringify","length","console","warn","concat","toFixed","error","_error$message","_error$message2","code","message","includes","Promise","reject","api","getRawMixpanelData","params","arguments","undefined","get","getMixpanelDebugSyncTS","resetMixpanelDebugSyncTS","post","getLatestProcessedDate","resetMixpanelDatabase","refreshMixpanelData","triggerMixpanelIngest","startDate","start_date","startMixpanelProcessing","options","getMixpanelProcessStatus","cancelMixpanelProcessing","getTestDbUser","distinctId","distinct_id","getTestDbEvents","fetchMetaData","checkMetaJobStatus","reportRunId","getMetaJobResults","useFileUrl","use_file_url","analyzeCohortData","filters","_error$response","_error$response2","analyzeCohortDataV3","log","_error$response3","_error$response4","analyzeCohortDataV3Enhanced","_error$response5","_error$response6","analyzeCohortDataV3Refactored","_error$response7","_error$response8","getV3RefactoredHealth","_error$response9","_error$response0","getV3RefactoredVersion","_error$response1","_error$response10","runV3RefactoredStageAnalysis","stage","debugFilters","_objectSpread","debug_mode","debug_stage","pipeline_version","_error$response11","_error$response12","getV3Health","_error$response13","_error$response14","getV3Version","_error$response15","_error$response16","getCohortUserTimeline","optional_filters","primary_user_filter","secondary_filters","user_filters","filter","f","property_source","event_filters","payload","date_from","date_from_str","date_to","date_to_str","config","_error$response17","_error$response18","getUserEventRevenueTimeline","productId","_v3Data$stage_results","v3Payload","property_name","property_values","product_id","v3Data","stage3Data","stage_results","stage3","timeline_results","Error","timelineResults","legacyFormat","dates","event_rows","estimate_rows","arpc_per_product","available_users","Object","keys","user_daily_metrics","available_products","timeline_data","forEach","date","dayData","trial_started","trial_pending","trial_ended","trial_converted","trial_canceled","initial_purchase","subscription_active","subscription_cancelled","refund","trial_cancelled","refund_count","current_revenue","estimated_revenue","estimated_net_revenue","revenue","cumulative_initial_purchase","cumulativeInitialPurchase","err","getDiscoverableCohortProperties","_error$response19","_error$response20","getDiscoverableCohortPropertyValues","propertyKey","propertySource","property_key","_error$response21","_error$response22","triggerCohortPropertyDiscovery","_error$response23","_error$response24","enableCohortProperties","_error$response25","_error$response26","getPropertyDiscoveryStatus","_error$response27","_error$response28","getMixpanelDatabaseStats","getUserEvents","userId","user_id","startHistoricalCollection","getHistoricalJobStatus","jobId","cancelHistoricalJob","getDataCoverage","getMissingDates","deleteHistoricalConfiguration","configHash","delete","getHistoricalConfigurations","exportHistoricalData","getHistoricalDayData","getActionMappings","saveActionMappings","mappings"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for API requests - updated to use localhost:5001 consistently\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\n// Create an axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  // Increase timeout for large responses\n  timeout: 600000, // 10 minutes\n  // Set max content length to 500MB\n  maxContentLength: 500 * 1024 * 1024,\n  maxBodyLength: 500 * 1024 * 1024,\n});\n\n// Add response interceptor to handle large responses\napiClient.interceptors.response.use(\n  (response) => {\n    // Log response size for debugging\n    if (response.data) {\n      const responseSize = JSON.stringify(response.data).length;\n      if (responseSize > 10 * 1024 * 1024) { // 10MB+\n        console.warn(`Large API response: ${(responseSize / (1024 * 1024)).toFixed(2)} MB`);\n      }\n    }\n    return response;\n  },\n  (error) => {\n    // Enhanced error handling for memory issues\n    if (error.code === 'ERR_INSUFFICIENT_RESOURCES' || \n        error.message?.includes('out of memory') ||\n        error.message?.includes('Maximum call stack')) {\n      console.error('Response too large for browser to handle:', error);\n      error.message = 'Response is too large for your browser to handle. Please use debug mode or reduce the date range.';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const api = {\n  // Mixpanel Debug Endpoints\n  \n  /**\n   * Get raw Mixpanel data with filters\n   * @param {Object} params - Query parameters\n   * @returns {Promise<Object>} - Response data\n   */\n  getRawMixpanelData: async (params = {}) => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/data', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Mixpanel data:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get the last Mixpanel data load timestamp\n   * @returns {Promise<Object>} - Response with timestamp\n   */\n  getMixpanelDebugSyncTS: async () => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/debug/sync-ts');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Mixpanel sync timestamp:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Reset the last Mixpanel data load timestamp\n   * @returns {Promise<Object>} - Response with success message\n   */\n  resetMixpanelDebugSyncTS: async () => {\n    try {\n      const response = await apiClient.post('/api/mixpanel/debug/sync-ts/reset');\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting Mixpanel sync timestamp:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get the latest processed date to continue from\n   * @returns {Promise<Object>} - Response with latest processed date info\n   */\n  getLatestProcessedDate: async () => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/debug/latest-processed-date');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest processed date:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Reset all Mixpanel data in the database\n   * @returns {Promise<Object>} - Response with success message\n   */\n  resetMixpanelDatabase: async () => {\n    try {\n      const response = await apiClient.post('/api/mixpanel/debug/database/reset');\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting Mixpanel database:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Refresh Mixpanel data by clearing data directories\n   * @returns {Promise<Object>} - Response with success message\n   */\n  refreshMixpanelData: async () => {\n    try {\n      const response = await apiClient.post('/api/mixpanel/debug/data/refresh');\n      return response.data;\n    } catch (error) {\n      console.error('Error refreshing Mixpanel data:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Trigger Mixpanel data ingestion\n   * @param {string} startDate - Optional start date (YYYY-MM-DD)\n   * @returns {Promise<Object>} - Response with success message\n   */\n  triggerMixpanelIngest: async (startDate) => {\n    try {\n      const response = await apiClient.post('/api/mixpanel/ingest', null, {\n        params: startDate ? { start_date: startDate } : {}\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error triggering data ingest:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Start the Mixpanel data processing pipeline\n   * @param {Object} options - Processing options\n   * @param {string} options.start_date - Start date (YYYY-MM-DD)\n   * @param {boolean} options.wipe_folder - Whether to wipe the folder before processing\n   * @returns {Promise<Object>} - Response with success status\n   */\n  startMixpanelProcessing: async (options) => {\n    try {\n      const response = await apiClient.post('/api/mixpanel/process/start', options);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting Mixpanel processing:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get the current status of Mixpanel data processing\n   * @returns {Promise<Object>} - Response with processing status\n   */\n  getMixpanelProcessStatus: async () => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/process/status');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching process status:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Cancel the current Mixpanel data processing job\n   * @returns {Promise<Object>} - Response with success status\n   */\n  cancelMixpanelProcessing: async () => {\n    try {\n      const response = await apiClient.post('/api/mixpanel/process/cancel');\n      return response.data;\n    } catch (error) {\n      console.error('Error canceling processing:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get test DB user data\n   * @param {string} distinctId - Optional user distinct ID\n   * @returns {Promise<Object>} - Response with user data\n   */\n  getTestDbUser: async (distinctId) => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/debug/test-db-user', {\n        params: distinctId ? { distinct_id: distinctId } : {}\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching test DB user:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get test DB events data\n   * @param {string} distinctId - Optional user distinct ID\n   * @returns {Promise<Object>} - Response with events data\n   */\n  getTestDbEvents: async (distinctId) => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/debug/test-db-events', {\n        params: distinctId ? { distinct_id: distinctId } : {}\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching test DB events:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Fetch Meta API data\n   * @param {Object} params - Request parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {number} params.time_increment - Time increment in days\n   * @param {string} [params.fields] - Comma-separated list of fields to retrieve\n   * @returns {Promise<Object>} - Response with Meta API data\n   */\n  fetchMetaData: async (params) => {\n    try {\n      const response = await apiClient.post('/api/meta/fetch', params);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Meta API data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Check the status of an async Meta API job\n   * @param {string} reportRunId - The report run ID\n   * @returns {Promise<Object>} - Job status information\n   */\n  checkMetaJobStatus: async (reportRunId) => {\n    try {\n      const response = await apiClient.get(`/api/meta/job/${reportRunId}/status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error checking Meta job status:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get results from a completed async Meta API job\n   * @param {string} reportRunId - The report run ID\n   * @param {boolean} useFileUrl - Whether to use file URL download\n   * @returns {Promise<Object>} - Job results\n   */\n  getMetaJobResults: async (reportRunId, useFileUrl = false) => {\n    try {\n      const response = await apiClient.get(`/api/meta/job/${reportRunId}/results`, {\n        params: { use_file_url: useFileUrl }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting Meta job results:', error);\n      throw error;\n    }\n  },\n\n  // --- Cohort Analyzer API Methods ---\n  analyzeCohortData: async (filters) => {\n    try {\n      const response = await apiClient.post('/api/cohort-analysis', filters);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing cohort data:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  // --- Cohort Analyzer V3 API Methods ---\n  analyzeCohortDataV3: async (filters) => {\n    try {\n      console.log('[V3] Sending cohort analysis request to V3 API:', filters);\n      const response = await apiClient.post('/api/v3/cohort/analyze', filters);\n      console.log('[V3] Received response from V3 API:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing cohort data with V3 API:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  analyzeCohortDataV3Enhanced: async (filters) => {\n    try {\n      console.log('[V3] Sending enhanced cohort analysis request to V3 API:', filters);\n      const response = await apiClient.post('/api/v3/cohort/analyze-enhanced', filters);\n      console.log('[V3] Received enhanced response from V3 API:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing cohort data with V3 Enhanced API:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  // --- Cohort Analyzer V3 Refactored API Methods ---\n  analyzeCohortDataV3Refactored: async (filters) => {\n    try {\n      console.log('[V3-Refactored] Sending cohort analysis request to V3 Refactored API:', filters);\n      const response = await apiClient.post('/api/v3/cohort/analyze-refactored', filters);\n      console.log('[V3-Refactored] Received response from V3 Refactored API:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error analyzing cohort data with V3 Refactored API:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  getV3RefactoredHealth: async () => {\n    try {\n      const response = await apiClient.get('/api/v3/cohort/refactored-health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking V3 Refactored health:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  getV3RefactoredVersion: async () => {\n    try {\n      const response = await apiClient.get('/api/v3/cohort/refactored-version');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting V3 Refactored version:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  // V3 Refactored Debug Methods\n  runV3RefactoredStageAnalysis: async (filters, stage) => {\n    try {\n      console.log(`🚀🚀🚀 [V3-REFACTORED API] CALLING runV3RefactoredStageAnalysis for stage: ${stage}`);\n      console.log(`🚀🚀🚀 [V3-REFACTORED API] Will POST to: /api/v3/cohort/analyze-refactored`);\n      console.log(`🚀🚀🚀 [V3-REFACTORED API] Filters:`, filters);\n      \n      const debugFilters = {\n        ...filters,\n        debug_mode: true,\n        debug_stage: stage,\n        pipeline_version: '3.0.0_refactored'\n      };\n      \n      console.log(`🚀🚀🚀 [V3-REFACTORED API] Final payload:`, debugFilters);\n      \n      const response = await apiClient.post('/api/v3/cohort/analyze-refactored', debugFilters);\n      \n      console.log(`🚀🚀🚀 [V3-REFACTORED API] SUCCESS! Received response:`, response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`🚨🚨🚨 [V3-REFACTORED API] ERROR in stage ${stage} analysis:`, error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  getV3Health: async () => {\n    try {\n      const response = await apiClient.get('/api/v3/cohort/health');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking V3 health:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  getV3Version: async () => {\n    try {\n      const response = await apiClient.get('/api/v3/cohort/version');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting V3 version:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  getCohortUserTimeline: async (filters) => {\n    try {\n      console.log('[DEBUG] getCohortUserTimeline called with filters:', filters);\n      // Convert optional_filters to legacy format for the unified pipeline\n      const optional_filters = filters.optional_filters || [];\n      let primary_user_filter = {};\n      let secondary_filters = [];\n      \n      if (optional_filters.length > 0) {\n        // Convert optional_filters to legacy format\n        const user_filters = optional_filters.filter(f => f.property_source === 'user');\n        const event_filters = optional_filters.filter(f => f.property_source === 'event');\n        \n        // Use the first user filter as primary_user_filter\n        primary_user_filter = user_filters.length > 0 ? user_filters[0] : {};\n        \n        // Only event filters go to secondary_filters\n        secondary_filters = event_filters;\n      } else {\n        // Fall back to legacy format if provided\n        primary_user_filter = filters.primary_user_filter || {};\n        secondary_filters = filters.secondary_filters || [];\n      }\n      \n      const payload = {\n        date_from: filters.date_from_str,\n        date_to: filters.date_to_str,\n        primary_user_filter: primary_user_filter,\n        secondary_filters: secondary_filters,\n        config: {}\n      };\n      \n      console.log('[DEBUG] getCohortUserTimeline sending payload:', payload);\n      const response = await apiClient.post('/api/cohort-pipeline/timeline', payload);\n      console.log('[DEBUG] getCohortUserTimeline received response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cohort user timeline:', error.response?.data || error.message);\n      console.error('[DEBUG] getCohortUserTimeline full error:', error);\n      throw error.response?.data || error;\n    }\n  },\n\n  getUserEventRevenueTimeline: async (filters, distinctId = null, productId = null) => {\n    try {\n      console.log('[DEBUG] getUserEventRevenueTimeline called with filters:', filters, 'distinctId:', distinctId, 'productId:', productId);\n      \n      // CRITICAL FIX: Use V3 API instead of legacy API\n      // The legacy API has the business logic bug where trial conversions incorrectly set initial_purchase = 1\n      // The V3 API uses the correct EventStateTracker that properly handles business rules\n      \n      // Convert filters to V3 format\n      const v3Payload = {\n        date_from_str: filters.date_from_str,\n        date_to_str: filters.date_to_str,\n        // Convert optional_filters to V3 user_filters format\n        user_filters: []\n      };\n      \n      // Handle filter conversion\n      if (filters.optional_filters && filters.optional_filters.length > 0) {\n        // Use optional_filters (new format)\n        v3Payload.user_filters = filters.optional_filters.filter(f => f.property_source === 'user');\n      } else if (filters.primary_user_filter && filters.primary_user_filter.property_name) {\n        // Convert legacy primary_user_filter format\n        v3Payload.user_filters = [{\n          property_name: filters.primary_user_filter.property_name,\n          property_values: filters.primary_user_filter.property_values,\n          property_source: 'user'\n        }];\n      }\n      \n      // Add user/product filtering if specified\n      if (distinctId) v3Payload.distinct_id = distinctId;\n      if (productId) v3Payload.product_id = productId;\n      \n      console.log('[DEBUG] getUserEventRevenueTimeline sending V3 payload:', v3Payload);\n      \n      // Use V3 API endpoint that has correct business logic\n      const response = await apiClient.post('/api/v3/cohort/analyze-refactored', v3Payload);\n      console.log('[DEBUG] getUserEventRevenueTimeline received V3 response:', response.data);\n      \n      // Convert V3 response to legacy format for compatibility with existing frontend code\n      const v3Data = response.data;\n      const stage3Data = v3Data?.stage_results?.stage3;\n      \n      if (!stage3Data || !stage3Data.timeline_results) {\n        throw new Error('Invalid V3 response format');\n      }\n      \n      const timelineResults = stage3Data.timeline_results;\n      \n      // Convert V3 timeline data to legacy format\n      const legacyFormat = {\n        dates: timelineResults.dates || [],\n        event_rows: {},\n        estimate_rows: {},\n        arpc_per_product: timelineResults.arpc_per_product || {},\n        available_users: Object.keys(timelineResults.user_daily_metrics || {}),\n        available_products: timelineResults.available_products || []\n      };\n      \n      // Convert daily metrics to legacy event_rows format\n      if (timelineResults.timeline_data) {\n        legacyFormat.dates.forEach(date => {\n          const dayData = timelineResults.timeline_data[date] || {};\n          \n          // Map V3 field names to legacy field names\n          if (!legacyFormat.event_rows.trial_started) legacyFormat.event_rows.trial_started = {};\n          if (!legacyFormat.event_rows.trial_pending) legacyFormat.event_rows.trial_pending = {};\n          if (!legacyFormat.event_rows.trial_ended) legacyFormat.event_rows.trial_ended = {};\n          if (!legacyFormat.event_rows.trial_converted) legacyFormat.event_rows.trial_converted = {};\n          if (!legacyFormat.event_rows.trial_canceled) legacyFormat.event_rows.trial_canceled = {};\n          if (!legacyFormat.event_rows.initial_purchase) legacyFormat.event_rows.initial_purchase = {};\n          if (!legacyFormat.event_rows.subscription_active) legacyFormat.event_rows.subscription_active = {};\n          if (!legacyFormat.event_rows.subscription_cancelled) legacyFormat.event_rows.subscription_cancelled = {};\n          if (!legacyFormat.event_rows.refund) legacyFormat.event_rows.refund = {};\n          \n          legacyFormat.event_rows.trial_started[date] = dayData.trial_started || 0;\n          legacyFormat.event_rows.trial_pending[date] = dayData.trial_pending || 0;\n          legacyFormat.event_rows.trial_ended[date] = dayData.trial_ended || 0;\n          legacyFormat.event_rows.trial_converted[date] = dayData.trial_converted || 0;\n          legacyFormat.event_rows.trial_canceled[date] = dayData.trial_cancelled || 0; // Note: cancelled vs canceled\n          legacyFormat.event_rows.initial_purchase[date] = dayData.initial_purchase || 0; // CRITICAL: This will now be 0 for trial conversions\n          legacyFormat.event_rows.subscription_active[date] = dayData.subscription_active || 0;\n          legacyFormat.event_rows.subscription_cancelled[date] = dayData.subscription_cancelled || 0;\n          legacyFormat.event_rows.refund[date] = dayData.refund_count || 0;\n          \n          // Revenue data\n          if (!legacyFormat.estimate_rows.current_revenue) legacyFormat.estimate_rows.current_revenue = {};\n          if (!legacyFormat.estimate_rows.estimated_revenue) legacyFormat.estimate_rows.estimated_revenue = {};\n          if (!legacyFormat.estimate_rows.estimated_net_revenue) legacyFormat.estimate_rows.estimated_net_revenue = {};\n          \n          legacyFormat.estimate_rows.current_revenue[date] = dayData.revenue || 0;\n          legacyFormat.estimate_rows.estimated_revenue[date] = dayData.estimated_revenue || 0;\n          legacyFormat.estimate_rows.estimated_net_revenue[date] = dayData.estimated_revenue || 0;\n        });\n      }\n      \n      // Add cumulative data for legacy compatibility\n      legacyFormat.event_rows.cumulative_initial_purchase = {};\n      let cumulativeInitialPurchase = 0;\n      legacyFormat.dates.forEach(date => {\n        cumulativeInitialPurchase += legacyFormat.event_rows.initial_purchase[date] || 0;\n        legacyFormat.event_rows.cumulative_initial_purchase[date] = cumulativeInitialPurchase;\n      });\n      \n      console.log('[DEBUG] getUserEventRevenueTimeline converted to legacy format:', legacyFormat);\n      return legacyFormat;\n      \n    } catch (err) {\n      console.error('getUserEventRevenueTimeline error:', err);\n      throw err;\n    }\n  },\n\n  getDiscoverableCohortProperties: async () => {\n    try {\n      const response = await apiClient.get('/api/cohort_analyzer/discoverable_properties');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching discoverable cohort properties:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  getDiscoverableCohortPropertyValues: async (propertyKey, propertySource) => {\n    try {\n      const response = await apiClient.get('/api/cohort_analyzer/property_values', {\n        params: { property_key: propertyKey, property_source: propertySource }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching values for ${propertyKey} (${propertySource}):`, error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  triggerCohortPropertyDiscovery: async () => {\n    try {\n      const response = await apiClient.post('/api/cohort_analyzer/trigger_discovery');\n      return response.data;\n    } catch (error) {\n      console.error('Error triggering cohort property discovery:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n  \n  enableCohortProperties: async () => {\n    try {\n      const response = await apiClient.post('/api/cohort_analyzer/enable_properties');\n      return response.data;\n    } catch (error) {\n      console.error('Error enabling cohort properties:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n  \n  getPropertyDiscoveryStatus: async () => {\n    try {\n      const response = await apiClient.get('/api/cohort_analyzer/discovery_status');\n      return response.data;\n    } catch (error) {\n      console.error('Error checking property discovery status:', error.response?.data || error.message);\n      throw error.response?.data || error;\n    }\n  },\n\n  // --- Mixpanel Debug API Methods ---\n  getMixpanelDatabaseStats: async () => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/debug/database-stats');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching Mixpanel database statistics:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get events for a specific user\n   * @param {string} userId - User ID or distinct ID\n   * @returns {Promise<Array>} - Response with user events\n   */\n  getUserEvents: async (userId) => {\n    try {\n      const response = await apiClient.get('/api/mixpanel/debug/user-events', {\n        params: { user_id: userId }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user events:', error);\n      throw error;\n    }\n  },\n\n  // --- Meta Historical Data API Methods ---\n  \n  /**\n   * Start a historical data collection job\n   * @param {Object} params - Collection parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @returns {Promise<Object>} - Response with job ID\n   */\n  startHistoricalCollection: async (params) => {\n    try {\n      const response = await apiClient.post('/api/meta/historical/start', params);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting historical collection:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get status of a historical collection job\n   * @param {string} jobId - Job ID\n   * @returns {Promise<Object>} - Job status information\n   */\n  getHistoricalJobStatus: async (jobId) => {\n    try {\n      const response = await apiClient.get(`/api/meta/historical/jobs/${jobId}/status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting job status:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Cancel a historical collection job\n   * @param {string} jobId - Job ID\n   * @returns {Promise<Object>} - Cancellation confirmation\n   */\n  cancelHistoricalJob: async (jobId) => {\n    try {\n      const response = await apiClient.post(`/api/meta/historical/jobs/${jobId}/cancel`);\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling job:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get data coverage summary for a configuration\n   * @param {Object} params - Configuration parameters\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @param {string} [params.start_date] - Optional start date filter\n   * @param {string} [params.end_date] - Optional end date filter\n   * @returns {Promise<Object>} - Coverage summary\n   */\n  getDataCoverage: async (params) => {\n    try {\n      const response = await apiClient.get('/api/meta/historical/coverage', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting data coverage:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get list of missing dates for a configuration\n   * @param {Object} params - Configuration parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @returns {Promise<Object>} - Missing dates information\n   */\n  getMissingDates: async (params) => {\n    try {\n      const response = await apiClient.get('/api/meta/historical/missing-dates', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting missing dates:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete all data for a specific historical configuration\n   * @param {string} configHash - Configuration hash to delete\n   * @returns {Promise<Object>} - Deletion confirmation\n   */\n  deleteHistoricalConfiguration: async (configHash) => {\n    try {\n      const response = await apiClient.delete(`/api/meta/historical/configurations/${configHash}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting historical configuration:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get all stored request configurations\n   * @returns {Promise<Array>} - List of configurations\n   */\n  getHistoricalConfigurations: async () => {\n    try {\n      const response = await apiClient.get('/api/meta/historical/configurations');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting configurations:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Export stored data for a configuration and date range\n   * @param {Object} params - Export parameters\n   * @param {string} params.start_date - Start date (YYYY-MM-DD)\n   * @param {string} params.end_date - End date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @param {string} [params.format] - Export format (default: 'json')\n   * @returns {Promise<Object>} - Exported data\n   */\n  exportHistoricalData: async (params) => {\n    try {\n      const response = await apiClient.get('/api/meta/historical/export', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get stored data for a specific day and configuration\n   * @param {Object} params - Day data parameters\n   * @param {string} params.date - Date (YYYY-MM-DD)\n   * @param {string} params.fields - Comma-separated list of fields\n   * @param {string} [params.breakdowns] - Comma-separated list of breakdowns\n   * @param {Object} [params.filtering] - Filtering configuration\n   * @returns {Promise<Object>} - Day data\n   */\n  getHistoricalDayData: async (params) => {\n    try {\n      const response = await apiClient.post('/api/meta/historical/get-day-data', params);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting day data:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get current action mappings\n   * @returns {Promise<Object>} - Action mappings\n   */\n  getActionMappings: async () => {\n    try {\n      const response = await apiClient.get('/api/meta/action-mappings');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting action mappings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Save action mappings\n   * @param {Object} mappings - Action mappings to save\n   * @returns {Promise<Object>} - Save confirmation\n   */\n  saveActionMappings: async (mappings) => {\n    try {\n      const response = await apiClient.post('/api/meta/action-mappings', { mappings });\n      return response.data;\n    } catch (error) {\n      console.error('Error saving action mappings:', error);\n      throw error;\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}