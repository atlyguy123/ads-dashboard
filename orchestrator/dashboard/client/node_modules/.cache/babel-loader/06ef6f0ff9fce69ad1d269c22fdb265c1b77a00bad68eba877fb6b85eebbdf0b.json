{"ast":null,"code":"var _jsxFileName = \"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/HistoricalDataManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { api } from '../../services/api';\nimport DataCoverageDisplay from './DataCoverageDisplay';\nimport JobManager from './JobManager';\nimport HistoricalDataViewer from './HistoricalDataViewer';\nimport { getSelectedFieldsString, getSelectedBreakdownsString, validateMetaBreakdownCombo, isBreakdownDisabled, getDisabledTooltip } from './utils/metaApiUtils';\nimport { FIELD_CATEGORIES, BREAKDOWN_CATEGORIES, ACTION_TYPE_ALLOWED_BREAKDOWNS } from './utils/metaConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HistoricalDataManager = ({\n  startDateInput,\n  setStartDateInput,\n  endDateInput,\n  setEndDateInput,\n  selectedFields,\n  setSelectedFields,\n  selectedBreakdowns,\n  setSelectedBreakdowns,\n  error,\n  setError\n}) => {\n  _s();\n  // Historical data state\n  const [activeJobs, setActiveJobs] = useState([]);\n  const [configurations, setConfigurations] = useState([]);\n  const [dataCoverage, setDataCoverage] = useState(null);\n  const [missingDates, setMissingDates] = useState([]);\n  const [showDataViewer, setShowDataViewer] = useState(false);\n  const [selectedConfig, setSelectedConfig] = useState(null);\n  const [exportData, setExportData] = useState(null);\n\n  // Field/breakdown selection UI state\n  const [showFieldSelector, setShowFieldSelector] = useState(true);\n  const [showBreakdownSelector, setShowBreakdownSelector] = useState(false);\n\n  // Ref for job polling interval - THIS FIXES THE ESLINT ERROR\n  const jobPollingRef = useRef(null);\n\n  // useEffect for polling job status\n  useEffect(() => {\n    const hasRunningJobs = activeJobs.some(job => job.status === 'running' || job.status === 'starting');\n    if (hasRunningJobs) {\n      jobPollingRef.current = setInterval(() => {\n        pollActiveJobs();\n      }, 2000); // Poll every 2 seconds\n    } else {\n      if (jobPollingRef.current) {\n        clearInterval(jobPollingRef.current);\n      }\n    }\n    return () => {\n      if (jobPollingRef.current) {\n        clearInterval(jobPollingRef.current);\n      }\n    };\n  }, [activeJobs]);\n\n  // Load configurations when component mounts\n  useEffect(() => {\n    loadConfigurations();\n    updateDataCoverage();\n  }, [selectedFields, selectedBreakdowns]);\n\n  // Clear stale jobs on component mount\n  useEffect(() => {\n    setActiveJobs([]);\n    // Clean up any old completed jobs periodically\n    const cleanupInterval = setInterval(() => {\n      setActiveJobs(prev => prev.filter(job => {\n        // Keep running jobs and recently completed jobs (last 5 minutes)\n        if (job.status === 'running' || job.status === 'starting') {\n          return true;\n        }\n\n        // For completed jobs, check if they're recent\n        if (job.end_time) {\n          const endTime = new Date(job.end_time);\n          const now = new Date();\n          const timeDiff = now - endTime;\n          return timeDiff < 5 * 60 * 1000; // Keep for 5 minutes\n        }\n\n        // Keep jobs without end_time for now (they might still be processing)\n        return true;\n      }));\n    }, 60000); // Check every minute\n\n    return () => clearInterval(cleanupInterval);\n  }, []);\n\n  // Functions for historical data management\n  const loadConfigurations = async () => {\n    try {\n      const configs = await api.getHistoricalConfigurations();\n      setConfigurations(configs);\n    } catch (error) {\n      console.error('Error loading configurations:', error);\n    }\n  };\n  const updateDataCoverage = async () => {\n    const fieldsString = getSelectedFieldsString(selectedFields);\n    const breakdownsString = getSelectedBreakdownsString(selectedBreakdowns);\n    if (!fieldsString) return;\n    try {\n      const coverage = await api.getDataCoverage({\n        fields: fieldsString,\n        breakdowns: breakdownsString,\n        start_date: startDateInput || undefined,\n        end_date: endDateInput || undefined\n      });\n      setDataCoverage(coverage);\n      if (startDateInput && endDateInput) {\n        const missing = await api.getMissingDates({\n          start_date: startDateInput,\n          end_date: endDateInput,\n          fields: fieldsString,\n          breakdowns: breakdownsString\n        });\n        setMissingDates(missing.missing_dates || []);\n      }\n    } catch (error) {\n      console.error('Error updating data coverage:', error);\n    }\n  };\n  const startHistoricalCollection = async () => {\n    if (!startDateInput || !endDateInput) {\n      setError('Start date and end date are required for historical collection');\n      return;\n    }\n    const fieldsString = getSelectedFieldsString(selectedFields);\n    if (!fieldsString) {\n      setError('At least one field must be selected');\n      return;\n    }\n\n    // Validate field/breakdown combination\n    const validation = validateMetaBreakdownCombo(selectedFields, selectedBreakdowns);\n    if (!validation.valid) {\n      setError(validation.errors[0]);\n      return;\n    }\n    try {\n      const params = {\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: fieldsString,\n        breakdowns: getSelectedBreakdownsString(selectedBreakdowns) || undefined\n      };\n      const result = await api.startHistoricalCollection(params);\n\n      // Add to active jobs\n      const newJob = {\n        job_id: result.job_id,\n        status: 'running',\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: fieldsString,\n        breakdowns: getSelectedBreakdownsString(selectedBreakdowns) || '',\n        progress_percentage: 0\n      };\n      setActiveJobs(prev => [...prev, newJob]);\n      setError(null);\n\n      // Update data coverage\n      updateDataCoverage();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Failed to start historical collection');\n    }\n  };\n  const pollActiveJobs = async () => {\n    const runningJobs = activeJobs.filter(job => job.status === 'running' || job.status === 'starting');\n    if (runningJobs.length === 0) {\n      return; // No jobs to poll, but keep completed jobs in the list for display\n    }\n    const updatedJobs = await Promise.all(runningJobs.map(async job => {\n      try {\n        const status = await api.getHistoricalJobStatus(job.job_id);\n        return {\n          ...job,\n          ...status\n        };\n      } catch (error) {\n        var _error$response2;\n        console.error(`Error polling job ${job.job_id}:`, error);\n\n        // If job not found (404), it might have completed successfully\n        // Check if data was actually collected by refreshing coverage\n        if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n          console.log(`Job ${job.job_id} not found in active tracking, checking if data was collected...`);\n\n          // Update data coverage to see if data actually exists\n          updateDataCoverage();\n\n          // Mark job as potentially completed\n          return {\n            ...job,\n            status: 'completed_unknown',\n            message: 'Job completed but status unavailable. Check data coverage for results.'\n          };\n        }\n\n        // For other errors, keep the job as-is for now\n        return job;\n      }\n    }));\n    setActiveJobs(prev => {\n      const nonRunningJobs = prev.filter(job => !runningJobs.find(rj => rj.job_id === job.job_id));\n      return [...nonRunningJobs, ...updatedJobs];\n    });\n\n    // Update data coverage if any jobs completed or had status issues\n    if (updatedJobs.some(job => job.status === 'completed' || job.status === 'completed_with_errors' || job.status === 'completed_unknown')) {\n      updateDataCoverage();\n    }\n  };\n  const cancelJob = async jobId => {\n    try {\n      await api.cancelHistoricalJob(jobId);\n      setActiveJobs(prev => prev.map(job => job.job_id === jobId ? {\n        ...job,\n        status: 'cancelled'\n      } : job));\n    } catch (error) {\n      console.error('Error cancelling job:', error);\n    }\n  };\n  const exportSelectedData = async () => {\n    if (!selectedConfig) return;\n    try {\n      const exported = await api.exportHistoricalData({\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: selectedConfig.fields,\n        breakdowns: selectedConfig.breakdowns\n      });\n      setExportData(exported);\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      setError('Failed to export data');\n    }\n  };\n\n  // Field and breakdown selection functions\n  const toggleField = fieldId => {\n    setSelectedFields(prev => ({\n      ...prev,\n      [fieldId]: !prev[fieldId]\n    }));\n  };\n  const toggleBreakdown = breakdownId => {\n    if (isBreakdownDisabled(breakdownId, selectedFields, selectedBreakdowns)) {\n      return; // Don't toggle if disabled\n    }\n    setSelectedBreakdowns(prev => ({\n      ...prev,\n      [breakdownId]: !prev[breakdownId]\n    }));\n  };\n  const selectAllInCategory = categoryFields => {\n    const newSelectedFields = {\n      ...selectedFields\n    };\n    categoryFields.forEach(field => {\n      newSelectedFields[field.id] = true;\n    });\n    setSelectedFields(newSelectedFields);\n  };\n  const deselectAllInCategory = categoryFields => {\n    const newSelectedFields = {\n      ...selectedFields\n    };\n    categoryFields.forEach(field => {\n      newSelectedFields[field.id] = false;\n    });\n    setSelectedFields(newSelectedFields);\n  };\n  const selectAllBreakdownsInCategory = categoryBreakdowns => {\n    const allEnabled = categoryBreakdowns.every(breakdown => !isBreakdownDisabled(breakdown.id, selectedFields, selectedBreakdowns));\n    if (!allEnabled) {\n      return; // Don't select all if any are disabled\n    }\n    const newSelectedBreakdowns = {\n      ...selectedBreakdowns\n    };\n    categoryBreakdowns.forEach(breakdown => {\n      newSelectedBreakdowns[breakdown.id] = true;\n    });\n    setSelectedBreakdowns(newSelectedBreakdowns);\n  };\n  const deselectAllBreakdownsInCategory = categoryBreakdowns => {\n    const newSelectedBreakdowns = {\n      ...selectedBreakdowns\n    };\n    categoryBreakdowns.forEach(breakdown => {\n      newSelectedBreakdowns[breakdown.id] = false;\n    });\n    setSelectedBreakdowns(newSelectedBreakdowns);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(HistoricalDataViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataCoverageDisplay, {\n      dataCoverage: dataCoverage,\n      missingDates: missingDates,\n      configurations: configurations\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JobManager, {\n      activeJobs: activeJobs,\n      cancelJob: cancelJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Configure Historical Collection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium mb-3\",\n          children: \"Date Range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium mb-1\",\n              children: [\"Start Date (YYYY-MM-DD)\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-red-500\",\n                children: \" *\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 40\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: startDateInput,\n              onChange: e => setStartDateInput(e.target.value),\n              className: \"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\",\n              placeholder: \"e.g., 2023-05-01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium mb-1\",\n              children: [\"End Date (YYYY-MM-DD)\", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-red-500\",\n                children: \" *\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: endDateInput,\n              onChange: e => setEndDateInput(e.target.value),\n              className: \"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\",\n              placeholder: \"e.g., 2023-05-31\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium\",\n            children: [\"Select Fields for Collection\", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-red-500\",\n              children: \" *\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 43\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-500\",\n              children: [Object.values(selectedFields).filter(Boolean).length, \" fields selected\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setShowFieldSelector(!showFieldSelector),\n              className: \"text-blue-600 hover:text-blue-800 text-sm\",\n              children: [showFieldSelector ? 'Hide' : 'Show', \" Fields\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), showFieldSelector && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border rounded p-4 bg-gray-50 dark:bg-gray-700\",\n          children: FIELD_CATEGORIES.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"text-sm font-semibold text-gray-700 dark:text-gray-300\",\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-x-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => selectAllInCategory(category.fields),\n                  className: \"text-xs text-blue-600 hover:text-blue-800\",\n                  children: \"Select All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => deselectAllInCategory(category.fields),\n                  className: \"text-xs text-red-600 hover:text-red-800\",\n                  children: \"Clear\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-wrap gap-2\",\n              children: category.fields.map(field => {\n                const isAction = field.isActionMetric;\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => toggleField(field.id),\n                  className: `px-3 py-1 rounded-full text-sm ${selectedFields[field.id] ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300'}`,\n                  children: [field.label, /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"ml-1 text-xs\",\n                    children: isAction && '⚡'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 442,\n                    columnNumber: 27\n                  }, this)]\n                }, field.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium\",\n            children: \"Select Breakdowns (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-gray-500\",\n              children: [Object.values(selectedBreakdowns).filter(Boolean).length, \" breakdowns selected\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setShowBreakdownSelector(!showBreakdownSelector),\n              className: \"text-blue-600 hover:text-blue-800 text-sm\",\n              children: [showBreakdownSelector ? 'Hide' : 'Show', \" Breakdowns\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this), showBreakdownSelector && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border rounded p-4 bg-gray-50 dark:bg-gray-700\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs bg-yellow-100 dark:bg-yellow-900 p-2 rounded mb-3 text-yellow-800 dark:text-yellow-300\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Historical Collection Rules:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"mt-1 ml-2 list-disc pl-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Maximum 2 breakdowns allowed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"With \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"\\u26A1 action metrics\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 28\n                }, this), \", only \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \"conversion_destination\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 68\n                }, this), \" breakdown is allowed\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Historical jobs will collect data for ALL days in the date range with the selected configuration\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this), BREAKDOWN_CATEGORIES.map((category, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"text-sm font-semibold text-gray-700 dark:text-gray-300\",\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-x-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => selectAllBreakdownsInCategory(category.breakdowns),\n                  className: \"text-xs text-blue-600 hover:text-blue-800\",\n                  disabled: category.breakdowns.some(b => isBreakdownDisabled(b.id, selectedFields, selectedBreakdowns)),\n                  children: \"Select All\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 487,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => deselectAllBreakdownsInCategory(category.breakdowns),\n                  className: \"text-xs text-red-600 hover:text-red-800\",\n                  children: \"Clear\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-wrap gap-2\",\n              children: category.breakdowns.map(breakdown => {\n                const isDisabled = isBreakdownDisabled(breakdown.id, selectedFields, selectedBreakdowns);\n                const disabledTooltip = isDisabled ? getDisabledTooltip(breakdown.id, selectedFields, selectedBreakdowns) : '';\n                const isActionCompatible = ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdown.id);\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  type: \"button\",\n                  onClick: () => toggleBreakdown(breakdown.id),\n                  className: `px-3 py-1 rounded-full text-sm ${selectedBreakdowns[breakdown.id] ? 'bg-green-500 text-white' : isDisabled ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed' : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-300'}`,\n                  disabled: isDisabled,\n                  title: disabledTooltip,\n                  children: [breakdown.label, isActionCompatible && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"ml-1 text-xs\",\n                    title: \"Compatible with action metrics\",\n                    children: \"\\u2605\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 527,\n                    columnNumber: 29\n                  }, this)]\n                }, breakdown.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 511,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), startDateInput && endDateInput && Object.values(selectedFields).some(Boolean) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-6 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-medium text-blue-800 dark:text-blue-200 mb-2\",\n          children: \"Collection Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-blue-700 dark:text-blue-300 space-y-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date Range:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 20\n            }, this), \" \", startDateInput, \" to \", endDateInput]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Fields:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 20\n            }, this), \" \", getSelectedFieldsString(selectedFields)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 15\n          }, this), getSelectedBreakdownsString(selectedBreakdowns) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Breakdowns:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 22\n            }, this), \" \", getSelectedBreakdownsString(selectedBreakdowns)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 17\n          }, this), missingDates.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-orange-700 dark:text-orange-300\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [missingDates.length, \" days\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 19\n            }, this), \" need to be collected\", missingDates.length <= 5 && ` (${missingDates.join(', ')})`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startHistoricalCollection,\n        disabled: !startDateInput || !endDateInput || !Object.values(selectedFields).some(Boolean),\n        className: \"px-6 py-3 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-400\",\n        children: \"Start Historical Collection Job\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), exportData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Exported Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-100 dark:bg-gray-900 p-4 rounded overflow-auto max-h-96\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"text-xs\",\n          children: JSON.stringify(exportData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n_s(HistoricalDataManager, \"nf5poFZameo5U6mMMBpKZtg9q6A=\");\n_c = HistoricalDataManager;\nexport default HistoricalDataManager;\nvar _c;\n$RefreshReg$(_c, \"HistoricalDataManager\");","map":{"version":3,"names":["React","useState","useEffect","useRef","api","DataCoverageDisplay","JobManager","HistoricalDataViewer","getSelectedFieldsString","getSelectedBreakdownsString","validateMetaBreakdownCombo","isBreakdownDisabled","getDisabledTooltip","FIELD_CATEGORIES","BREAKDOWN_CATEGORIES","ACTION_TYPE_ALLOWED_BREAKDOWNS","jsxDEV","_jsxDEV","HistoricalDataManager","startDateInput","setStartDateInput","endDateInput","setEndDateInput","selectedFields","setSelectedFields","selectedBreakdowns","setSelectedBreakdowns","error","setError","_s","activeJobs","setActiveJobs","configurations","setConfigurations","dataCoverage","setDataCoverage","missingDates","setMissingDates","showDataViewer","setShowDataViewer","selectedConfig","setSelectedConfig","exportData","setExportData","showFieldSelector","setShowFieldSelector","showBreakdownSelector","setShowBreakdownSelector","jobPollingRef","hasRunningJobs","some","job","status","current","setInterval","pollActiveJobs","clearInterval","loadConfigurations","updateDataCoverage","cleanupInterval","prev","filter","end_time","endTime","Date","now","timeDiff","configs","getHistoricalConfigurations","console","fieldsString","breakdownsString","coverage","getDataCoverage","fields","breakdowns","start_date","undefined","end_date","missing","getMissingDates","missing_dates","startHistoricalCollection","validation","valid","errors","params","result","newJob","job_id","progress_percentage","_error$response","_error$response$data","response","data","message","runningJobs","length","updatedJobs","Promise","all","map","getHistoricalJobStatus","_error$response2","log","nonRunningJobs","find","rj","cancelJob","jobId","cancelHistoricalJob","exportSelectedData","exported","exportHistoricalData","toggleField","fieldId","toggleBreakdown","breakdownId","selectAllInCategory","categoryFields","newSelectedFields","forEach","field","id","deselectAllInCategory","selectAllBreakdownsInCategory","categoryBreakdowns","allEnabled","every","breakdown","newSelectedBreakdowns","deselectAllBreakdownsInCategory","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","Object","values","Boolean","onClick","category","index","name","isAction","isActionMetric","label","disabled","b","isDisabled","disabledTooltip","isActionCompatible","includes","title","join","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/HistoricalDataManager.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { api } from '../../services/api';\nimport DataCoverageDisplay from './DataCoverageDisplay';\nimport JobManager from './JobManager';\nimport HistoricalDataViewer from './HistoricalDataViewer';\nimport { getSelectedFieldsString, getSelectedBreakdownsString, validateMetaBreakdownCombo, isBreakdownDisabled, getDisabledTooltip } from './utils/metaApiUtils';\nimport { FIELD_CATEGORIES, BREAKDOWN_CATEGORIES, ACTION_TYPE_ALLOWED_BREAKDOWNS } from './utils/metaConstants';\n\nconst HistoricalDataManager = ({\n  startDateInput,\n  setStartDateInput,\n  endDateInput,\n  setEndDateInput,\n  selectedFields,\n  setSelectedFields,\n  selectedBreakdowns,\n  setSelectedBreakdowns,\n  error,\n  setError\n}) => {\n  // Historical data state\n  const [activeJobs, setActiveJobs] = useState([]);\n  const [configurations, setConfigurations] = useState([]);\n  const [dataCoverage, setDataCoverage] = useState(null);\n  const [missingDates, setMissingDates] = useState([]);\n  const [showDataViewer, setShowDataViewer] = useState(false);\n  const [selectedConfig, setSelectedConfig] = useState(null);\n  const [exportData, setExportData] = useState(null);\n  \n  // Field/breakdown selection UI state\n  const [showFieldSelector, setShowFieldSelector] = useState(true);\n  const [showBreakdownSelector, setShowBreakdownSelector] = useState(false);\n  \n  // Ref for job polling interval - THIS FIXES THE ESLINT ERROR\n  const jobPollingRef = useRef(null);\n\n  // useEffect for polling job status\n  useEffect(() => {\n    const hasRunningJobs = activeJobs.some(job => \n      job.status === 'running' || job.status === 'starting'\n    );\n    \n    if (hasRunningJobs) {\n      jobPollingRef.current = setInterval(() => {\n        pollActiveJobs();\n      }, 2000); // Poll every 2 seconds\n    } else {\n      if (jobPollingRef.current) {\n        clearInterval(jobPollingRef.current);\n      }\n    }\n\n    return () => {\n      if (jobPollingRef.current) {\n        clearInterval(jobPollingRef.current);\n      }\n    };\n  }, [activeJobs]);\n\n  // Load configurations when component mounts\n  useEffect(() => {\n    loadConfigurations();\n    updateDataCoverage();\n  }, [selectedFields, selectedBreakdowns]);\n\n  // Clear stale jobs on component mount\n  useEffect(() => {\n    setActiveJobs([]);\n    // Clean up any old completed jobs periodically\n    const cleanupInterval = setInterval(() => {\n      setActiveJobs(prev => prev.filter(job => {\n        // Keep running jobs and recently completed jobs (last 5 minutes)\n        if (job.status === 'running' || job.status === 'starting') {\n          return true;\n        }\n        \n        // For completed jobs, check if they're recent\n        if (job.end_time) {\n          const endTime = new Date(job.end_time);\n          const now = new Date();\n          const timeDiff = now - endTime;\n          return timeDiff < 5 * 60 * 1000; // Keep for 5 minutes\n        }\n        \n        // Keep jobs without end_time for now (they might still be processing)\n        return true;\n      }));\n    }, 60000); // Check every minute\n    \n    return () => clearInterval(cleanupInterval);\n  }, []);\n\n  // Functions for historical data management\n  const loadConfigurations = async () => {\n    try {\n      const configs = await api.getHistoricalConfigurations();\n      setConfigurations(configs);\n    } catch (error) {\n      console.error('Error loading configurations:', error);\n    }\n  };\n\n  const updateDataCoverage = async () => {\n    const fieldsString = getSelectedFieldsString(selectedFields);\n    const breakdownsString = getSelectedBreakdownsString(selectedBreakdowns);\n    \n    if (!fieldsString) return;\n\n    try {\n      const coverage = await api.getDataCoverage({\n        fields: fieldsString,\n        breakdowns: breakdownsString,\n        start_date: startDateInput || undefined,\n        end_date: endDateInput || undefined\n      });\n      setDataCoverage(coverage);\n\n      if (startDateInput && endDateInput) {\n        const missing = await api.getMissingDates({\n          start_date: startDateInput,\n          end_date: endDateInput,\n          fields: fieldsString,\n          breakdowns: breakdownsString\n        });\n        setMissingDates(missing.missing_dates || []);\n      }\n    } catch (error) {\n      console.error('Error updating data coverage:', error);\n    }\n  };\n\n  const startHistoricalCollection = async () => {\n    if (!startDateInput || !endDateInput) {\n      setError('Start date and end date are required for historical collection');\n      return;\n    }\n\n    const fieldsString = getSelectedFieldsString(selectedFields);\n    if (!fieldsString) {\n      setError('At least one field must be selected');\n      return;\n    }\n\n    // Validate field/breakdown combination\n    const validation = validateMetaBreakdownCombo(selectedFields, selectedBreakdowns);\n    if (!validation.valid) {\n      setError(validation.errors[0]);\n      return;\n    }\n\n    try {\n      const params = {\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: fieldsString,\n        breakdowns: getSelectedBreakdownsString(selectedBreakdowns) || undefined\n      };\n\n      const result = await api.startHistoricalCollection(params);\n      \n      // Add to active jobs\n      const newJob = {\n        job_id: result.job_id,\n        status: 'running',\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: fieldsString,\n        breakdowns: getSelectedBreakdownsString(selectedBreakdowns) || '',\n        progress_percentage: 0\n      };\n      \n      setActiveJobs(prev => [...prev, newJob]);\n      setError(null);\n      \n      // Update data coverage\n      updateDataCoverage();\n      \n    } catch (error) {\n      setError(error.response?.data?.error || error.message || 'Failed to start historical collection');\n    }\n  };\n\n  const pollActiveJobs = async () => {\n    const runningJobs = activeJobs.filter(job => \n      job.status === 'running' || job.status === 'starting'\n    );\n\n    if (runningJobs.length === 0) {\n      return; // No jobs to poll, but keep completed jobs in the list for display\n    }\n\n    const updatedJobs = await Promise.all(\n      runningJobs.map(async (job) => {\n        try {\n          const status = await api.getHistoricalJobStatus(job.job_id);\n          return { ...job, ...status };\n        } catch (error) {\n          console.error(`Error polling job ${job.job_id}:`, error);\n          \n          // If job not found (404), it might have completed successfully\n          // Check if data was actually collected by refreshing coverage\n          if (error.response?.status === 404) {\n            console.log(`Job ${job.job_id} not found in active tracking, checking if data was collected...`);\n            \n            // Update data coverage to see if data actually exists\n            updateDataCoverage();\n            \n            // Mark job as potentially completed\n            return { \n              ...job, \n              status: 'completed_unknown',\n              message: 'Job completed but status unavailable. Check data coverage for results.'\n            };\n          }\n          \n          // For other errors, keep the job as-is for now\n          return job;\n        }\n      })\n    );\n\n    setActiveJobs(prev => {\n      const nonRunningJobs = prev.filter(job => \n        !runningJobs.find(rj => rj.job_id === job.job_id)\n      );\n      return [...nonRunningJobs, ...updatedJobs];\n    });\n\n    // Update data coverage if any jobs completed or had status issues\n    if (updatedJobs.some(job => \n      job.status === 'completed' || \n      job.status === 'completed_with_errors' ||\n      job.status === 'completed_unknown'\n    )) {\n      updateDataCoverage();\n    }\n  };\n\n  const cancelJob = async (jobId) => {\n    try {\n      await api.cancelHistoricalJob(jobId);\n      setActiveJobs(prev => \n        prev.map(job => \n          job.job_id === jobId \n            ? { ...job, status: 'cancelled' }\n            : job\n        )\n      );\n    } catch (error) {\n      console.error('Error cancelling job:', error);\n    }\n  };\n\n  const exportSelectedData = async () => {\n    if (!selectedConfig) return;\n\n    try {\n      const exported = await api.exportHistoricalData({\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: selectedConfig.fields,\n        breakdowns: selectedConfig.breakdowns\n      });\n      \n      setExportData(exported);\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      setError('Failed to export data');\n    }\n  };\n\n  // Field and breakdown selection functions\n  const toggleField = (fieldId) => {\n    setSelectedFields(prev => ({\n      ...prev,\n      [fieldId]: !prev[fieldId]\n    }));\n  };\n  \n  const toggleBreakdown = (breakdownId) => {\n    if (isBreakdownDisabled(breakdownId, selectedFields, selectedBreakdowns)) {\n      return; // Don't toggle if disabled\n    }\n    \n    setSelectedBreakdowns(prev => ({\n      ...prev,\n      [breakdownId]: !prev[breakdownId]\n    }));\n  };\n\n  const selectAllInCategory = (categoryFields) => {\n    const newSelectedFields = { ...selectedFields };\n    categoryFields.forEach(field => {\n      newSelectedFields[field.id] = true;\n    });\n    setSelectedFields(newSelectedFields);\n  };\n  \n  const deselectAllInCategory = (categoryFields) => {\n    const newSelectedFields = { ...selectedFields };\n    categoryFields.forEach(field => {\n      newSelectedFields[field.id] = false;\n    });\n    setSelectedFields(newSelectedFields);\n  };\n\n  const selectAllBreakdownsInCategory = (categoryBreakdowns) => {\n    const allEnabled = categoryBreakdowns.every(breakdown => \n      !isBreakdownDisabled(breakdown.id, selectedFields, selectedBreakdowns)\n    );\n    \n    if (!allEnabled) {\n      return; // Don't select all if any are disabled\n    }\n    \n    const newSelectedBreakdowns = { ...selectedBreakdowns };\n    categoryBreakdowns.forEach(breakdown => {\n      newSelectedBreakdowns[breakdown.id] = true;\n    });\n    setSelectedBreakdowns(newSelectedBreakdowns);\n  };\n  \n  const deselectAllBreakdownsInCategory = (categoryBreakdowns) => {\n    const newSelectedBreakdowns = { ...selectedBreakdowns };\n    categoryBreakdowns.forEach(breakdown => {\n      newSelectedBreakdowns[breakdown.id] = false;\n    });\n    setSelectedBreakdowns(newSelectedBreakdowns);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Historical Data Viewer - Auto-loads all existing data */}\n      <HistoricalDataViewer />\n\n      {/* Data Coverage Summary */}\n      <DataCoverageDisplay \n        dataCoverage={dataCoverage}\n        missingDates={missingDates}\n        configurations={configurations}\n      />\n\n      {/* Active Jobs */}\n      <JobManager \n        activeJobs={activeJobs}\n        cancelJob={cancelJob}\n      />\n\n      {/* Historical Collection Configuration */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Configure Historical Collection</h2>\n        \n        {/* Date Range */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-3\">Date Range</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Start Date (YYYY-MM-DD)<span className=\"text-red-500\"> *</span>\n              </label>\n              <input\n                type=\"text\"\n                value={startDateInput}\n                onChange={(e) => setStartDateInput(e.target.value)}\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n                placeholder=\"e.g., 2023-05-01\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                End Date (YYYY-MM-DD)<span className=\"text-red-500\"> *</span>\n              </label>\n              <input\n                type=\"text\"\n                value={endDateInput}\n                onChange={(e) => setEndDateInput(e.target.value)}\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n                placeholder=\"e.g., 2023-05-31\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Field Selection */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"text-lg font-medium\">\n              Select Fields for Collection<span className=\"text-red-500\"> *</span>\n            </h3>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-500\">\n                {Object.values(selectedFields).filter(Boolean).length} fields selected\n              </span>\n              <button\n                type=\"button\"\n                onClick={() => setShowFieldSelector(!showFieldSelector)}\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\n              >\n                {showFieldSelector ? 'Hide' : 'Show'} Fields\n              </button>\n            </div>\n          </div>\n          \n          {showFieldSelector && (\n            <div className=\"border rounded p-4 bg-gray-50 dark:bg-gray-700\">\n              {FIELD_CATEGORIES.map((category, index) => (\n                <div key={index} className=\"mb-4\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <h4 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300\">{category.name}</h4>\n                    <div className=\"space-x-2\">\n                      <button \n                        type=\"button\" \n                        onClick={() => selectAllInCategory(category.fields)}\n                        className=\"text-xs text-blue-600 hover:text-blue-800\"\n                      >\n                        Select All\n                      </button>\n                      <button \n                        type=\"button\" \n                        onClick={() => deselectAllInCategory(category.fields)}\n                        className=\"text-xs text-red-600 hover:text-red-800\"\n                      >\n                        Clear\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {category.fields.map((field) => {\n                      const isAction = field.isActionMetric;\n                      return (\n                        <button\n                          key={field.id}\n                          type=\"button\"\n                          onClick={() => toggleField(field.id)}\n                          className={`px-3 py-1 rounded-full text-sm ${\n                            selectedFields[field.id] \n                              ? 'bg-blue-500 text-white' \n                              : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300'\n                          }`}\n                        >\n                          {field.label}\n                          <span className=\"ml-1 text-xs\">{isAction && '⚡'}</span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Breakdown Selection */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"text-lg font-medium\">Select Breakdowns (Optional)</h3>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-500\">\n                {Object.values(selectedBreakdowns).filter(Boolean).length} breakdowns selected\n              </span>\n              <button\n                type=\"button\"\n                onClick={() => setShowBreakdownSelector(!showBreakdownSelector)}\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\n              >\n                {showBreakdownSelector ? 'Hide' : 'Show'} Breakdowns\n              </button>\n            </div>\n          </div>\n          \n          {showBreakdownSelector && (\n            <div className=\"border rounded p-4 bg-gray-50 dark:bg-gray-700\">\n              <div className=\"text-xs bg-yellow-100 dark:bg-yellow-900 p-2 rounded mb-3 text-yellow-800 dark:text-yellow-300\">\n                <strong>Historical Collection Rules:</strong>\n                <ul className=\"mt-1 ml-2 list-disc pl-4\">\n                  <li>Maximum 2 breakdowns allowed</li>\n                  <li>With <strong>⚡ action metrics</strong>, only <code>conversion_destination</code> breakdown is allowed</li>\n                  <li>Historical jobs will collect data for ALL days in the date range with the selected configuration</li>\n                </ul>\n              </div>\n              \n              {BREAKDOWN_CATEGORIES.map((category, index) => (\n                <div key={index} className=\"mb-4\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <h4 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300\">{category.name}</h4>\n                    <div className=\"space-x-2\">\n                      <button \n                        type=\"button\" \n                        onClick={() => selectAllBreakdownsInCategory(category.breakdowns)}\n                        className=\"text-xs text-blue-600 hover:text-blue-800\"\n                        disabled={category.breakdowns.some(b => isBreakdownDisabled(b.id, selectedFields, selectedBreakdowns))}\n                      >\n                        Select All\n                      </button>\n                      <button \n                        type=\"button\" \n                        onClick={() => deselectAllBreakdownsInCategory(category.breakdowns)}\n                        className=\"text-xs text-red-600 hover:text-red-800\"\n                      >\n                        Clear\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {category.breakdowns.map((breakdown) => {\n                      const isDisabled = isBreakdownDisabled(breakdown.id, selectedFields, selectedBreakdowns);\n                      const disabledTooltip = isDisabled ? getDisabledTooltip(breakdown.id, selectedFields, selectedBreakdowns) : '';\n                      const isActionCompatible = ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdown.id);\n                      \n                      return (\n                        <button\n                          key={breakdown.id}\n                          type=\"button\"\n                          onClick={() => toggleBreakdown(breakdown.id)}\n                          className={`px-3 py-1 rounded-full text-sm ${\n                            selectedBreakdowns[breakdown.id] \n                              ? 'bg-green-500 text-white' \n                              : isDisabled\n                                ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed'\n                                : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-300'\n                          }`}\n                          disabled={isDisabled}\n                          title={disabledTooltip}\n                        >\n                          {breakdown.label}\n                          {isActionCompatible && \n                            <span className=\"ml-1 text-xs\" title=\"Compatible with action metrics\">★</span>\n                          }\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Collection Summary */}\n        {startDateInput && endDateInput && Object.values(selectedFields).some(Boolean) && (\n          <div className=\"mb-6 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n            <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">Collection Summary</h4>\n            <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n              <div><strong>Date Range:</strong> {startDateInput} to {endDateInput}</div>\n              <div><strong>Fields:</strong> {getSelectedFieldsString(selectedFields)}</div>\n              {getSelectedBreakdownsString(selectedBreakdowns) && (\n                <div><strong>Breakdowns:</strong> {getSelectedBreakdownsString(selectedBreakdowns)}</div>\n              )}\n              {missingDates.length > 0 && (\n                <div className=\"text-orange-700 dark:text-orange-300\">\n                  <strong>{missingDates.length} days</strong> need to be collected\n                  {missingDates.length <= 5 && ` (${missingDates.join(', ')})`}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Start Collection Button */}\n        <button\n          onClick={startHistoricalCollection}\n          disabled={!startDateInput || !endDateInput || !Object.values(selectedFields).some(Boolean)}\n          className=\"px-6 py-3 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-400\"\n        >\n          Start Historical Collection Job\n        </button>\n      </div>\n\n      {/* Data Export Section */}\n      {exportData && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Exported Data</h2>\n          <div className=\"bg-gray-100 dark:bg-gray-900 p-4 rounded overflow-auto max-h-96\">\n            <pre className=\"text-xs\">{JSON.stringify(exportData, null, 2)}</pre>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HistoricalDataManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}