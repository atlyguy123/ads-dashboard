{"ast":null,"code":"var _jsxFileName = \"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/dashboard/AnalyticsPipelineControls.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Database, CheckCircle, XCircle, Loader, Clock } from 'lucide-react';\nimport { analyticsPipelineApi } from '../../services/analyticsPipelineApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsPipelineControls = () => {\n  _s();\n  const [pipelineStatus, setPipelineStatus] = useState(null);\n  const [hasError, setHasError] = useState(false);\n\n  // Fetch initial status and poll for updates\n  useEffect(() => {\n    const loadStatus = async () => {\n      try {\n        const status = await analyticsPipelineApi.getAnalyticsPipelineStatus();\n        setPipelineStatus(status);\n        setHasError(false);\n      } catch (error) {\n        console.error('Failed to load analytics pipeline status:', error);\n        setHasError(true);\n      }\n    };\n    loadStatus();\n\n    // Poll every 30 seconds\n    const interval = setInterval(loadStatus, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const getStatusDisplay = () => {\n    if (hasError) {\n      return {\n        icon: /*#__PURE__*/_jsxDEV(XCircle, {\n          className: \"h-4 w-4 text-red-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this),\n        text: 'Connection Error',\n        color: 'text-red-500'\n      };\n    }\n    if (!pipelineStatus) {\n      return {\n        icon: /*#__PURE__*/_jsxDEV(Loader, {\n          className: \"h-4 w-4 text-gray-500 animate-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this),\n        text: 'Loading...',\n        color: 'text-gray-500'\n      };\n    }\n    const currentRun = pipelineStatus.current_run;\n    if (currentRun !== null && currentRun !== void 0 && currentRun.is_running) {\n      return {\n        icon: /*#__PURE__*/_jsxDEV(Loader, {\n          className: \"h-4 w-4 text-blue-500 animate-spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this),\n        text: 'Processing Data',\n        color: 'text-blue-500'\n      };\n    }\n    if (currentRun !== null && currentRun !== void 0 && currentRun.completed_at) {\n      const completedTime = new Date(currentRun.completed_at);\n      const now = new Date();\n      const hoursAgo = Math.floor((now - completedTime) / (1000 * 60 * 60));\n      return {\n        icon: /*#__PURE__*/_jsxDEV(CheckCircle, {\n          className: \"h-4 w-4 text-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this),\n        text: `Updated ${hoursAgo}h ago`,\n        color: 'text-green-500'\n      };\n    }\n    return {\n      icon: /*#__PURE__*/_jsxDEV(Database, {\n        className: \"h-4 w-4 text-gray-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this),\n      text: 'Ready',\n      color: 'text-gray-500'\n    };\n  };\n  const status = getStatusDisplay();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center space-x-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: [status.icon, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm font-medium text-gray-900 dark:text-gray-100\",\n          children: \"Analytics Pipeline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-2\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `text-sm ${status.color}`,\n          children: status.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(AnalyticsPipelineControls, \"thc8mFg0uEpOTnmYjFv7itsBwiE=\");\n_c = AnalyticsPipelineControls;\nexport default AnalyticsPipelineControls;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsPipelineControls\");","map":{"version":3,"names":["React","useState","useEffect","Database","CheckCircle","XCircle","Loader","Clock","analyticsPipelineApi","jsxDEV","_jsxDEV","AnalyticsPipelineControls","_s","pipelineStatus","setPipelineStatus","hasError","setHasError","loadStatus","status","getAnalyticsPipelineStatus","error","console","interval","setInterval","clearInterval","getStatusDisplay","icon","className","fileName","_jsxFileName","lineNumber","columnNumber","text","color","currentRun","current_run","is_running","completed_at","completedTime","Date","now","hoursAgo","Math","floor","children","_c","$RefreshReg$"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/dashboard/AnalyticsPipelineControls.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Database, \n  CheckCircle, \n  XCircle,\n  Loader,\n  Clock\n} from 'lucide-react';\nimport { analyticsPipelineApi } from '../../services/analyticsPipelineApi';\n\nconst AnalyticsPipelineControls = () => {\n  const [pipelineStatus, setPipelineStatus] = useState(null);\n  const [hasError, setHasError] = useState(false);\n\n  // Fetch initial status and poll for updates\n  useEffect(() => {\n    const loadStatus = async () => {\n      try {\n        const status = await analyticsPipelineApi.getAnalyticsPipelineStatus();\n        setPipelineStatus(status);\n        setHasError(false);\n      } catch (error) {\n        console.error('Failed to load analytics pipeline status:', error);\n        setHasError(true);\n      }\n    };\n\n    loadStatus();\n    \n    // Poll every 30 seconds\n    const interval = setInterval(loadStatus, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusDisplay = () => {\n    if (hasError) {\n      return { \n        icon: <XCircle className=\"h-4 w-4 text-red-500\" />, \n        text: 'Connection Error', \n        color: 'text-red-500' \n      };\n    }\n    \n    if (!pipelineStatus) {\n      return { \n        icon: <Loader className=\"h-4 w-4 text-gray-500 animate-spin\" />, \n        text: 'Loading...', \n        color: 'text-gray-500' \n      };\n    }\n    \n    const currentRun = pipelineStatus.current_run;\n    if (currentRun?.is_running) {\n      return { \n        icon: <Loader className=\"h-4 w-4 text-blue-500 animate-spin\" />, \n        text: 'Processing Data', \n        color: 'text-blue-500' \n      };\n    }\n    \n    if (currentRun?.completed_at) {\n      const completedTime = new Date(currentRun.completed_at);\n      const now = new Date();\n      const hoursAgo = Math.floor((now - completedTime) / (1000 * 60 * 60));\n      \n      return { \n        icon: <CheckCircle className=\"h-4 w-4 text-green-500\" />, \n        text: `Updated ${hoursAgo}h ago`, \n        color: 'text-green-500' \n      };\n    }\n    \n    return { \n      icon: <Database className=\"h-4 w-4 text-gray-500\" />, \n      text: 'Ready', \n      color: 'text-gray-500' \n    };\n  };\n\n  const status = getStatusDisplay();\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\">\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"flex items-center space-x-2\">\n          {status.icon}\n          <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n            Analytics Pipeline\n          </span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <span className={`text-sm ${status.color}`}>\n            {status.text}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AnalyticsPipelineControls; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}