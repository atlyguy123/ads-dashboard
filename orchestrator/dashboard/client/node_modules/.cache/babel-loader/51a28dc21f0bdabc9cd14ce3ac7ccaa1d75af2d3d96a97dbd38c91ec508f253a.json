{"ast":null,"code":"import _objectSpread from\"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import{api}from'../../services/api';import DataCoverageDisplay from'./DataCoverageDisplay';import JobManager from'./JobManager';import HistoricalDataViewer from'./HistoricalDataViewer';import{getSelectedFieldsString,getSelectedBreakdownsString,validateMetaBreakdownCombo,isBreakdownDisabled,getDisabledTooltip}from'./utils/metaApiUtils';import{FIELD_CATEGORIES,BREAKDOWN_CATEGORIES,ACTION_TYPE_ALLOWED_BREAKDOWNS}from'./utils/metaConstants';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HistoricalDataManager=_ref=>{let{startDateInput,setStartDateInput,endDateInput,setEndDateInput,selectedFields,setSelectedFields,selectedBreakdowns,setSelectedBreakdowns,error,setError}=_ref;// Historical data state\nconst[activeJobs,setActiveJobs]=useState([]);const[configurations,setConfigurations]=useState([]);const[dataCoverage,setDataCoverage]=useState(null);const[missingDates,setMissingDates]=useState([]);const[showDataViewer,setShowDataViewer]=useState(false);const[selectedConfig,setSelectedConfig]=useState(null);const[exportData,setExportData]=useState(null);// Field/breakdown selection UI state\nconst[showFieldSelector,setShowFieldSelector]=useState(true);const[showBreakdownSelector,setShowBreakdownSelector]=useState(false);// Ref for job polling interval - THIS FIXES THE ESLINT ERROR\nconst jobPollingRef=useRef(null);// useEffect for polling job status\nuseEffect(()=>{const hasRunningJobs=activeJobs.some(job=>job.status==='running'||job.status==='starting');if(hasRunningJobs){jobPollingRef.current=setInterval(()=>{pollActiveJobs();},2000);// Poll every 2 seconds\n}else{if(jobPollingRef.current){clearInterval(jobPollingRef.current);}}return()=>{if(jobPollingRef.current){clearInterval(jobPollingRef.current);}};},[activeJobs]);// Load configurations when component mounts\nuseEffect(()=>{loadConfigurations();updateDataCoverage();},[selectedFields,selectedBreakdowns]);// Clear stale jobs on component mount\nuseEffect(()=>{setActiveJobs([]);// Clean up any old completed jobs periodically\nconst cleanupInterval=setInterval(()=>{setActiveJobs(prev=>prev.filter(job=>{// Keep running jobs and recently completed jobs (last 5 minutes)\nif(job.status==='running'||job.status==='starting'){return true;}// For completed jobs, check if they're recent\nif(job.end_time){const endTime=new Date(job.end_time);const now=new Date();const timeDiff=now-endTime;return timeDiff<5*60*1000;// Keep for 5 minutes\n}// Keep jobs without end_time for now (they might still be processing)\nreturn true;}));},60000);// Check every minute\nreturn()=>clearInterval(cleanupInterval);},[]);// Functions for historical data management\nconst loadConfigurations=async()=>{try{const configs=await api.getHistoricalConfigurations();setConfigurations(configs);}catch(error){console.error('Error loading configurations:',error);}};const updateDataCoverage=async()=>{const fieldsString=getSelectedFieldsString(selectedFields);const breakdownsString=getSelectedBreakdownsString(selectedBreakdowns);if(!fieldsString)return;try{const coverage=await api.getDataCoverage({fields:fieldsString,breakdowns:breakdownsString,start_date:startDateInput||undefined,end_date:endDateInput||undefined});setDataCoverage(coverage);if(startDateInput&&endDateInput){const missing=await api.getMissingDates({start_date:startDateInput,end_date:endDateInput,fields:fieldsString,breakdowns:breakdownsString});setMissingDates(missing.missing_dates||[]);}}catch(error){console.error('Error updating data coverage:',error);}};const startHistoricalCollection=async()=>{if(!startDateInput||!endDateInput){setError('Start date and end date are required for historical collection');return;}const fieldsString=getSelectedFieldsString(selectedFields);if(!fieldsString){setError('At least one field must be selected');return;}// Validate field/breakdown combination\nconst validation=validateMetaBreakdownCombo(selectedFields,selectedBreakdowns);if(!validation.valid){setError(validation.errors[0]);return;}try{const params={start_date:startDateInput,end_date:endDateInput,fields:fieldsString,breakdowns:getSelectedBreakdownsString(selectedBreakdowns)||undefined};const result=await api.startHistoricalCollection(params);// Add to active jobs\nconst newJob={job_id:result.job_id,status:'running',start_date:startDateInput,end_date:endDateInput,fields:fieldsString,breakdowns:getSelectedBreakdownsString(selectedBreakdowns)||'',progress_percentage:0};setActiveJobs(prev=>[...prev,newJob]);setError(null);// Update data coverage\nupdateDataCoverage();}catch(error){var _error$response,_error$response$data;setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||error.message||'Failed to start historical collection');}};const pollActiveJobs=async()=>{const runningJobs=activeJobs.filter(job=>job.status==='running'||job.status==='starting');if(runningJobs.length===0){return;// No jobs to poll, but keep completed jobs in the list for display\n}const updatedJobs=await Promise.all(runningJobs.map(async job=>{try{const status=await api.getHistoricalJobStatus(job.job_id);return _objectSpread(_objectSpread({},job),status);}catch(error){var _error$response2;console.error(\"Error polling job \".concat(job.job_id,\":\"),error);// If job not found (404), it might have completed successfully\n// Check if data was actually collected by refreshing coverage\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===404){console.log(\"Job \".concat(job.job_id,\" not found in active tracking, checking if data was collected...\"));// Update data coverage to see if data actually exists\nupdateDataCoverage();// Mark job as potentially completed\nreturn _objectSpread(_objectSpread({},job),{},{status:'completed_unknown',message:'Job completed but status unavailable. Check data coverage for results.'});}// For other errors, keep the job as-is for now\nreturn job;}}));setActiveJobs(prev=>{const nonRunningJobs=prev.filter(job=>!runningJobs.find(rj=>rj.job_id===job.job_id));return[...nonRunningJobs,...updatedJobs];});// Update data coverage if any jobs completed or had status issues\nif(updatedJobs.some(job=>job.status==='completed'||job.status==='completed_with_errors'||job.status==='completed_unknown')){updateDataCoverage();}};const cancelJob=async jobId=>{try{await api.cancelHistoricalJob(jobId);setActiveJobs(prev=>prev.map(job=>job.job_id===jobId?_objectSpread(_objectSpread({},job),{},{status:'cancelled'}):job));}catch(error){console.error('Error cancelling job:',error);}};const exportSelectedData=async()=>{if(!selectedConfig)return;try{const exported=await api.exportHistoricalData({start_date:startDateInput,end_date:endDateInput,fields:selectedConfig.fields,breakdowns:selectedConfig.breakdowns});setExportData(exported);}catch(error){console.error('Error exporting data:',error);setError('Failed to export data');}};// Field and breakdown selection functions\nconst toggleField=fieldId=>{setSelectedFields(prev=>_objectSpread(_objectSpread({},prev),{},{[fieldId]:!prev[fieldId]}));};const toggleBreakdown=breakdownId=>{if(isBreakdownDisabled(breakdownId,selectedFields,selectedBreakdowns)){return;// Don't toggle if disabled\n}setSelectedBreakdowns(prev=>_objectSpread(_objectSpread({},prev),{},{[breakdownId]:!prev[breakdownId]}));};const selectAllInCategory=categoryFields=>{const newSelectedFields=_objectSpread({},selectedFields);categoryFields.forEach(field=>{newSelectedFields[field.id]=true;});setSelectedFields(newSelectedFields);};const deselectAllInCategory=categoryFields=>{const newSelectedFields=_objectSpread({},selectedFields);categoryFields.forEach(field=>{newSelectedFields[field.id]=false;});setSelectedFields(newSelectedFields);};const selectAllBreakdownsInCategory=categoryBreakdowns=>{const allEnabled=categoryBreakdowns.every(breakdown=>!isBreakdownDisabled(breakdown.id,selectedFields,selectedBreakdowns));if(!allEnabled){return;// Don't select all if any are disabled\n}const newSelectedBreakdowns=_objectSpread({},selectedBreakdowns);categoryBreakdowns.forEach(breakdown=>{newSelectedBreakdowns[breakdown.id]=true;});setSelectedBreakdowns(newSelectedBreakdowns);};const deselectAllBreakdownsInCategory=categoryBreakdowns=>{const newSelectedBreakdowns=_objectSpread({},selectedBreakdowns);categoryBreakdowns.forEach(breakdown=>{newSelectedBreakdowns[breakdown.id]=false;});setSelectedBreakdowns(newSelectedBreakdowns);};return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsx(HistoricalDataViewer,{}),/*#__PURE__*/_jsx(DataCoverageDisplay,{dataCoverage:dataCoverage,missingDates:missingDates,configurations:configurations}),/*#__PURE__*/_jsx(JobManager,{activeJobs:activeJobs,cancelJob:cancelJob}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-4\",children:\"Configure Historical Collection\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium mb-3\",children:\"Date Range\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{className:\"block text-sm font-medium mb-1\",children:[\"Start Date (YYYY-MM-DD)\",/*#__PURE__*/_jsx(\"span\",{className:\"text-red-500\",children:\" *\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:startDateInput,onChange:e=>setStartDateInput(e.target.value),className:\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\",placeholder:\"e.g., 2023-05-01\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{className:\"block text-sm font-medium mb-1\",children:[\"End Date (YYYY-MM-DD)\",/*#__PURE__*/_jsx(\"span\",{className:\"text-red-500\",children:\" *\"})]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:endDateInput,onChange:e=>setEndDateInput(e.target.value),className:\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\",placeholder:\"e.g., 2023-05-31\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-3\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-medium\",children:[\"Select Fields for Collection\",/*#__PURE__*/_jsx(\"span\",{className:\"text-red-500\",children:\" *\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-4\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-500\",children:[Object.values(selectedFields).filter(Boolean).length,\" fields selected\"]}),/*#__PURE__*/_jsxs(\"button\",{type:\"button\",onClick:()=>setShowFieldSelector(!showFieldSelector),className:\"text-blue-600 hover:text-blue-800 text-sm\",children:[showFieldSelector?'Hide':'Show',\" Fields\"]})]})]}),showFieldSelector&&/*#__PURE__*/_jsx(\"div\",{className:\"border rounded p-4 bg-gray-50 dark:bg-gray-700\",children:FIELD_CATEGORIES.map((category,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-2\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-sm font-semibold text-gray-700 dark:text-gray-300\",children:category.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-x-2\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>selectAllInCategory(category.fields),className:\"text-xs text-blue-600 hover:text-blue-800\",children:\"Select All\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>deselectAllInCategory(category.fields),className:\"text-xs text-red-600 hover:text-red-800\",children:\"Clear\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-2\",children:category.fields.map(field=>{const isAction=field.isActionMetric;return/*#__PURE__*/_jsxs(\"button\",{type:\"button\",onClick:()=>toggleField(field.id),className:\"px-3 py-1 rounded-full text-sm \".concat(selectedFields[field.id]?'bg-blue-500 text-white':'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300'),children:[field.label,/*#__PURE__*/_jsx(\"span\",{className:\"ml-1 text-xs\",children:isAction&&'⚡'})]},field.id);})})]},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-3\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium\",children:\"Select Breakdowns (Optional)\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-4\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-500\",children:[Object.values(selectedBreakdowns).filter(Boolean).length,\" breakdowns selected\"]}),/*#__PURE__*/_jsxs(\"button\",{type:\"button\",onClick:()=>setShowBreakdownSelector(!showBreakdownSelector),className:\"text-blue-600 hover:text-blue-800 text-sm\",children:[showBreakdownSelector?'Hide':'Show',\" Breakdowns\"]})]})]}),showBreakdownSelector&&/*#__PURE__*/_jsxs(\"div\",{className:\"border rounded p-4 bg-gray-50 dark:bg-gray-700\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs bg-yellow-100 dark:bg-yellow-900 p-2 rounded mb-3 text-yellow-800 dark:text-yellow-300\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Historical Collection Rules:\"}),/*#__PURE__*/_jsxs(\"ul\",{className:\"mt-1 ml-2 list-disc pl-4\",children:[/*#__PURE__*/_jsx(\"li\",{children:\"Maximum 2 breakdowns allowed\"}),/*#__PURE__*/_jsxs(\"li\",{children:[\"With \",/*#__PURE__*/_jsx(\"strong\",{children:\"\\u26A1 action metrics\"}),\", only \",/*#__PURE__*/_jsx(\"code\",{children:\"conversion_destination\"}),\" breakdown is allowed\"]}),/*#__PURE__*/_jsx(\"li\",{children:\"Historical jobs will collect data for ALL days in the date range with the selected configuration\"})]})]}),BREAKDOWN_CATEGORIES.map((category,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-2\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-sm font-semibold text-gray-700 dark:text-gray-300\",children:category.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-x-2\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>selectAllBreakdownsInCategory(category.breakdowns),className:\"text-xs text-blue-600 hover:text-blue-800\",disabled:category.breakdowns.some(b=>isBreakdownDisabled(b.id,selectedFields,selectedBreakdowns)),children:\"Select All\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:()=>deselectAllBreakdownsInCategory(category.breakdowns),className:\"text-xs text-red-600 hover:text-red-800\",children:\"Clear\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-2\",children:category.breakdowns.map(breakdown=>{const isDisabled=isBreakdownDisabled(breakdown.id,selectedFields,selectedBreakdowns);const disabledTooltip=isDisabled?getDisabledTooltip(breakdown.id,selectedFields,selectedBreakdowns):'';const isActionCompatible=ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdown.id);return/*#__PURE__*/_jsxs(\"button\",{type:\"button\",onClick:()=>toggleBreakdown(breakdown.id),className:\"px-3 py-1 rounded-full text-sm \".concat(selectedBreakdowns[breakdown.id]?'bg-green-500 text-white':isDisabled?'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed':'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-300'),disabled:isDisabled,title:disabledTooltip,children:[breakdown.label,isActionCompatible&&/*#__PURE__*/_jsx(\"span\",{className:\"ml-1 text-xs\",title:\"Compatible with action metrics\",children:\"\\u2605\"})]},breakdown.id);})})]},index))]})]}),startDateInput&&endDateInput&&Object.values(selectedFields).some(Boolean)&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-medium text-blue-800 dark:text-blue-200 mb-2\",children:\"Collection Summary\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-blue-700 dark:text-blue-300 space-y-1\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Date Range:\"}),\" \",startDateInput,\" to \",endDateInput]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Fields:\"}),\" \",getSelectedFieldsString(selectedFields)]}),getSelectedBreakdownsString(selectedBreakdowns)&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Breakdowns:\"}),\" \",getSelectedBreakdownsString(selectedBreakdowns)]}),missingDates.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-orange-700 dark:text-orange-300\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[missingDates.length,\" days\"]}),\" need to be collected\",missingDates.length<=5&&\" (\".concat(missingDates.join(', '),\")\")]})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:startHistoricalCollection,disabled:!startDateInput||!endDateInput||!Object.values(selectedFields).some(Boolean),className:\"px-6 py-3 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-400\",children:\"Start Historical Collection Job\"})]}),exportData&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-4\",children:\"Exported Data\"}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-100 dark:bg-gray-900 p-4 rounded overflow-auto max-h-96\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"text-xs\",children:JSON.stringify(exportData,null,2)})})]})]});};export default HistoricalDataManager;","map":{"version":3,"names":["React","useState","useEffect","useRef","api","DataCoverageDisplay","JobManager","HistoricalDataViewer","getSelectedFieldsString","getSelectedBreakdownsString","validateMetaBreakdownCombo","isBreakdownDisabled","getDisabledTooltip","FIELD_CATEGORIES","BREAKDOWN_CATEGORIES","ACTION_TYPE_ALLOWED_BREAKDOWNS","jsx","_jsx","jsxs","_jsxs","HistoricalDataManager","_ref","startDateInput","setStartDateInput","endDateInput","setEndDateInput","selectedFields","setSelectedFields","selectedBreakdowns","setSelectedBreakdowns","error","setError","activeJobs","setActiveJobs","configurations","setConfigurations","dataCoverage","setDataCoverage","missingDates","setMissingDates","showDataViewer","setShowDataViewer","selectedConfig","setSelectedConfig","exportData","setExportData","showFieldSelector","setShowFieldSelector","showBreakdownSelector","setShowBreakdownSelector","jobPollingRef","hasRunningJobs","some","job","status","current","setInterval","pollActiveJobs","clearInterval","loadConfigurations","updateDataCoverage","cleanupInterval","prev","filter","end_time","endTime","Date","now","timeDiff","configs","getHistoricalConfigurations","console","fieldsString","breakdownsString","coverage","getDataCoverage","fields","breakdowns","start_date","undefined","end_date","missing","getMissingDates","missing_dates","startHistoricalCollection","validation","valid","errors","params","result","newJob","job_id","progress_percentage","_error$response","_error$response$data","response","data","message","runningJobs","length","updatedJobs","Promise","all","map","getHistoricalJobStatus","_objectSpread","_error$response2","concat","log","nonRunningJobs","find","rj","cancelJob","jobId","cancelHistoricalJob","exportSelectedData","exported","exportHistoricalData","toggleField","fieldId","toggleBreakdown","breakdownId","selectAllInCategory","categoryFields","newSelectedFields","forEach","field","id","deselectAllInCategory","selectAllBreakdownsInCategory","categoryBreakdowns","allEnabled","every","breakdown","newSelectedBreakdowns","deselectAllBreakdownsInCategory","className","children","type","value","onChange","e","target","placeholder","Object","values","Boolean","onClick","category","index","name","isAction","isActionMetric","label","disabled","b","isDisabled","disabledTooltip","isActionCompatible","includes","title","join","JSON","stringify"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/HistoricalDataManager.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { api } from '../../services/api';\nimport DataCoverageDisplay from './DataCoverageDisplay';\nimport JobManager from './JobManager';\nimport HistoricalDataViewer from './HistoricalDataViewer';\nimport { getSelectedFieldsString, getSelectedBreakdownsString, validateMetaBreakdownCombo, isBreakdownDisabled, getDisabledTooltip } from './utils/metaApiUtils';\nimport { FIELD_CATEGORIES, BREAKDOWN_CATEGORIES, ACTION_TYPE_ALLOWED_BREAKDOWNS } from './utils/metaConstants';\n\nconst HistoricalDataManager = ({\n  startDateInput,\n  setStartDateInput,\n  endDateInput,\n  setEndDateInput,\n  selectedFields,\n  setSelectedFields,\n  selectedBreakdowns,\n  setSelectedBreakdowns,\n  error,\n  setError\n}) => {\n  // Historical data state\n  const [activeJobs, setActiveJobs] = useState([]);\n  const [configurations, setConfigurations] = useState([]);\n  const [dataCoverage, setDataCoverage] = useState(null);\n  const [missingDates, setMissingDates] = useState([]);\n  const [showDataViewer, setShowDataViewer] = useState(false);\n  const [selectedConfig, setSelectedConfig] = useState(null);\n  const [exportData, setExportData] = useState(null);\n  \n  // Field/breakdown selection UI state\n  const [showFieldSelector, setShowFieldSelector] = useState(true);\n  const [showBreakdownSelector, setShowBreakdownSelector] = useState(false);\n  \n  // Ref for job polling interval - THIS FIXES THE ESLINT ERROR\n  const jobPollingRef = useRef(null);\n\n  // useEffect for polling job status\n  useEffect(() => {\n    const hasRunningJobs = activeJobs.some(job => \n      job.status === 'running' || job.status === 'starting'\n    );\n    \n    if (hasRunningJobs) {\n      jobPollingRef.current = setInterval(() => {\n        pollActiveJobs();\n      }, 2000); // Poll every 2 seconds\n    } else {\n      if (jobPollingRef.current) {\n        clearInterval(jobPollingRef.current);\n      }\n    }\n\n    return () => {\n      if (jobPollingRef.current) {\n        clearInterval(jobPollingRef.current);\n      }\n    };\n  }, [activeJobs]);\n\n  // Load configurations when component mounts\n  useEffect(() => {\n    loadConfigurations();\n    updateDataCoverage();\n  }, [selectedFields, selectedBreakdowns]);\n\n  // Clear stale jobs on component mount\n  useEffect(() => {\n    setActiveJobs([]);\n    // Clean up any old completed jobs periodically\n    const cleanupInterval = setInterval(() => {\n      setActiveJobs(prev => prev.filter(job => {\n        // Keep running jobs and recently completed jobs (last 5 minutes)\n        if (job.status === 'running' || job.status === 'starting') {\n          return true;\n        }\n        \n        // For completed jobs, check if they're recent\n        if (job.end_time) {\n          const endTime = new Date(job.end_time);\n          const now = new Date();\n          const timeDiff = now - endTime;\n          return timeDiff < 5 * 60 * 1000; // Keep for 5 minutes\n        }\n        \n        // Keep jobs without end_time for now (they might still be processing)\n        return true;\n      }));\n    }, 60000); // Check every minute\n    \n    return () => clearInterval(cleanupInterval);\n  }, []);\n\n  // Functions for historical data management\n  const loadConfigurations = async () => {\n    try {\n      const configs = await api.getHistoricalConfigurations();\n      setConfigurations(configs);\n    } catch (error) {\n      console.error('Error loading configurations:', error);\n    }\n  };\n\n  const updateDataCoverage = async () => {\n    const fieldsString = getSelectedFieldsString(selectedFields);\n    const breakdownsString = getSelectedBreakdownsString(selectedBreakdowns);\n    \n    if (!fieldsString) return;\n\n    try {\n      const coverage = await api.getDataCoverage({\n        fields: fieldsString,\n        breakdowns: breakdownsString,\n        start_date: startDateInput || undefined,\n        end_date: endDateInput || undefined\n      });\n      setDataCoverage(coverage);\n\n      if (startDateInput && endDateInput) {\n        const missing = await api.getMissingDates({\n          start_date: startDateInput,\n          end_date: endDateInput,\n          fields: fieldsString,\n          breakdowns: breakdownsString\n        });\n        setMissingDates(missing.missing_dates || []);\n      }\n    } catch (error) {\n      console.error('Error updating data coverage:', error);\n    }\n  };\n\n  const startHistoricalCollection = async () => {\n    if (!startDateInput || !endDateInput) {\n      setError('Start date and end date are required for historical collection');\n      return;\n    }\n\n    const fieldsString = getSelectedFieldsString(selectedFields);\n    if (!fieldsString) {\n      setError('At least one field must be selected');\n      return;\n    }\n\n    // Validate field/breakdown combination\n    const validation = validateMetaBreakdownCombo(selectedFields, selectedBreakdowns);\n    if (!validation.valid) {\n      setError(validation.errors[0]);\n      return;\n    }\n\n    try {\n      const params = {\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: fieldsString,\n        breakdowns: getSelectedBreakdownsString(selectedBreakdowns) || undefined\n      };\n\n      const result = await api.startHistoricalCollection(params);\n      \n      // Add to active jobs\n      const newJob = {\n        job_id: result.job_id,\n        status: 'running',\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: fieldsString,\n        breakdowns: getSelectedBreakdownsString(selectedBreakdowns) || '',\n        progress_percentage: 0\n      };\n      \n      setActiveJobs(prev => [...prev, newJob]);\n      setError(null);\n      \n      // Update data coverage\n      updateDataCoverage();\n      \n    } catch (error) {\n      setError(error.response?.data?.error || error.message || 'Failed to start historical collection');\n    }\n  };\n\n  const pollActiveJobs = async () => {\n    const runningJobs = activeJobs.filter(job => \n      job.status === 'running' || job.status === 'starting'\n    );\n\n    if (runningJobs.length === 0) {\n      return; // No jobs to poll, but keep completed jobs in the list for display\n    }\n\n    const updatedJobs = await Promise.all(\n      runningJobs.map(async (job) => {\n        try {\n          const status = await api.getHistoricalJobStatus(job.job_id);\n          return { ...job, ...status };\n        } catch (error) {\n          console.error(`Error polling job ${job.job_id}:`, error);\n          \n          // If job not found (404), it might have completed successfully\n          // Check if data was actually collected by refreshing coverage\n          if (error.response?.status === 404) {\n            console.log(`Job ${job.job_id} not found in active tracking, checking if data was collected...`);\n            \n            // Update data coverage to see if data actually exists\n            updateDataCoverage();\n            \n            // Mark job as potentially completed\n            return { \n              ...job, \n              status: 'completed_unknown',\n              message: 'Job completed but status unavailable. Check data coverage for results.'\n            };\n          }\n          \n          // For other errors, keep the job as-is for now\n          return job;\n        }\n      })\n    );\n\n    setActiveJobs(prev => {\n      const nonRunningJobs = prev.filter(job => \n        !runningJobs.find(rj => rj.job_id === job.job_id)\n      );\n      return [...nonRunningJobs, ...updatedJobs];\n    });\n\n    // Update data coverage if any jobs completed or had status issues\n    if (updatedJobs.some(job => \n      job.status === 'completed' || \n      job.status === 'completed_with_errors' ||\n      job.status === 'completed_unknown'\n    )) {\n      updateDataCoverage();\n    }\n  };\n\n  const cancelJob = async (jobId) => {\n    try {\n      await api.cancelHistoricalJob(jobId);\n      setActiveJobs(prev => \n        prev.map(job => \n          job.job_id === jobId \n            ? { ...job, status: 'cancelled' }\n            : job\n        )\n      );\n    } catch (error) {\n      console.error('Error cancelling job:', error);\n    }\n  };\n\n  const exportSelectedData = async () => {\n    if (!selectedConfig) return;\n\n    try {\n      const exported = await api.exportHistoricalData({\n        start_date: startDateInput,\n        end_date: endDateInput,\n        fields: selectedConfig.fields,\n        breakdowns: selectedConfig.breakdowns\n      });\n      \n      setExportData(exported);\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      setError('Failed to export data');\n    }\n  };\n\n  // Field and breakdown selection functions\n  const toggleField = (fieldId) => {\n    setSelectedFields(prev => ({\n      ...prev,\n      [fieldId]: !prev[fieldId]\n    }));\n  };\n  \n  const toggleBreakdown = (breakdownId) => {\n    if (isBreakdownDisabled(breakdownId, selectedFields, selectedBreakdowns)) {\n      return; // Don't toggle if disabled\n    }\n    \n    setSelectedBreakdowns(prev => ({\n      ...prev,\n      [breakdownId]: !prev[breakdownId]\n    }));\n  };\n\n  const selectAllInCategory = (categoryFields) => {\n    const newSelectedFields = { ...selectedFields };\n    categoryFields.forEach(field => {\n      newSelectedFields[field.id] = true;\n    });\n    setSelectedFields(newSelectedFields);\n  };\n  \n  const deselectAllInCategory = (categoryFields) => {\n    const newSelectedFields = { ...selectedFields };\n    categoryFields.forEach(field => {\n      newSelectedFields[field.id] = false;\n    });\n    setSelectedFields(newSelectedFields);\n  };\n\n  const selectAllBreakdownsInCategory = (categoryBreakdowns) => {\n    const allEnabled = categoryBreakdowns.every(breakdown => \n      !isBreakdownDisabled(breakdown.id, selectedFields, selectedBreakdowns)\n    );\n    \n    if (!allEnabled) {\n      return; // Don't select all if any are disabled\n    }\n    \n    const newSelectedBreakdowns = { ...selectedBreakdowns };\n    categoryBreakdowns.forEach(breakdown => {\n      newSelectedBreakdowns[breakdown.id] = true;\n    });\n    setSelectedBreakdowns(newSelectedBreakdowns);\n  };\n  \n  const deselectAllBreakdownsInCategory = (categoryBreakdowns) => {\n    const newSelectedBreakdowns = { ...selectedBreakdowns };\n    categoryBreakdowns.forEach(breakdown => {\n      newSelectedBreakdowns[breakdown.id] = false;\n    });\n    setSelectedBreakdowns(newSelectedBreakdowns);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Historical Data Viewer - Auto-loads all existing data */}\n      <HistoricalDataViewer />\n\n      {/* Data Coverage Summary */}\n      <DataCoverageDisplay \n        dataCoverage={dataCoverage}\n        missingDates={missingDates}\n        configurations={configurations}\n      />\n\n      {/* Active Jobs */}\n      <JobManager \n        activeJobs={activeJobs}\n        cancelJob={cancelJob}\n      />\n\n      {/* Historical Collection Configuration */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Configure Historical Collection</h2>\n        \n        {/* Date Range */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-medium mb-3\">Date Range</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Start Date (YYYY-MM-DD)<span className=\"text-red-500\"> *</span>\n              </label>\n              <input\n                type=\"text\"\n                value={startDateInput}\n                onChange={(e) => setStartDateInput(e.target.value)}\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n                placeholder=\"e.g., 2023-05-01\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                End Date (YYYY-MM-DD)<span className=\"text-red-500\"> *</span>\n              </label>\n              <input\n                type=\"text\"\n                value={endDateInput}\n                onChange={(e) => setEndDateInput(e.target.value)}\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n                placeholder=\"e.g., 2023-05-31\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Field Selection */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"text-lg font-medium\">\n              Select Fields for Collection<span className=\"text-red-500\"> *</span>\n            </h3>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-500\">\n                {Object.values(selectedFields).filter(Boolean).length} fields selected\n              </span>\n              <button\n                type=\"button\"\n                onClick={() => setShowFieldSelector(!showFieldSelector)}\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\n              >\n                {showFieldSelector ? 'Hide' : 'Show'} Fields\n              </button>\n            </div>\n          </div>\n          \n          {showFieldSelector && (\n            <div className=\"border rounded p-4 bg-gray-50 dark:bg-gray-700\">\n              {FIELD_CATEGORIES.map((category, index) => (\n                <div key={index} className=\"mb-4\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <h4 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300\">{category.name}</h4>\n                    <div className=\"space-x-2\">\n                      <button \n                        type=\"button\" \n                        onClick={() => selectAllInCategory(category.fields)}\n                        className=\"text-xs text-blue-600 hover:text-blue-800\"\n                      >\n                        Select All\n                      </button>\n                      <button \n                        type=\"button\" \n                        onClick={() => deselectAllInCategory(category.fields)}\n                        className=\"text-xs text-red-600 hover:text-red-800\"\n                      >\n                        Clear\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {category.fields.map((field) => {\n                      const isAction = field.isActionMetric;\n                      return (\n                        <button\n                          key={field.id}\n                          type=\"button\"\n                          onClick={() => toggleField(field.id)}\n                          className={`px-3 py-1 rounded-full text-sm ${\n                            selectedFields[field.id] \n                              ? 'bg-blue-500 text-white' \n                              : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300'\n                          }`}\n                        >\n                          {field.label}\n                          <span className=\"ml-1 text-xs\">{isAction && '⚡'}</span>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Breakdown Selection */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"text-lg font-medium\">Select Breakdowns (Optional)</h3>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-500\">\n                {Object.values(selectedBreakdowns).filter(Boolean).length} breakdowns selected\n              </span>\n              <button\n                type=\"button\"\n                onClick={() => setShowBreakdownSelector(!showBreakdownSelector)}\n                className=\"text-blue-600 hover:text-blue-800 text-sm\"\n              >\n                {showBreakdownSelector ? 'Hide' : 'Show'} Breakdowns\n              </button>\n            </div>\n          </div>\n          \n          {showBreakdownSelector && (\n            <div className=\"border rounded p-4 bg-gray-50 dark:bg-gray-700\">\n              <div className=\"text-xs bg-yellow-100 dark:bg-yellow-900 p-2 rounded mb-3 text-yellow-800 dark:text-yellow-300\">\n                <strong>Historical Collection Rules:</strong>\n                <ul className=\"mt-1 ml-2 list-disc pl-4\">\n                  <li>Maximum 2 breakdowns allowed</li>\n                  <li>With <strong>⚡ action metrics</strong>, only <code>conversion_destination</code> breakdown is allowed</li>\n                  <li>Historical jobs will collect data for ALL days in the date range with the selected configuration</li>\n                </ul>\n              </div>\n              \n              {BREAKDOWN_CATEGORIES.map((category, index) => (\n                <div key={index} className=\"mb-4\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <h4 className=\"text-sm font-semibold text-gray-700 dark:text-gray-300\">{category.name}</h4>\n                    <div className=\"space-x-2\">\n                      <button \n                        type=\"button\" \n                        onClick={() => selectAllBreakdownsInCategory(category.breakdowns)}\n                        className=\"text-xs text-blue-600 hover:text-blue-800\"\n                        disabled={category.breakdowns.some(b => isBreakdownDisabled(b.id, selectedFields, selectedBreakdowns))}\n                      >\n                        Select All\n                      </button>\n                      <button \n                        type=\"button\" \n                        onClick={() => deselectAllBreakdownsInCategory(category.breakdowns)}\n                        className=\"text-xs text-red-600 hover:text-red-800\"\n                      >\n                        Clear\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {category.breakdowns.map((breakdown) => {\n                      const isDisabled = isBreakdownDisabled(breakdown.id, selectedFields, selectedBreakdowns);\n                      const disabledTooltip = isDisabled ? getDisabledTooltip(breakdown.id, selectedFields, selectedBreakdowns) : '';\n                      const isActionCompatible = ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdown.id);\n                      \n                      return (\n                        <button\n                          key={breakdown.id}\n                          type=\"button\"\n                          onClick={() => toggleBreakdown(breakdown.id)}\n                          className={`px-3 py-1 rounded-full text-sm ${\n                            selectedBreakdowns[breakdown.id] \n                              ? 'bg-green-500 text-white' \n                              : isDisabled\n                                ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed'\n                                : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-300'\n                          }`}\n                          disabled={isDisabled}\n                          title={disabledTooltip}\n                        >\n                          {breakdown.label}\n                          {isActionCompatible && \n                            <span className=\"ml-1 text-xs\" title=\"Compatible with action metrics\">★</span>\n                          }\n                        </button>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Collection Summary */}\n        {startDateInput && endDateInput && Object.values(selectedFields).some(Boolean) && (\n          <div className=\"mb-6 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n            <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">Collection Summary</h4>\n            <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n              <div><strong>Date Range:</strong> {startDateInput} to {endDateInput}</div>\n              <div><strong>Fields:</strong> {getSelectedFieldsString(selectedFields)}</div>\n              {getSelectedBreakdownsString(selectedBreakdowns) && (\n                <div><strong>Breakdowns:</strong> {getSelectedBreakdownsString(selectedBreakdowns)}</div>\n              )}\n              {missingDates.length > 0 && (\n                <div className=\"text-orange-700 dark:text-orange-300\">\n                  <strong>{missingDates.length} days</strong> need to be collected\n                  {missingDates.length <= 5 && ` (${missingDates.join(', ')})`}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Start Collection Button */}\n        <button\n          onClick={startHistoricalCollection}\n          disabled={!startDateInput || !endDateInput || !Object.values(selectedFields).some(Boolean)}\n          className=\"px-6 py-3 bg-green-600 text-white rounded hover:bg-green-700 disabled:bg-gray-400\"\n        >\n          Start Historical Collection Job\n        </button>\n      </div>\n\n      {/* Data Export Section */}\n      {exportData && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Exported Data</h2>\n          <div className=\"bg-gray-100 dark:bg-gray-900 p-4 rounded overflow-auto max-h-96\">\n            <pre className=\"text-xs\">{JSON.stringify(exportData, null, 2)}</pre>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HistoricalDataManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}