{"ast":null,"code":"import _objectSpread from\"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect}from'react';import{loadSavedState,getDateRangeFromTimeframe}from'../components/conversion_probability/utils/conversionUtils';export const useConversionProbability=()=>{// Initialize state with saved values\nconst savedState=loadSavedState();// Analysis configuration state\nconst[config,setConfig]=useState(_objectSpread(_objectSpread({},savedState.config),{},{min_price_samples:savedState.config.min_price_samples||100}));// Analysis state\nconst[currentAnalysis,setCurrentAnalysis]=useState(null);const[analysisProgress,setAnalysisProgress]=useState(null);const[analysisResults,setAnalysisResults]=useState(null);const[isAnalyzing,setIsAnalyzing]=useState(false);// NEW: New hierarchical analysis state\nconst[isRunningNewAnalysis,setIsRunningNewAnalysis]=useState(false);// Property analysis state\nconst[propertyAnalysis,setPropertyAnalysis]=useState(null);const[isAnalyzingProperties,setIsAnalyzingProperties]=useState(false);// UI state\nconst[error,setError]=useState(null);const[success,setSuccess]=useState(null);const[expandedSections,setExpandedSections]=useState(_objectSpread(_objectSpread({},savedState.expandedSections),{},{analysisHierarchy:true// Default to expanded when analysis is complete\n}));// Available analyses\nconst[availableAnalyses,setAvailableAnalyses]=useState([]);// Save state to localStorage whenever it changes\nuseEffect(()=>{localStorage.setItem('conversionProbability_config',JSON.stringify(config));},[config]);useEffect(()=>{localStorage.setItem('conversionProbability_expandedSections',JSON.stringify(expandedSections));},[expandedSections]);// Load analysis results function\nconst loadAnalysisResults=async analysisId=>{try{const response=await fetch(\"/api/conversion-probability/results/\".concat(analysisId));const data=await response.json();if(data.success){setAnalysisResults(data.data);// Auto-expand hierarchy section when results are loaded\nsetExpandedSections(prev=>_objectSpread(_objectSpread({},prev),{},{analysisHierarchy:true}));loadAvailableAnalyses();}else{setError(data.error||'Failed to load analysis results');}}catch(err){setError('Error loading analysis results: '+err.message);}};const loadAvailableAnalyses=async()=>{try{const response=await fetch('/api/conversion-probability/analyses');const data=await response.json();if(data.success){setAvailableAnalyses(data.data.files);}}catch(err){console.error('Error loading available analyses:',err);}};// Polling for progress updates\nuseEffect(()=>{let interval;if(currentAnalysis&&isAnalyzing){interval=setInterval(async()=>{try{const response=await fetch(\"/api/conversion-probability/progress/\".concat(currentAnalysis));const data=await response.json();if(data.success){setAnalysisProgress(data.data.progress);if(data.data.status==='completed'||data.data.status==='failed'){setIsAnalyzing(false);if(data.data.status==='completed'){setSuccess('Analysis completed successfully!');loadAnalysisResults(currentAnalysis);}else{setError('Analysis failed. Please try again.');}}}}catch(err){console.error('Error polling progress:',err);}},2000);}return()=>{if(interval)clearInterval(interval);};},[currentAnalysis,isAnalyzing]);// Load available analyses on component mount\nuseEffect(()=>{loadAvailableAnalyses();},[]);const analyzeProperties=async()=>{setIsAnalyzingProperties(true);setError(null);try{const dateRange=getDateRangeFromTimeframe(config.timeframe);const response=await fetch('/api/conversion-probability/analyze-properties',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({timeframe_start:dateRange.start,timeframe_end:dateRange.end,sample_limit:10000,min_price_samples:config.min_price_samples,min_cohort_size:config.min_cohort_size})});const data=await response.json();if(data.success){setPropertyAnalysis(data.data);setSuccess('Property analysis completed successfully!');setExpandedSections(prev=>_objectSpread(_objectSpread({},prev),{},{propertyAnalysis:false}));}else{setError(data.error||'Property analysis failed');}}catch(err){setError('Error analyzing properties: '+err.message);}finally{setIsAnalyzingProperties(false);}};const startAnalysis=async()=>{setIsAnalyzing(true);setError(null);setAnalysisProgress(null);try{const dateRange=getDateRangeFromTimeframe(config.timeframe);const requestBody={timeframe_start:dateRange.start,timeframe_end:dateRange.end,min_cohort_size:config.min_cohort_size,force_recalculate:config.force_recalculate};if(propertyAnalysis){requestBody.existing_property_analysis=propertyAnalysis;}const response=await fetch('/api/conversion-probability/start-analysis',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});const data=await response.json();if(data.success){setCurrentAnalysis(data.data.analysis_id);if(data.data.cached){setIsAnalyzing(false);setSuccess('Using cached analysis results!');loadAnalysisResults(data.data.analysis_id);}else{setSuccess(\"Analysis started! Estimated duration: \".concat(data.data.estimated_duration_minutes,\" minutes\"));}}else{setError(data.error||'Failed to start analysis');setIsAnalyzing(false);}}catch(err){setError('Error starting analysis: '+err.message);setIsAnalyzing(false);}};// NEW: Run new hierarchical analysis\nconst runNewHierarchicalAnalysis=async()=>{setIsRunningNewAnalysis(true);setError(null);setAnalysisResults(null);// Clear previous results\ntry{// NEW: Don't send any timeframe - let the backend use the default comprehensive range (2024-01-01 to today)\nconst requestBody={};// Empty - will use 2024-01-01 to today automatically\nconst response=await fetch('/api/conversion-probability/run-new-hierarchical-analysis',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});const data=await response.json();if(data.success){// Results are returned immediately since the new pipeline runs synchronously\nsetSuccess(\"\\u2728 New hierarchical analysis completed! \".concat(data.data.timeframe_description,\" - Processed \").concat(data.data.total_combinations,\" segments with \").concat(data.data.rollup_percentage.toFixed(1),\"% rollup rate.\"));// Load the results from the file (they were saved to latest_analysis.json)\n// We can either use the analysis_id or just load the latest results\nawait loadLatestAnalysisResults();// Auto-expand hierarchy section\nsetExpandedSections(prev=>_objectSpread(_objectSpread({},prev),{},{analysisHierarchy:true}));}else{setError(data.error||'New hierarchical analysis failed');}}catch(err){setError('Error running new hierarchical analysis: '+err.message);}finally{setIsRunningNewAnalysis(false);}};// Helper function to load latest analysis results (for new pipeline)\nconst loadLatestAnalysisResults=async()=>{try{// Since the new pipeline saves to latest_analysis.json, we can try to load it directly\n// or use a generic endpoint that loads the latest\nconst response=await fetch(\"/api/conversion-probability/results/latest\");let data=await response.json();if(!data.success){// Fallback: get available analyses and load the most recent one\nconst analysesResponse=await fetch('/api/conversion-probability/analyses');const analysesData=await analysesResponse.json();if(analysesData.success&&analysesData.data.files.length>0){// Get the most recent analysis\nconst mostRecentAnalysis=analysesData.data.files[0];// Assumes they're sorted by date\ndata=await(await fetch(\"/api/conversion-probability/results/\".concat(mostRecentAnalysis.analysis_id))).json();}}if(data.success){setAnalysisResults(data.data);loadAvailableAnalyses();}}catch(err){console.error('Error loading latest analysis results:',err);// Try alternative approach - reload the page to pick up the new file\nsetTimeout(()=>{window.location.reload();},1000);}};const toggleSection=section=>{setExpandedSections(prev=>_objectSpread(_objectSpread({},prev),{},{[section]:!prev[section]}));};return{// State\nconfig,currentAnalysis,analysisProgress,analysisResults,isAnalyzing,isRunningNewAnalysis,// NEW\npropertyAnalysis,isAnalyzingProperties,error,success,expandedSections,availableAnalyses,// Actions\nsetConfig,setError,setSuccess,analyzeProperties,startAnalysis,runNewHierarchicalAnalysis,// NEW\ntoggleSection};};","map":{"version":3,"names":["useState","useEffect","loadSavedState","getDateRangeFromTimeframe","useConversionProbability","savedState","config","setConfig","_objectSpread","min_price_samples","currentAnalysis","setCurrentAnalysis","analysisProgress","setAnalysisProgress","analysisResults","setAnalysisResults","isAnalyzing","setIsAnalyzing","isRunningNewAnalysis","setIsRunningNewAnalysis","propertyAnalysis","setPropertyAnalysis","isAnalyzingProperties","setIsAnalyzingProperties","error","setError","success","setSuccess","expandedSections","setExpandedSections","analysisHierarchy","availableAnalyses","setAvailableAnalyses","localStorage","setItem","JSON","stringify","loadAnalysisResults","analysisId","response","fetch","concat","data","json","prev","loadAvailableAnalyses","err","message","files","console","interval","setInterval","progress","status","clearInterval","analyzeProperties","dateRange","timeframe","method","headers","body","timeframe_start","start","timeframe_end","end","sample_limit","min_cohort_size","startAnalysis","requestBody","force_recalculate","existing_property_analysis","analysis_id","cached","estimated_duration_minutes","runNewHierarchicalAnalysis","timeframe_description","total_combinations","rollup_percentage","toFixed","loadLatestAnalysisResults","analysesResponse","analysesData","length","mostRecentAnalysis","setTimeout","window","location","reload","toggleSection","section"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/hooks/useConversionProbability.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { loadSavedState, getDateRangeFromTimeframe } from '../components/conversion_probability/utils/conversionUtils';\n\nexport const useConversionProbability = () => {\n  // Initialize state with saved values\n  const savedState = loadSavedState();\n  \n  // Analysis configuration state\n  const [config, setConfig] = useState({\n    ...savedState.config,\n    min_price_samples: savedState.config.min_price_samples || 100\n  });\n\n  // Analysis state\n  const [currentAnalysis, setCurrentAnalysis] = useState(null);\n  const [analysisProgress, setAnalysisProgress] = useState(null);\n  const [analysisResults, setAnalysisResults] = useState(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  // NEW: New hierarchical analysis state\n  const [isRunningNewAnalysis, setIsRunningNewAnalysis] = useState(false);\n\n  // Property analysis state\n  const [propertyAnalysis, setPropertyAnalysis] = useState(null);\n  const [isAnalyzingProperties, setIsAnalyzingProperties] = useState(false);\n\n  // UI state\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [expandedSections, setExpandedSections] = useState({\n    ...savedState.expandedSections,\n    analysisHierarchy: true // Default to expanded when analysis is complete\n  });\n\n  // Available analyses\n  const [availableAnalyses, setAvailableAnalyses] = useState([]);\n\n  // Save state to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('conversionProbability_config', JSON.stringify(config));\n  }, [config]);\n\n  useEffect(() => {\n    localStorage.setItem('conversionProbability_expandedSections', JSON.stringify(expandedSections));\n  }, [expandedSections]);\n\n  // Load analysis results function\n  const loadAnalysisResults = async (analysisId) => {\n    try {\n      const response = await fetch(`/api/conversion-probability/results/${analysisId}`);\n      const data = await response.json();\n      \n      if (data.success) {\n        setAnalysisResults(data.data);\n        // Auto-expand hierarchy section when results are loaded\n        setExpandedSections(prev => ({ ...prev, analysisHierarchy: true }));\n        loadAvailableAnalyses();\n      } else {\n        setError(data.error || 'Failed to load analysis results');\n      }\n    } catch (err) {\n      setError('Error loading analysis results: ' + err.message);\n    }\n  };\n\n  const loadAvailableAnalyses = async () => {\n    try {\n      const response = await fetch('/api/conversion-probability/analyses');\n      const data = await response.json();\n      \n      if (data.success) {\n        setAvailableAnalyses(data.data.files);\n      }\n    } catch (err) {\n      console.error('Error loading available analyses:', err);\n    }\n  };\n\n  // Polling for progress updates\n  useEffect(() => {\n    let interval;\n    if (currentAnalysis && isAnalyzing) {\n      interval = setInterval(async () => {\n        try {\n          const response = await fetch(`/api/conversion-probability/progress/${currentAnalysis}`);\n          const data = await response.json();\n          \n          if (data.success) {\n            setAnalysisProgress(data.data.progress);\n            \n            if (data.data.status === 'completed' || data.data.status === 'failed') {\n              setIsAnalyzing(false);\n              if (data.data.status === 'completed') {\n                setSuccess('Analysis completed successfully!');\n                loadAnalysisResults(currentAnalysis);\n              } else {\n                setError('Analysis failed. Please try again.');\n              }\n            }\n          }\n        } catch (err) {\n          console.error('Error polling progress:', err);\n        }\n      }, 2000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [currentAnalysis, isAnalyzing]);\n\n  // Load available analyses on component mount\n  useEffect(() => {\n    loadAvailableAnalyses();\n  }, []);\n\n  const analyzeProperties = async () => {\n    setIsAnalyzingProperties(true);\n    setError(null);\n    \n    try {\n      const dateRange = getDateRangeFromTimeframe(config.timeframe);\n      \n      const response = await fetch('/api/conversion-probability/analyze-properties', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          timeframe_start: dateRange.start,\n          timeframe_end: dateRange.end,\n          sample_limit: 10000,\n          min_price_samples: config.min_price_samples,\n          min_cohort_size: config.min_cohort_size\n        }),\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setPropertyAnalysis(data.data);\n        setSuccess('Property analysis completed successfully!');\n        setExpandedSections(prev => ({ ...prev, propertyAnalysis: false }));\n      } else {\n        setError(data.error || 'Property analysis failed');\n      }\n    } catch (err) {\n      setError('Error analyzing properties: ' + err.message);\n    } finally {\n      setIsAnalyzingProperties(false);\n    }\n  };\n\n  const startAnalysis = async () => {\n    setIsAnalyzing(true);\n    setError(null);\n    setAnalysisProgress(null);\n    \n    try {\n      const dateRange = getDateRangeFromTimeframe(config.timeframe);\n      \n      const requestBody = {\n        timeframe_start: dateRange.start,\n        timeframe_end: dateRange.end,\n        min_cohort_size: config.min_cohort_size,\n        force_recalculate: config.force_recalculate\n      };\n      \n      if (propertyAnalysis) {\n        requestBody.existing_property_analysis = propertyAnalysis;\n      }\n      \n      const response = await fetch('/api/conversion-probability/start-analysis', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        setCurrentAnalysis(data.data.analysis_id);\n        \n        if (data.data.cached) {\n          setIsAnalyzing(false);\n          setSuccess('Using cached analysis results!');\n          loadAnalysisResults(data.data.analysis_id);\n        } else {\n          setSuccess(`Analysis started! Estimated duration: ${data.data.estimated_duration_minutes} minutes`);\n        }\n      } else {\n        setError(data.error || 'Failed to start analysis');\n        setIsAnalyzing(false);\n      }\n    } catch (err) {\n      setError('Error starting analysis: ' + err.message);\n      setIsAnalyzing(false);\n    }\n  };\n\n  // NEW: Run new hierarchical analysis\n  const runNewHierarchicalAnalysis = async () => {\n    setIsRunningNewAnalysis(true);\n    setError(null);\n    setAnalysisResults(null); // Clear previous results\n    \n    try {\n      // NEW: Don't send any timeframe - let the backend use the default comprehensive range (2024-01-01 to today)\n      const requestBody = {}; // Empty - will use 2024-01-01 to today automatically\n      \n      const response = await fetch('/api/conversion-probability/run-new-hierarchical-analysis', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        // Results are returned immediately since the new pipeline runs synchronously\n        setSuccess(`✨ New hierarchical analysis completed! ${data.data.timeframe_description} - Processed ${data.data.total_combinations} segments with ${data.data.rollup_percentage.toFixed(1)}% rollup rate.`);\n        \n        // Load the results from the file (they were saved to latest_analysis.json)\n        // We can either use the analysis_id or just load the latest results\n        await loadLatestAnalysisResults();\n        \n        // Auto-expand hierarchy section\n        setExpandedSections(prev => ({ ...prev, analysisHierarchy: true }));\n        \n      } else {\n        setError(data.error || 'New hierarchical analysis failed');\n      }\n    } catch (err) {\n      setError('Error running new hierarchical analysis: ' + err.message);\n    } finally {\n      setIsRunningNewAnalysis(false);\n    }\n  };\n\n  // Helper function to load latest analysis results (for new pipeline)\n  const loadLatestAnalysisResults = async () => {\n    try {\n      // Since the new pipeline saves to latest_analysis.json, we can try to load it directly\n      // or use a generic endpoint that loads the latest\n      const response = await fetch(`/api/conversion-probability/results/latest`);\n      let data = await response.json();\n      \n      if (!data.success) {\n        // Fallback: get available analyses and load the most recent one\n        const analysesResponse = await fetch('/api/conversion-probability/analyses');\n        const analysesData = await analysesResponse.json();\n        \n        if (analysesData.success && analysesData.data.files.length > 0) {\n          // Get the most recent analysis\n          const mostRecentAnalysis = analysesData.data.files[0]; // Assumes they're sorted by date\n          data = await (await fetch(`/api/conversion-probability/results/${mostRecentAnalysis.analysis_id}`)).json();\n        }\n      }\n      \n      if (data.success) {\n        setAnalysisResults(data.data);\n        loadAvailableAnalyses();\n      }\n    } catch (err) {\n      console.error('Error loading latest analysis results:', err);\n      // Try alternative approach - reload the page to pick up the new file\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    }\n  };\n\n  const toggleSection = (section) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n\n  return {\n    // State\n    config,\n    currentAnalysis,\n    analysisProgress,\n    analysisResults,\n    isAnalyzing,\n    isRunningNewAnalysis, // NEW\n    propertyAnalysis,\n    isAnalyzingProperties,\n    error,\n    success,\n    expandedSections,\n    availableAnalyses,\n\n    // Actions\n    setConfig,\n    setError,\n    setSuccess,\n    analyzeProperties,\n    startAnalysis,\n    runNewHierarchicalAnalysis, // NEW\n    toggleSection\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}