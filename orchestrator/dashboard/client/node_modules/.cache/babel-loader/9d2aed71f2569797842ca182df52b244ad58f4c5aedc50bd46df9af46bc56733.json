{"ast":null,"code":"import React from'react';// Timeframe options configuration\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";export const timeframeOptions=[{value:'all',label:'All Time',description:'Analyze all historical data'},{value:'1month',label:'Last 1 Month',description:'Last 30 days'},{value:'3months',label:'Last 3 Months',description:'Last 90 days'},{value:'6months',label:'Last 6 Months',description:'Last 180 days'},{value:'1year',label:'Last 1 Year',description:'Last 365 days'}];// Helper function to calculate date range from timeframe\nexport const getDateRangeFromTimeframe=timeframe=>{if(timeframe==='all'){return{start:null,end:null};}const end=new Date();const start=new Date('2024-01-01');// Always start from Jan 1, 2024 to ensure comprehensive coverage\n// Note: We now always start from 2024-01-01 and go to today to ensure all products are included\n// This prevents newer products from being excluded due to narrow date windows\nreturn{start:start.toISOString().split('T')[0],end:end.toISOString().split('T')[0]};};// Formatting functions\nexport const formatPercentage=value=>{return\"\".concat((value*100).toFixed(2),\"%\");};export const formatDate=dateString=>{return new Date(dateString).toLocaleDateString();};export const formatAppStore=store=>{const storeMap={'APP_STORE':'App Store','PLAY_STORE':'Play Store','STRIPE':'Stripe'};return storeMap[store]||store;};// Format segment ID to show first4...last4 format\nexport const formatSegmentId=segmentId=>{if(!segmentId)return'No ID';if(segmentId.length<=8)return segmentId;return\"\".concat(segmentId.slice(0,4),\"...\").concat(segmentId.slice(-4));};// Helper function to generate consistent color from UUID\nconst getColorFromUUID=uuid=>{if(!uuid)return{bg:'bg-gray-100',text:'text-gray-800',border:'border-gray-200',darkBg:'dark:bg-gray-900',darkText:'dark:text-gray-200',darkBorder:'dark:border-gray-700'};// Create a simple hash from the UUID\nlet hash=0;for(let i=0;i<uuid.length;i++){const char=uuid.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32-bit integer\n}// Use the hash to select from a set of colors that work well together\nconst colors=[{bg:'bg-blue-100',text:'text-blue-800',border:'border-blue-200',darkBg:'dark:bg-blue-900',darkText:'dark:text-blue-200',darkBorder:'dark:border-blue-700'},{bg:'bg-green-100',text:'text-green-800',border:'border-green-200',darkBg:'dark:bg-green-900',darkText:'dark:text-green-200',darkBorder:'dark:border-green-700'},{bg:'bg-purple-100',text:'text-purple-800',border:'border-purple-200',darkBg:'dark:bg-purple-900',darkText:'dark:text-purple-200',darkBorder:'dark:border-purple-700'},{bg:'bg-red-100',text:'text-red-800',border:'border-red-200',darkBg:'dark:bg-red-900',darkText:'dark:text-red-200',darkBorder:'dark:border-red-700'},{bg:'bg-yellow-100',text:'text-yellow-800',border:'border-yellow-200',darkBg:'dark:bg-yellow-900',darkText:'dark:text-yellow-200',darkBorder:'dark:border-yellow-700'},{bg:'bg-indigo-100',text:'text-indigo-800',border:'border-indigo-200',darkBg:'dark:bg-indigo-900',darkText:'dark:text-indigo-200',darkBorder:'dark:border-indigo-700'},{bg:'bg-pink-100',text:'text-pink-800',border:'border-pink-200',darkBg:'dark:bg-pink-900',darkText:'dark:text-pink-200',darkBorder:'dark:border-pink-700'},{bg:'bg-cyan-100',text:'text-cyan-800',border:'border-cyan-200',darkBg:'dark:bg-cyan-900',darkText:'dark:text-cyan-200',darkBorder:'dark:border-cyan-700'},{bg:'bg-emerald-100',text:'text-emerald-800',border:'border-emerald-200',darkBg:'dark:bg-emerald-900',darkText:'dark:text-emerald-200',darkBorder:'dark:border-emerald-700'},{bg:'bg-orange-100',text:'text-orange-800',border:'border-orange-200',darkBg:'dark:bg-orange-900',darkText:'dark:text-orange-200',darkBorder:'dark:border-orange-700'}];const colorIndex=Math.abs(hash)%colors.length;return colors[colorIndex];};// Create segment ID badge component\nexport const getSegmentIdBadge=function(segmentId){let label=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Segment ID';const colors=getColorFromUUID(segmentId);return/*#__PURE__*/_jsxs(\"span\",{className:\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium \".concat(colors.bg,\" \").concat(colors.text,\" \").concat(colors.darkBg,\" \").concat(colors.darkText,\" \").concat(colors.border,\" \").concat(colors.darkBorder,\" border\"),children:[/*#__PURE__*/_jsxs(\"span\",{className:\"mr-1\",children:[label,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"font-mono\",children:formatSegmentId(segmentId)})]});};// Create rollup target ID badge component\nexport const getRollupTargetIdBadge=function(targetSegmentId){let label=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Target';const colors=getColorFromUUID(targetSegmentId);return/*#__PURE__*/_jsxs(\"span\",{className:\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium \".concat(colors.bg,\" \").concat(colors.text,\" \").concat(colors.darkBg,\" \").concat(colors.darkText,\" \").concat(colors.border,\" \").concat(colors.darkBorder,\" border\"),children:[/*#__PURE__*/_jsxs(\"span\",{className:\"mr-1\",children:[\"\\u2192 \",label,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"font-mono\",children:formatSegmentId(targetSegmentId)})]});};// Load saved state from localStorage\nexport const loadSavedState=()=>{try{const savedConfig=localStorage.getItem('conversionProbability_config');const savedExpandedSections=localStorage.getItem('conversionProbability_expandedSections');return{config:savedConfig?JSON.parse(savedConfig):{timeframe:'all',min_cohort_size:50,force_recalculate:false,min_price_samples:100},expandedSections:savedExpandedSections?JSON.parse(savedExpandedSections):{propertyAnalysis:false,analysisHierarchy:true}};}catch(err){console.error('Error loading saved state:',err);return{config:{timeframe:'all',min_cohort_size:50,force_recalculate:false,min_price_samples:100},expandedSections:{propertyAnalysis:false,analysisHierarchy:true}};}};// Function to create segment-specific rollup data for individual segments\nexport const createSegmentRollupData=segment=>{// Check for any signs of rollup having occurred\nconst hasPropertiesDropped=segment.cohort.properties_dropped&&segment.cohort.properties_dropped.length>0;const hasRollupTarget=segment.cohort.rollup_target;const hasRollupReason=segment.cohort.rollup_reason;const hasOriginalSize=segment.cohort.original_cohort_size&&segment.cohort.original_cohort_size!==segment.cohort.cohort_size;const hasAnyRollup=hasPropertiesDropped||hasRollupTarget||hasRollupReason||hasOriginalSize;if(!hasAnyRollup){// Even when no rollup, return a valid structure showing this is a direct segment\nreturn{totalSegments:1,rolledUpSegments:0,calculatedSegments:1,rollupTargets:{},segmentDetails:[{segmentId:segment.cohort.segment_id||'unknown',productId:segment.cohort.product_id,priceBucket:segment.cohort.price_bucket,region:segment.cohort.region,country:segment.cohort.country,appStore:segment.cohort.app_store,originalUsers:segment.cohort.cohort_size,finalUsers:segment.cohort.cohort_size,hasRollup:false,rollupTarget:null,rollupDescription:'No rollup required - segment had sufficient data',propertiesDropped:[]}]};}// Build rollup information\nconst rollupTargetName=segment.cohort.rollup_target||'Expanded Segment';return{totalSegments:1,// This represents 1 final segment\nrolledUpSegments:1,// This segment had rollup applied\ncalculatedSegments:0,rollupTargets:{[rollupTargetName]:[{segmentId:segment.cohort.segment_id||'unknown',productId:segment.cohort.product_id,priceBucket:segment.cohort.price_bucket,region:segment.cohort.region,country:segment.cohort.country,appStore:segment.cohort.app_store,originalUsers:segment.cohort.original_cohort_size||segment.cohort.cohort_size,finalUsers:segment.cohort.cohort_size,propertiesDropped:segment.cohort.properties_dropped||[],rollupReason:segment.cohort.rollup_reason||'Segment expanded for better statistics',rollupTarget:segment.cohort.rollup_target_segment_id||segment.cohort.rollup_target}]},segmentDetails:[{segmentId:segment.cohort.segment_id||'unknown',productId:segment.cohort.product_id,priceBucket:segment.cohort.price_bucket,region:segment.cohort.region,country:segment.cohort.country,appStore:segment.cohort.app_store,originalUsers:segment.cohort.original_cohort_size||segment.cohort.cohort_size,finalUsers:segment.cohort.cohort_size,hasRollup:true,rollupTarget:segment.cohort.rollup_target_segment_id||rollupTargetName,rollupDescription:segment.cohort.rollup_reason||'Segment was expanded to include more data',propertiesDropped:segment.cohort.properties_dropped||[]}]};};// Helper function to generate status indicators with hover tooltips\nexport const getStatusIndicator=function(passesThreshold,rollupInfo){let level=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'segment';let rollupTarget=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(passesThreshold){return/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",children:\"\\u2705 PASSES\"});}// FIXED: Show the FINAL rollup target consistently with better fallback handling\nlet finalTarget=rollupTarget;// If no rollup target provided, try to extract from rollup info\nif(!finalTarget&&rollupInfo){if(rollupInfo.rollupReasons&&rollupInfo.rollupReasons.length>0){finalTarget=rollupInfo.rollupReasons[0];}else if(rollupInfo.rollupTarget){finalTarget=rollupInfo.rollupTarget;}}// FIXED: Always provide a fallback if no target is found\nif(!finalTarget||finalTarget.trim()===''){return/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\",children:\"\\u274C INSUFFICIENT DATA\"});}// FIXED: Normalize the final target to show simple, consistent names\nlet displayTarget=finalTarget;// Normalize to simple names\nif(finalTarget.includes('Country-wide')){displayTarget=finalTarget;// Keep country-wide as is\n}else if(finalTarget.includes('Tier 1')||finalTarget.includes('tier1')){displayTarget='Tier 1';}else if(finalTarget.includes('Tier 2')||finalTarget.includes('tier2')){displayTarget='Tier 2';}else if(finalTarget.includes('Tier 3')||finalTarget.includes('tier3')){displayTarget='Tier 3';}else if(finalTarget.includes('Tier 4')||finalTarget.includes('tier4')){displayTarget='Tier 4';}else if(finalTarget.includes('$')&&finalTarget.includes('-')){// Price bucket format like \"$95-$105\"\ndisplayTarget=finalTarget;}else{// Default to showing the target as-is, but ensure it's not empty\ndisplayTarget=finalTarget||'Unknown Target';}// Show FINAL rollup target\nconst tooltipContent=rollupInfo?/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium mb-1\",children:\"Rollup Details:\"}),/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u2022 Final destination: \",finalTarget]}),rollupInfo.finalUserCount&&/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u2022 Final user count: \",rollupInfo.finalUserCount.toLocaleString()]}),rollupInfo.propertiesDropped&&rollupInfo.propertiesDropped.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u2022 Properties dropped: \",rollupInfo.propertiesDropped.join(', ')]}),rollupInfo.rollupReasons&&rollupInfo.rollupReasons.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[\"\\u2022 Reason: \",rollupInfo.rollupReasons[0]]})]}):null;return/*#__PURE__*/_jsxs(\"div\",{className:\"relative group\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200 cursor-help\",children:[\"\\u2192 \",displayTarget]}),tooltipContent&&/*#__PURE__*/_jsxs(\"div\",{className:\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 text-xs rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 whitespace-nowrap max-w-xs\",children:[tooltipContent,/*#__PURE__*/_jsx(\"div\",{className:\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900 dark:border-t-gray-100\"})]})]});};export const buildHierarchicalStructure=(segments,minCohortSize)=>{// Economic tier mappings (updated to match backend with all 203 countries)\nconst economicTiers={// Tier 1: High-income developed countries (GDP per capita > $40,000)\n'tier1_high_income':[// North America & Oceania\n'US','CA','AU','NZ',// Western Europe\n'GB','IE','DE','FR','NL','BE','AT','CH','LU','DK','SE','NO','FI','IS',// Other high-income\n'IL','SG','HK','QA','AE','KW','BH','OM','SA',// Small wealthy territories & microstates\n'MC','LI','AD','MT','CY','IM','JE','GG','GI','BM','SM','KY','VI','AW','TC','VG','BQ','SX','MF','PM','AX','CW',// Overseas territories of wealthy countries\n'MQ','GP','RE','FO','GL'],// Tier 2: Upper-middle income & developed countries ($15,000-$40,000)\n'tier2_upper_middle':[// East Asia\n'JP','KR','TW','MO',// Southern & Eastern Europe  \n'IT','ES','PT','GR','SI','CZ','SK','EE','LV','LT','HR','HU','PL','RO','BG','MT',// Latin America (upper-middle)\n'UY','CR','PA','PR',// Other upper-middle\n'BN','MV','SC','MU','BB','BS','TT'],// Tier 3: Emerging economies & lower-middle income ($4,000-$15,000)\n'tier3_emerging':[// Latin America\n'BR','MX','AR','CL','CO','PE','EC','DO','JM','PY','GT','SV','HN','NI','BZ','VE','BO','GY','SR',// Asia-Pacific\n'CN','TH','MY','RU','TR','KZ','AZ','GE','AM','BY','UZ','KG','TJ','MN','FJ','TO','VU','PG','TL',// Africa (emerging)\n'ZA','NA','BW','MU','SC',// Europe (emerging)\n'RS','ME','MK','AL','BA','MD','UA','XK',// Caribbean\n'LC','GD','KN','AG','DM'],// Tier 4: Developing countries (GDP per capita < $4,000)\n'tier4_developing':[// South Asia\n'IN','PK','BD','LK','NP','BT','AF','MV',// Southeast Asia\n'ID','PH','VN','MM','KH','LA',// Middle East & North Africa\n'EG','MA','TN','DZ','LY','SD','LB','JO','PS','SY','IQ','IR','YE',// Sub-Saharan Africa\n'NG','KE','GH','TZ','UG','ET','RW','ZM','ZW','MW','MZ','AO','CM','CI','SN','ML','BF','NE','TD','CF','CD','CG','GA','GQ','ST','CV','GM','GW','SL','LR','BJ','TG','GH','BI','DJ','SO','ER','SS','MR','MG','KM','MU','SZ','LS',// Caribbean & Pacific (developing)\n'HT','CU','NC','PF','AS','GU','FM','MH','PW','NR','TV','KI','SB','WS','ST','CV']};const getEconomicTier=country=>{for(const[tier,countries]of Object.entries(economicTiers)){if(countries.includes(country)){return\"Tier \".concat(tier.split('_')[0].replace('tier',''));}}return'Tier 4';};// Helper function to generate deterministic segment ID based on segment properties\nconst generateSegmentId=properties=>{// Create a deterministic hash based on the segment properties\nconst propertyString=Object.keys(properties).sort().map(key=>\"\".concat(key,\":\").concat(properties[key]||'null')).join('|');// Simple hash function for demo - in production you might want a more robust one\nlet hash=0;for(let i=0;i<propertyString.length;i++){const char=propertyString.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32-bit integer\n}// Convert to positive number and create a UUID-like string\nconst positiveHash=Math.abs(hash);const segmentId=positiveHash.toString(16).padStart(8,'0');return\"\".concat(segmentId.slice(0,4),\"-\").concat(segmentId.slice(4,8),\"-seg-\").concat(Date.now().toString().slice(-4));};const hierarchy={};// Group by Product + Store + Price (Level 1)\nsegments.forEach(segment=>{const productId=segment.product_id;const appStore=segment.app_store||'Unknown Store';const priceRange=segment.price_bucket;const country=segment.country||'Unknown';const region=segment.region;const users=segment.user_count;// Use the backend's rollup information directly\nconst hasSufficientData=segment.has_sufficient_data;const propertiesDropped=segment.properties_dropped||[];const rollupDescription=segment.rollup_description||'';const rollupTarget=segment.rollup_target||null;// FINAL rollup target from backend\nconst finalUserCount=segment.final_user_count||users;const accuracyScore=segment.accuracy_score||'very_high';// Get segment ID from backend or generate one\nconst originalSegmentId=segment.segment_id||generateSegmentId({product_id:productId,app_store:appStore,price_bucket:priceRange,country:country,region:region});const economicTier=getEconomicTier(country);// Initialize Product+Store+Price level (Level 1)\nconst level1Key=\"\".concat(productId,\"|\").concat(appStore,\"|\").concat(priceRange);if(!hierarchy[level1Key]){// Generate segment ID for Level 1 (Product+Store+Price)\nconst level1SegmentId=generateSegmentId({product_id:productId,app_store:appStore,price_bucket:priceRange});hierarchy[level1Key]={productId:productId,appStore:appStore,priceRange:priceRange,segmentId:level1SegmentId,totalUsers:0,passesThreshold:false,rollupInfo:{hasRollups:false,rolledUpSegments:0,totalSegments:0,rollupReasons:new Set(),propertiesDropped:new Set(),finalUserCount:0,rollupTarget:null,rollupTargetSegmentId:null},economicTiers:{}};}hierarchy[level1Key].totalUsers+=users;hierarchy[level1Key].rollupInfo.totalSegments+=1;hierarchy[level1Key].rollupInfo.finalUserCount+=finalUserCount;if(!hasSufficientData||propertiesDropped.length>0){hierarchy[level1Key].rollupInfo.hasRollups=true;hierarchy[level1Key].rollupInfo.rolledUpSegments+=1;if(rollupDescription)hierarchy[level1Key].rollupInfo.rollupReasons.add(rollupDescription);if(rollupTarget)hierarchy[level1Key].rollupInfo.rollupTarget=rollupTarget;propertiesDropped.forEach(prop=>hierarchy[level1Key].rollupInfo.propertiesDropped.add(prop));}// Initialize economic tier level (Level 2)\nconst level2Key=\"\".concat(level1Key,\"|\").concat(economicTier);if(!hierarchy[level1Key].economicTiers[economicTier]){// Generate segment ID for Level 2 (Product+Store+Price+EconomicTier)\nconst level2SegmentId=generateSegmentId({product_id:productId,app_store:appStore,price_bucket:priceRange,economic_tier:economicTier});hierarchy[level1Key].economicTiers[economicTier]={tierName:economicTier,segmentId:level2SegmentId,totalUsers:0,passesThreshold:false,rollupInfo:{hasRollups:false,rolledUpSegments:0,totalSegments:0,rollupReasons:new Set(),propertiesDropped:new Set(),finalUserCount:0,rollupTarget:null,rollupTargetSegmentId:null},countries:{}};}hierarchy[level1Key].economicTiers[economicTier].totalUsers+=users;hierarchy[level1Key].economicTiers[economicTier].rollupInfo.totalSegments+=1;hierarchy[level1Key].economicTiers[economicTier].rollupInfo.finalUserCount+=finalUserCount;if(!hasSufficientData||propertiesDropped.length>0){hierarchy[level1Key].economicTiers[economicTier].rollupInfo.hasRollups=true;hierarchy[level1Key].economicTiers[economicTier].rollupInfo.rolledUpSegments+=1;if(rollupDescription)hierarchy[level1Key].economicTiers[economicTier].rollupInfo.rollupReasons.add(rollupDescription);if(rollupTarget)hierarchy[level1Key].economicTiers[economicTier].rollupInfo.rollupTarget=rollupTarget;propertiesDropped.forEach(prop=>hierarchy[level1Key].economicTiers[economicTier].rollupInfo.propertiesDropped.add(prop));}// Initialize country level (Level 3)\nif(!hierarchy[level1Key].economicTiers[economicTier].countries[country]){// Generate segment ID for Level 3 (Product+Store+Price+EconomicTier+Country)\nconst level3SegmentId=generateSegmentId({product_id:productId,app_store:appStore,price_bucket:priceRange,economic_tier:economicTier,country:country});hierarchy[level1Key].economicTiers[economicTier].countries[country]={countryName:country,segmentId:level3SegmentId,totalUsers:0,passesThreshold:false,rollupInfo:{hasRollups:false,rolledUpSegments:0,totalSegments:0,rollupReasons:new Set(),propertiesDropped:new Set(),finalUserCount:0,rollupTarget:null,rollupTargetSegmentId:null},regions:[]};}hierarchy[level1Key].economicTiers[economicTier].countries[country].totalUsers+=users;hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.totalSegments+=1;hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.finalUserCount+=finalUserCount;if(!hasSufficientData||propertiesDropped.length>0){hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.hasRollups=true;hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.rolledUpSegments+=1;if(rollupDescription)hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.rollupReasons.add(rollupDescription);if(rollupTarget)hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.rollupTarget=rollupTarget;propertiesDropped.forEach(prop=>hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.propertiesDropped.add(prop));}// Add region if it exists (Level 4)\nif(region){// Use original segment ID from backend or generate Level 4 segment ID\nconst level4SegmentId=originalSegmentId;// Determine rollup target segment ID based on rollup logic\nlet rollupTargetSegmentId=null;if(!hasSufficientData||propertiesDropped.length>0){// If this segment rolls up, determine which level it rolls up to\nif(rollupTarget&&rollupTarget.includes('Country-wide')){// Rolls up to country level (Level 3)\nrollupTargetSegmentId=hierarchy[level1Key].economicTiers[economicTier].countries[country].segmentId;}else if(rollupTarget&&(rollupTarget.includes('Tier')||rollupTarget.includes('tier'))){// Rolls up to economic tier level (Level 2)\nrollupTargetSegmentId=hierarchy[level1Key].economicTiers[economicTier].segmentId;}else{// Rolls up to product+store+price level (Level 1)\nrollupTargetSegmentId=hierarchy[level1Key].segmentId;}}hierarchy[level1Key].economicTiers[economicTier].countries[country].regions.push({name:region,segmentId:level4SegmentId,rollupTargetSegmentId:rollupTargetSegmentId,users:users,passes:hasSufficientData&&propertiesDropped.length===0,rollupTarget:rollupTarget,rollupReason:rollupDescription,accuracyScore:accuracyScore,finalUserCount:finalUserCount,originalUserCount:users,propertiesDropped:propertiesDropped});}});// Calculate pass/fail status and assign rollup target segment IDs for each level\nObject.keys(hierarchy).forEach(level1Key=>{const level1Data=hierarchy[level1Key];level1Data.passesThreshold=level1Data.totalUsers>=minCohortSize;// Convert Sets to Arrays for easier use in UI\nlevel1Data.rollupInfo.rollupReasons=Array.from(level1Data.rollupInfo.rollupReasons);level1Data.rollupInfo.propertiesDropped=Array.from(level1Data.rollupInfo.propertiesDropped);// If Level 1 doesn't pass, it can't roll up anywhere (it's the ceiling)\nif(!level1Data.passesThreshold){level1Data.rollupInfo.rollupTargetSegmentId=null;// Cannot roll up beyond this level\n}Object.keys(level1Data.economicTiers).forEach(tierName=>{const tierData=level1Data.economicTiers[tierName];tierData.passesThreshold=tierData.totalUsers>=minCohortSize;// Convert Sets to Arrays for easier use in UI\ntierData.rollupInfo.rollupReasons=Array.from(tierData.rollupInfo.rollupReasons);tierData.rollupInfo.propertiesDropped=Array.from(tierData.rollupInfo.propertiesDropped);// If tier doesn't pass, it rolls up to Level 1 (Product+Store+Price)\nif(!tierData.passesThreshold){tierData.rollupInfo.rollupTargetSegmentId=level1Data.segmentId;}Object.keys(tierData.countries).forEach(country=>{const countryData=tierData.countries[country];countryData.passesThreshold=countryData.totalUsers>=minCohortSize;// Convert Sets to Arrays for easier use in UI\ncountryData.rollupInfo.rollupReasons=Array.from(countryData.rollupInfo.rollupReasons);countryData.rollupInfo.propertiesDropped=Array.from(countryData.rollupInfo.propertiesDropped);// If country doesn't pass, it rolls up to Level 2 (Economic Tier)\nif(!countryData.passesThreshold){countryData.rollupInfo.rollupTargetSegmentId=tierData.segmentId;}});});});return hierarchy;};","map":{"version":3,"names":["React","jsxs","_jsxs","jsx","_jsx","timeframeOptions","value","label","description","getDateRangeFromTimeframe","timeframe","start","end","Date","toISOString","split","formatPercentage","concat","toFixed","formatDate","dateString","toLocaleDateString","formatAppStore","store","storeMap","formatSegmentId","segmentId","length","slice","getColorFromUUID","uuid","bg","text","border","darkBg","darkText","darkBorder","hash","i","char","charCodeAt","colors","colorIndex","Math","abs","getSegmentIdBadge","arguments","undefined","className","children","getRollupTargetIdBadge","targetSegmentId","loadSavedState","savedConfig","localStorage","getItem","savedExpandedSections","config","JSON","parse","min_cohort_size","force_recalculate","min_price_samples","expandedSections","propertyAnalysis","analysisHierarchy","err","console","error","createSegmentRollupData","segment","hasPropertiesDropped","cohort","properties_dropped","hasRollupTarget","rollup_target","hasRollupReason","rollup_reason","hasOriginalSize","original_cohort_size","cohort_size","hasAnyRollup","totalSegments","rolledUpSegments","calculatedSegments","rollupTargets","segmentDetails","segment_id","productId","product_id","priceBucket","price_bucket","region","country","appStore","app_store","originalUsers","finalUsers","hasRollup","rollupTarget","rollupDescription","propertiesDropped","rollupTargetName","rollupReason","rollup_target_segment_id","getStatusIndicator","passesThreshold","rollupInfo","level","finalTarget","rollupReasons","trim","displayTarget","includes","tooltipContent","finalUserCount","toLocaleString","join","buildHierarchicalStructure","segments","minCohortSize","economicTiers","getEconomicTier","tier","countries","Object","entries","replace","generateSegmentId","properties","propertyString","keys","sort","map","key","positiveHash","toString","padStart","now","hierarchy","forEach","priceRange","users","user_count","hasSufficientData","has_sufficient_data","rollup_description","final_user_count","accuracyScore","accuracy_score","originalSegmentId","economicTier","level1Key","level1SegmentId","totalUsers","hasRollups","Set","rollupTargetSegmentId","add","prop","level2Key","level2SegmentId","economic_tier","tierName","level3SegmentId","countryName","regions","level4SegmentId","push","name","passes","originalUserCount","level1Data","Array","from","tierData","countryData"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/conversion_probability/utils/conversionUtils.js"],"sourcesContent":["import React from 'react';\n\n// Timeframe options configuration\nexport const timeframeOptions = [\n  { value: 'all', label: 'All Time', description: 'Analyze all historical data' },\n  { value: '1month', label: 'Last 1 Month', description: 'Last 30 days' },\n  { value: '3months', label: 'Last 3 Months', description: 'Last 90 days' },\n  { value: '6months', label: 'Last 6 Months', description: 'Last 180 days' },\n  { value: '1year', label: 'Last 1 Year', description: 'Last 365 days' }\n];\n\n// Helper function to calculate date range from timeframe\nexport const getDateRangeFromTimeframe = (timeframe) => {\n  if (timeframe === 'all') {\n    return { start: null, end: null };\n  }\n  \n  const end = new Date();\n  const start = new Date('2024-01-01'); // Always start from Jan 1, 2024 to ensure comprehensive coverage\n  \n  // Note: We now always start from 2024-01-01 and go to today to ensure all products are included\n  // This prevents newer products from being excluded due to narrow date windows\n  \n  return {\n    start: start.toISOString().split('T')[0],\n    end: end.toISOString().split('T')[0]\n  };\n};\n\n// Formatting functions\nexport const formatPercentage = (value) => {\n  return `${(value * 100).toFixed(2)}%`;\n};\n\nexport const formatDate = (dateString) => {\n  return new Date(dateString).toLocaleDateString();\n};\n\nexport const formatAppStore = (store) => {\n  const storeMap = {\n    'APP_STORE': 'App Store',\n    'PLAY_STORE': 'Play Store', \n    'STRIPE': 'Stripe'\n  };\n  return storeMap[store] || store;\n};\n\n// Format segment ID to show first4...last4 format\nexport const formatSegmentId = (segmentId) => {\n  if (!segmentId) return 'No ID';\n  if (segmentId.length <= 8) return segmentId;\n  return `${segmentId.slice(0, 4)}...${segmentId.slice(-4)}`;\n};\n\n// Helper function to generate consistent color from UUID\nconst getColorFromUUID = (uuid) => {\n  if (!uuid) return { bg: 'bg-gray-100', text: 'text-gray-800', border: 'border-gray-200', darkBg: 'dark:bg-gray-900', darkText: 'dark:text-gray-200', darkBorder: 'dark:border-gray-700' };\n  \n  // Create a simple hash from the UUID\n  let hash = 0;\n  for (let i = 0; i < uuid.length; i++) {\n    const char = uuid.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  // Use the hash to select from a set of colors that work well together\n  const colors = [\n    { bg: 'bg-blue-100', text: 'text-blue-800', border: 'border-blue-200', darkBg: 'dark:bg-blue-900', darkText: 'dark:text-blue-200', darkBorder: 'dark:border-blue-700' },\n    { bg: 'bg-green-100', text: 'text-green-800', border: 'border-green-200', darkBg: 'dark:bg-green-900', darkText: 'dark:text-green-200', darkBorder: 'dark:border-green-700' },\n    { bg: 'bg-purple-100', text: 'text-purple-800', border: 'border-purple-200', darkBg: 'dark:bg-purple-900', darkText: 'dark:text-purple-200', darkBorder: 'dark:border-purple-700' },\n    { bg: 'bg-red-100', text: 'text-red-800', border: 'border-red-200', darkBg: 'dark:bg-red-900', darkText: 'dark:text-red-200', darkBorder: 'dark:border-red-700' },\n    { bg: 'bg-yellow-100', text: 'text-yellow-800', border: 'border-yellow-200', darkBg: 'dark:bg-yellow-900', darkText: 'dark:text-yellow-200', darkBorder: 'dark:border-yellow-700' },\n    { bg: 'bg-indigo-100', text: 'text-indigo-800', border: 'border-indigo-200', darkBg: 'dark:bg-indigo-900', darkText: 'dark:text-indigo-200', darkBorder: 'dark:border-indigo-700' },\n    { bg: 'bg-pink-100', text: 'text-pink-800', border: 'border-pink-200', darkBg: 'dark:bg-pink-900', darkText: 'dark:text-pink-200', darkBorder: 'dark:border-pink-700' },\n    { bg: 'bg-cyan-100', text: 'text-cyan-800', border: 'border-cyan-200', darkBg: 'dark:bg-cyan-900', darkText: 'dark:text-cyan-200', darkBorder: 'dark:border-cyan-700' },\n    { bg: 'bg-emerald-100', text: 'text-emerald-800', border: 'border-emerald-200', darkBg: 'dark:bg-emerald-900', darkText: 'dark:text-emerald-200', darkBorder: 'dark:border-emerald-700' },\n    { bg: 'bg-orange-100', text: 'text-orange-800', border: 'border-orange-200', darkBg: 'dark:bg-orange-900', darkText: 'dark:text-orange-200', darkBorder: 'dark:border-orange-700' }\n  ];\n  \n  const colorIndex = Math.abs(hash) % colors.length;\n  return colors[colorIndex];\n};\n\n// Create segment ID badge component\nexport const getSegmentIdBadge = (segmentId, label = 'Segment ID') => {\n  const colors = getColorFromUUID(segmentId);\n  \n  return (\n    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${colors.bg} ${colors.text} ${colors.darkBg} ${colors.darkText} ${colors.border} ${colors.darkBorder} border`}>\n      <span className=\"mr-1\">{label}:</span>\n      <span className=\"font-mono\">{formatSegmentId(segmentId)}</span>\n    </span>\n  );\n};\n\n// Create rollup target ID badge component\nexport const getRollupTargetIdBadge = (targetSegmentId, label = 'Target') => {\n  const colors = getColorFromUUID(targetSegmentId);\n  \n  return (\n    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${colors.bg} ${colors.text} ${colors.darkBg} ${colors.darkText} ${colors.border} ${colors.darkBorder} border`}>\n      <span className=\"mr-1\">→ {label}:</span>\n      <span className=\"font-mono\">{formatSegmentId(targetSegmentId)}</span>\n    </span>\n  );\n};\n\n// Load saved state from localStorage\nexport const loadSavedState = () => {\n  try {\n    const savedConfig = localStorage.getItem('conversionProbability_config');\n    const savedExpandedSections = localStorage.getItem('conversionProbability_expandedSections');\n    \n    return {\n      config: savedConfig ? JSON.parse(savedConfig) : {\n        timeframe: 'all',\n        min_cohort_size: 50,\n        force_recalculate: false,\n        min_price_samples: 100\n      },\n      expandedSections: savedExpandedSections ? JSON.parse(savedExpandedSections) : {\n        propertyAnalysis: false,\n        analysisHierarchy: true\n      }\n    };\n  } catch (err) {\n    console.error('Error loading saved state:', err);\n    return {\n      config: {\n        timeframe: 'all',\n        min_cohort_size: 50,\n        force_recalculate: false,\n        min_price_samples: 100\n      },\n      expandedSections: {\n        propertyAnalysis: false,\n        analysisHierarchy: true\n      }\n    };\n  }\n};\n\n// Function to create segment-specific rollup data for individual segments\nexport const createSegmentRollupData = (segment) => {\n  // Check for any signs of rollup having occurred\n  const hasPropertiesDropped = segment.cohort.properties_dropped && segment.cohort.properties_dropped.length > 0;\n  const hasRollupTarget = segment.cohort.rollup_target;\n  const hasRollupReason = segment.cohort.rollup_reason;\n  const hasOriginalSize = segment.cohort.original_cohort_size && segment.cohort.original_cohort_size !== segment.cohort.cohort_size;\n  \n  const hasAnyRollup = hasPropertiesDropped || hasRollupTarget || hasRollupReason || hasOriginalSize;\n  \n  if (!hasAnyRollup) {\n    // Even when no rollup, return a valid structure showing this is a direct segment\n    return {\n      totalSegments: 1,\n      rolledUpSegments: 0,\n      calculatedSegments: 1,\n      rollupTargets: {},\n      segmentDetails: [{\n        segmentId: segment.cohort.segment_id || 'unknown',\n        productId: segment.cohort.product_id,\n        priceBucket: segment.cohort.price_bucket,\n        region: segment.cohort.region,\n        country: segment.cohort.country,\n        appStore: segment.cohort.app_store,\n        originalUsers: segment.cohort.cohort_size,\n        finalUsers: segment.cohort.cohort_size,\n        hasRollup: false,\n        rollupTarget: null,\n        rollupDescription: 'No rollup required - segment had sufficient data',\n        propertiesDropped: []\n      }]\n    };\n  }\n  \n  // Build rollup information\n  const rollupTargetName = segment.cohort.rollup_target || 'Expanded Segment';\n  \n  return {\n    totalSegments: 1, // This represents 1 final segment\n    rolledUpSegments: 1, // This segment had rollup applied\n    calculatedSegments: 0,\n    rollupTargets: {\n      [rollupTargetName]: [{\n        segmentId: segment.cohort.segment_id || 'unknown',\n        productId: segment.cohort.product_id,\n        priceBucket: segment.cohort.price_bucket,\n        region: segment.cohort.region,\n        country: segment.cohort.country,\n        appStore: segment.cohort.app_store,\n        originalUsers: segment.cohort.original_cohort_size || segment.cohort.cohort_size,\n        finalUsers: segment.cohort.cohort_size,\n        propertiesDropped: segment.cohort.properties_dropped || [],\n        rollupReason: segment.cohort.rollup_reason || 'Segment expanded for better statistics',\n        rollupTarget: segment.cohort.rollup_target_segment_id || segment.cohort.rollup_target\n      }]\n    },\n    segmentDetails: [{\n      segmentId: segment.cohort.segment_id || 'unknown',\n      productId: segment.cohort.product_id,\n      priceBucket: segment.cohort.price_bucket,\n      region: segment.cohort.region,\n      country: segment.cohort.country,\n      appStore: segment.cohort.app_store,\n      originalUsers: segment.cohort.original_cohort_size || segment.cohort.cohort_size,\n      finalUsers: segment.cohort.cohort_size,\n      hasRollup: true,\n      rollupTarget: segment.cohort.rollup_target_segment_id || rollupTargetName,\n      rollupDescription: segment.cohort.rollup_reason || 'Segment was expanded to include more data',\n      propertiesDropped: segment.cohort.properties_dropped || []\n    }]\n  };\n};\n\n// Helper function to generate status indicators with hover tooltips\nexport const getStatusIndicator = (passesThreshold, rollupInfo, level = 'segment', rollupTarget = null) => {\n  if (passesThreshold) {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n        ✅ PASSES\n      </span>\n    );\n  }\n  \n  // FIXED: Show the FINAL rollup target consistently with better fallback handling\n  let finalTarget = rollupTarget;\n  \n  // If no rollup target provided, try to extract from rollup info\n  if (!finalTarget && rollupInfo) {\n    if (rollupInfo.rollupReasons && rollupInfo.rollupReasons.length > 0) {\n      finalTarget = rollupInfo.rollupReasons[0];\n    } else if (rollupInfo.rollupTarget) {\n      finalTarget = rollupInfo.rollupTarget;\n    }\n  }\n  \n  // FIXED: Always provide a fallback if no target is found\n  if (!finalTarget || finalTarget.trim() === '') {\n    return (\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">\n        ❌ INSUFFICIENT DATA\n      </span>\n    );\n  }\n  \n  // FIXED: Normalize the final target to show simple, consistent names\n  let displayTarget = finalTarget;\n  \n  // Normalize to simple names\n  if (finalTarget.includes('Country-wide')) {\n    displayTarget = finalTarget; // Keep country-wide as is\n  } else if (finalTarget.includes('Tier 1') || finalTarget.includes('tier1')) {\n    displayTarget = 'Tier 1';\n  } else if (finalTarget.includes('Tier 2') || finalTarget.includes('tier2')) {\n    displayTarget = 'Tier 2';\n  } else if (finalTarget.includes('Tier 3') || finalTarget.includes('tier3')) {\n    displayTarget = 'Tier 3';\n  } else if (finalTarget.includes('Tier 4') || finalTarget.includes('tier4')) {\n    displayTarget = 'Tier 4';\n  } else if (finalTarget.includes('$') && finalTarget.includes('-')) {\n    // Price bucket format like \"$95-$105\"\n    displayTarget = finalTarget;\n  } else {\n    // Default to showing the target as-is, but ensure it's not empty\n    displayTarget = finalTarget || 'Unknown Target';\n  }\n  \n  // Show FINAL rollup target\n  const tooltipContent = rollupInfo ? (\n    <div className=\"text-xs\">\n      <div className=\"font-medium mb-1\">Rollup Details:</div>\n      <div>• Final destination: {finalTarget}</div>\n      {rollupInfo.finalUserCount && (\n        <div>• Final user count: {rollupInfo.finalUserCount.toLocaleString()}</div>\n      )}\n      {rollupInfo.propertiesDropped && rollupInfo.propertiesDropped.length > 0 && (\n        <div>• Properties dropped: {rollupInfo.propertiesDropped.join(', ')}</div>\n      )}\n      {rollupInfo.rollupReasons && rollupInfo.rollupReasons.length > 0 && (\n        <div>• Reason: {rollupInfo.rollupReasons[0]}</div>\n      )}\n    </div>\n  ) : null;\n  \n  return (\n    <div className=\"relative group\">\n      <span className=\"px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200 cursor-help\">\n        → {displayTarget}\n      </span>\n      \n      {/* Hover tooltip */}\n      {tooltipContent && (\n        <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900 text-xs rounded-lg shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 whitespace-nowrap max-w-xs\">\n          {tooltipContent}\n          <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900 dark:border-t-gray-100\"></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const buildHierarchicalStructure = (segments, minCohortSize) => {\n  // Economic tier mappings (updated to match backend with all 203 countries)\n  const economicTiers = {\n    // Tier 1: High-income developed countries (GDP per capita > $40,000)\n    'tier1_high_income': [\n      // North America & Oceania\n      'US', 'CA', 'AU', 'NZ',\n      // Western Europe\n      'GB', 'IE', 'DE', 'FR', 'NL', 'BE', 'AT', 'CH', 'LU', \n      'DK', 'SE', 'NO', 'FI', 'IS',\n      // Other high-income\n      'IL', 'SG', 'HK', 'QA', 'AE', 'KW', 'BH', 'OM', 'SA',\n      // Small wealthy territories & microstates\n      'MC', 'LI', 'AD', 'MT', 'CY', 'IM', 'JE', 'GG', 'GI', 'BM', 'SM',\n      'KY', 'VI', 'AW', 'TC', 'VG', 'BQ', 'SX', 'MF', 'PM', 'AX', 'CW',\n      // Overseas territories of wealthy countries\n      'MQ', 'GP', 'RE', 'FO', 'GL'\n    ],\n    \n    // Tier 2: Upper-middle income & developed countries ($15,000-$40,000)\n    'tier2_upper_middle': [\n      // East Asia\n      'JP', 'KR', 'TW', 'MO',\n      // Southern & Eastern Europe  \n      'IT', 'ES', 'PT', 'GR', 'SI', 'CZ', 'SK', 'EE', 'LV', 'LT',\n      'HR', 'HU', 'PL', 'RO', 'BG', 'MT',\n      // Latin America (upper-middle)\n      'UY', 'CR', 'PA', 'PR',\n      // Other upper-middle\n      'BN', 'MV', 'SC', 'MU', 'BB', 'BS', 'TT'\n    ],\n    \n    // Tier 3: Emerging economies & lower-middle income ($4,000-$15,000)\n    'tier3_emerging': [\n      // Latin America\n      'BR', 'MX', 'AR', 'CL', 'CO', 'PE', 'EC', 'DO', 'JM', 'PY', 'GT',\n      'SV', 'HN', 'NI', 'BZ', 'VE', 'BO', 'GY', 'SR',\n      // Asia-Pacific\n      'CN', 'TH', 'MY', 'RU', 'TR', 'KZ', 'AZ', 'GE', 'AM', 'BY',\n      'UZ', 'KG', 'TJ', 'MN', 'FJ', 'TO', 'VU', 'PG', 'TL',\n      // Africa (emerging)\n      'ZA', 'NA', 'BW', 'MU', 'SC',\n      // Europe (emerging)\n      'RS', 'ME', 'MK', 'AL', 'BA', 'MD', 'UA', 'XK',\n      // Caribbean\n      'LC', 'GD', 'KN', 'AG', 'DM'\n    ],\n    \n    // Tier 4: Developing countries (GDP per capita < $4,000)\n    'tier4_developing': [\n      // South Asia\n      'IN', 'PK', 'BD', 'LK', 'NP', 'BT', 'AF', 'MV',\n      // Southeast Asia\n      'ID', 'PH', 'VN', 'MM', 'KH', 'LA',\n      // Middle East & North Africa\n      'EG', 'MA', 'TN', 'DZ', 'LY', 'SD', 'LB', 'JO', 'PS', 'SY', 'IQ', 'IR', 'YE',\n      // Sub-Saharan Africa\n      'NG', 'KE', 'GH', 'TZ', 'UG', 'ET', 'RW', 'ZM', 'ZW', 'MW', 'MZ', 'AO',\n      'CM', 'CI', 'SN', 'ML', 'BF', 'NE', 'TD', 'CF', 'CD', 'CG', 'GA', 'GQ',\n      'ST', 'CV', 'GM', 'GW', 'SL', 'LR', 'BJ', 'TG', 'GH', 'BI', 'DJ', 'SO',\n      'ER', 'SS', 'MR', 'MG', 'KM', 'MU', 'SZ', 'LS',\n      // Caribbean & Pacific (developing)\n      'HT', 'CU', 'NC', 'PF', 'AS', 'GU', 'FM', 'MH', 'PW', 'NR', 'TV', 'KI',\n      'SB', 'WS', 'ST', 'CV'\n    ]\n  };\n\n  const getEconomicTier = (country) => {\n    for (const [tier, countries] of Object.entries(economicTiers)) {\n      if (countries.includes(country)) {\n        return `Tier ${tier.split('_')[0].replace('tier', '')}`;\n      }\n    }\n    return 'Tier 4';\n  };\n\n  // Helper function to generate deterministic segment ID based on segment properties\n  const generateSegmentId = (properties) => {\n    // Create a deterministic hash based on the segment properties\n    const propertyString = Object.keys(properties)\n      .sort()\n      .map(key => `${key}:${properties[key] || 'null'}`)\n      .join('|');\n    \n    // Simple hash function for demo - in production you might want a more robust one\n    let hash = 0;\n    for (let i = 0; i < propertyString.length; i++) {\n      const char = propertyString.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    \n    // Convert to positive number and create a UUID-like string\n    const positiveHash = Math.abs(hash);\n    const segmentId = positiveHash.toString(16).padStart(8, '0');\n    return `${segmentId.slice(0, 4)}-${segmentId.slice(4, 8)}-seg-${Date.now().toString().slice(-4)}`;\n  };\n\n  const hierarchy = {};\n\n  // Group by Product + Store + Price (Level 1)\n  segments.forEach(segment => {\n    const productId = segment.product_id;\n    const appStore = segment.app_store || 'Unknown Store';\n    const priceRange = segment.price_bucket;\n    const country = segment.country || 'Unknown';\n    const region = segment.region;\n    const users = segment.user_count;\n    \n    // Use the backend's rollup information directly\n    const hasSufficientData = segment.has_sufficient_data;\n    const propertiesDropped = segment.properties_dropped || [];\n    const rollupDescription = segment.rollup_description || '';\n    const rollupTarget = segment.rollup_target || null; // FINAL rollup target from backend\n    const finalUserCount = segment.final_user_count || users;\n    const accuracyScore = segment.accuracy_score || 'very_high';\n    \n    // Get segment ID from backend or generate one\n    const originalSegmentId = segment.segment_id || generateSegmentId({\n      product_id: productId,\n      app_store: appStore,\n      price_bucket: priceRange,\n      country: country,\n      region: region\n    });\n    \n    const economicTier = getEconomicTier(country);\n\n    // Initialize Product+Store+Price level (Level 1)\n    const level1Key = `${productId}|${appStore}|${priceRange}`;\n    if (!hierarchy[level1Key]) {\n      // Generate segment ID for Level 1 (Product+Store+Price)\n      const level1SegmentId = generateSegmentId({\n        product_id: productId,\n        app_store: appStore,\n        price_bucket: priceRange\n      });\n      \n      hierarchy[level1Key] = {\n        productId: productId,\n        appStore: appStore,\n        priceRange: priceRange,\n        segmentId: level1SegmentId,\n        totalUsers: 0,\n        passesThreshold: false,\n        rollupInfo: {\n          hasRollups: false,\n          rolledUpSegments: 0,\n          totalSegments: 0,\n          rollupReasons: new Set(),\n          propertiesDropped: new Set(),\n          finalUserCount: 0,\n          rollupTarget: null,\n          rollupTargetSegmentId: null\n        },\n        economicTiers: {}\n      };\n    }\n    hierarchy[level1Key].totalUsers += users;\n    hierarchy[level1Key].rollupInfo.totalSegments += 1;\n    hierarchy[level1Key].rollupInfo.finalUserCount += finalUserCount;\n    \n    if (!hasSufficientData || propertiesDropped.length > 0) {\n      hierarchy[level1Key].rollupInfo.hasRollups = true;\n      hierarchy[level1Key].rollupInfo.rolledUpSegments += 1;\n      if (rollupDescription) hierarchy[level1Key].rollupInfo.rollupReasons.add(rollupDescription);\n      if (rollupTarget) hierarchy[level1Key].rollupInfo.rollupTarget = rollupTarget;\n      propertiesDropped.forEach(prop => hierarchy[level1Key].rollupInfo.propertiesDropped.add(prop));\n    }\n\n    // Initialize economic tier level (Level 2)\n    const level2Key = `${level1Key}|${economicTier}`;\n    if (!hierarchy[level1Key].economicTiers[economicTier]) {\n      // Generate segment ID for Level 2 (Product+Store+Price+EconomicTier)\n      const level2SegmentId = generateSegmentId({\n        product_id: productId,\n        app_store: appStore,\n        price_bucket: priceRange,\n        economic_tier: economicTier\n      });\n      \n      hierarchy[level1Key].economicTiers[economicTier] = {\n        tierName: economicTier,\n        segmentId: level2SegmentId,\n        totalUsers: 0,\n        passesThreshold: false,\n        rollupInfo: {\n          hasRollups: false,\n          rolledUpSegments: 0,\n          totalSegments: 0,\n          rollupReasons: new Set(),\n          propertiesDropped: new Set(),\n          finalUserCount: 0,\n          rollupTarget: null,\n          rollupTargetSegmentId: null\n        },\n        countries: {}\n      };\n    }\n    hierarchy[level1Key].economicTiers[economicTier].totalUsers += users;\n    hierarchy[level1Key].economicTiers[economicTier].rollupInfo.totalSegments += 1;\n    hierarchy[level1Key].economicTiers[economicTier].rollupInfo.finalUserCount += finalUserCount;\n    \n    if (!hasSufficientData || propertiesDropped.length > 0) {\n      hierarchy[level1Key].economicTiers[economicTier].rollupInfo.hasRollups = true;\n      hierarchy[level1Key].economicTiers[economicTier].rollupInfo.rolledUpSegments += 1;\n      if (rollupDescription) hierarchy[level1Key].economicTiers[economicTier].rollupInfo.rollupReasons.add(rollupDescription);\n      if (rollupTarget) hierarchy[level1Key].economicTiers[economicTier].rollupInfo.rollupTarget = rollupTarget;\n      propertiesDropped.forEach(prop => hierarchy[level1Key].economicTiers[economicTier].rollupInfo.propertiesDropped.add(prop));\n    }\n\n    // Initialize country level (Level 3)\n    if (!hierarchy[level1Key].economicTiers[economicTier].countries[country]) {\n      // Generate segment ID for Level 3 (Product+Store+Price+EconomicTier+Country)\n      const level3SegmentId = generateSegmentId({\n        product_id: productId,\n        app_store: appStore,\n        price_bucket: priceRange,\n        economic_tier: economicTier,\n        country: country\n      });\n      \n      hierarchy[level1Key].economicTiers[economicTier].countries[country] = {\n        countryName: country,\n        segmentId: level3SegmentId,\n        totalUsers: 0,\n        passesThreshold: false,\n        rollupInfo: {\n          hasRollups: false,\n          rolledUpSegments: 0,\n          totalSegments: 0,\n          rollupReasons: new Set(),\n          propertiesDropped: new Set(),\n          finalUserCount: 0,\n          rollupTarget: null,\n          rollupTargetSegmentId: null\n        },\n        regions: []\n      };\n    }\n    hierarchy[level1Key].economicTiers[economicTier].countries[country].totalUsers += users;\n    hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.totalSegments += 1;\n    hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.finalUserCount += finalUserCount;\n    \n    if (!hasSufficientData || propertiesDropped.length > 0) {\n      hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.hasRollups = true;\n      hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.rolledUpSegments += 1;\n      if (rollupDescription) hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.rollupReasons.add(rollupDescription);\n      if (rollupTarget) hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.rollupTarget = rollupTarget;\n      propertiesDropped.forEach(prop => hierarchy[level1Key].economicTiers[economicTier].countries[country].rollupInfo.propertiesDropped.add(prop));\n    }\n\n    // Add region if it exists (Level 4)\n    if (region) {\n      // Use original segment ID from backend or generate Level 4 segment ID\n      const level4SegmentId = originalSegmentId;\n      \n      // Determine rollup target segment ID based on rollup logic\n      let rollupTargetSegmentId = null;\n      if (!hasSufficientData || propertiesDropped.length > 0) {\n        // If this segment rolls up, determine which level it rolls up to\n        if (rollupTarget && rollupTarget.includes('Country-wide')) {\n          // Rolls up to country level (Level 3)\n          rollupTargetSegmentId = hierarchy[level1Key].economicTiers[economicTier].countries[country].segmentId;\n        } else if (rollupTarget && (rollupTarget.includes('Tier') || rollupTarget.includes('tier'))) {\n          // Rolls up to economic tier level (Level 2)\n          rollupTargetSegmentId = hierarchy[level1Key].economicTiers[economicTier].segmentId;\n        } else {\n          // Rolls up to product+store+price level (Level 1)\n          rollupTargetSegmentId = hierarchy[level1Key].segmentId;\n        }\n      }\n      \n      hierarchy[level1Key].economicTiers[economicTier].countries[country].regions.push({\n        name: region,\n        segmentId: level4SegmentId,\n        rollupTargetSegmentId: rollupTargetSegmentId,\n        users: users,\n        passes: hasSufficientData && propertiesDropped.length === 0,\n        rollupTarget: rollupTarget,\n        rollupReason: rollupDescription,\n        accuracyScore: accuracyScore,\n        finalUserCount: finalUserCount,\n        originalUserCount: users,\n        propertiesDropped: propertiesDropped\n      });\n    }\n  });\n\n  // Calculate pass/fail status and assign rollup target segment IDs for each level\n  Object.keys(hierarchy).forEach(level1Key => {\n    const level1Data = hierarchy[level1Key];\n    level1Data.passesThreshold = level1Data.totalUsers >= minCohortSize;\n    \n    // Convert Sets to Arrays for easier use in UI\n    level1Data.rollupInfo.rollupReasons = Array.from(level1Data.rollupInfo.rollupReasons);\n    level1Data.rollupInfo.propertiesDropped = Array.from(level1Data.rollupInfo.propertiesDropped);\n    \n    // If Level 1 doesn't pass, it can't roll up anywhere (it's the ceiling)\n    if (!level1Data.passesThreshold) {\n      level1Data.rollupInfo.rollupTargetSegmentId = null; // Cannot roll up beyond this level\n    }\n\n    Object.keys(level1Data.economicTiers).forEach(tierName => {\n      const tierData = level1Data.economicTiers[tierName];\n      tierData.passesThreshold = tierData.totalUsers >= minCohortSize;\n      \n      // Convert Sets to Arrays for easier use in UI\n      tierData.rollupInfo.rollupReasons = Array.from(tierData.rollupInfo.rollupReasons);\n      tierData.rollupInfo.propertiesDropped = Array.from(tierData.rollupInfo.propertiesDropped);\n      \n      // If tier doesn't pass, it rolls up to Level 1 (Product+Store+Price)\n      if (!tierData.passesThreshold) {\n        tierData.rollupInfo.rollupTargetSegmentId = level1Data.segmentId;\n      }\n\n      Object.keys(tierData.countries).forEach(country => {\n        const countryData = tierData.countries[country];\n        countryData.passesThreshold = countryData.totalUsers >= minCohortSize;\n        \n        // Convert Sets to Arrays for easier use in UI\n        countryData.rollupInfo.rollupReasons = Array.from(countryData.rollupInfo.rollupReasons);\n        countryData.rollupInfo.propertiesDropped = Array.from(countryData.rollupInfo.propertiesDropped);\n        \n        // If country doesn't pass, it rolls up to Level 2 (Economic Tier)\n        if (!countryData.passesThreshold) {\n          countryData.rollupInfo.rollupTargetSegmentId = tierData.segmentId;\n        }\n      });\n    });\n  });\n\n  return hierarchy;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}