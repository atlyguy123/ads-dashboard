{"ast":null,"code":"var _jsxFileName = \"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/conversion_probability/AnalysisResultsHierarchy.jsx\";\nimport React from 'react';\nimport { BarChart3, Package, Store, DollarSign, TrendingUp, Globe, MapPin, CheckCircle, AlertTriangle } from 'lucide-react';\nimport { formatPercentage, formatAppStore } from './utils/conversionUtils';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnalysisResultsHierarchy = ({\n  analysisResults,\n  expandedSections,\n  onToggleSection\n}) => {\n  // Generate consistent colors for segment IDs based on hash\n  const getSegmentIdColor = segmentId => {\n    if (!segmentId) return '#6B7280';\n    let hash = 0;\n    for (let i = 0; i < segmentId.length; i++) {\n      hash = segmentId.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    const hue = Math.abs(hash) % 360;\n    return `hsl(${hue}, 65%, 50%)`;\n  };\n\n  // Format segment ID to show first 4 and last 4 characters\n  const formatSegmentIdShort = segmentId => {\n    if (!segmentId || segmentId.length <= 8) return segmentId;\n    return `${segmentId.substring(0, 4)}...${segmentId.substring(segmentId.length - 4)}`;\n  };\n\n  // Render segment ID badge with consistent color\n  const renderSegmentIdBadge = segmentId => {\n    if (!segmentId) return null;\n    const color = getSegmentIdColor(segmentId);\n    const shortId = formatSegmentIdShort(segmentId);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"inline-flex items-center px-2 py-1 rounded text-xs font-mono mx-1\",\n      style: {\n        backgroundColor: `${color}20`,\n        color: color,\n        border: `1px solid ${color}40`\n      },\n      children: [\"ID: \", shortId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  };\n  if (!analysisResults) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center text-gray-500 dark:text-gray-400 py-8\",\n      children: \"No analysis results available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Build hierarchy data with accurate statistics\n  const hierarchyData = {};\n  let totalSegmentsWithMetrics = 0;\n  let totalRollupSegments = 0;\n  if (analysisResults.conversion_probabilities) {\n    Object.entries(analysisResults.conversion_probabilities).forEach(([segmentId, segmentData]) => {\n      const cohort = segmentData.cohort || {};\n      const metrics = segmentData.metrics || {};\n      const productId = cohort.product_id;\n      const appStore = cohort.app_store || 'Unknown';\n      const priceRange = cohort.price_bucket;\n      const economicTier = cohort.economic_tier || '';\n      const country = cohort.country || '';\n      const region = cohort.region || '';\n      if (!productId || !priceRange) return;\n\n      // Determine if this segment has actual metrics vs is rolled up\n      const isRollup = cohort.properties_dropped && cohort.properties_dropped.length > 0;\n      const hasMetrics = !isRollup;\n      if (hasMetrics) totalSegmentsWithMetrics++;\n      if (isRollup) totalRollupSegments++;\n\n      // Determine hierarchy level based on what properties are specified\n      let hierarchyLevel = 'region';\n      if (!region) hierarchyLevel = 'country';\n      if (!country) hierarchyLevel = 'tier';\n      if (!economicTier) hierarchyLevel = 'price';\n\n      // Store segment at its appropriate level - but ALL segments get stored somewhere\n      const segmentKey = `${productId}|${appStore}|${priceRange}|${economicTier}|${country}|${region}`;\n      const segmentInfo = {\n        ...cohort,\n        ...metrics,\n        segment_id: cohort.segment_id || segmentId,\n        is_viable: hasMetrics,\n        trial_conversion_rate: metrics.trial_conversion_rate || 0,\n        trial_converted_count: metrics.trial_converted_count || 0,\n        trial_started_count: metrics.trial_started_count || 0,\n        rollup_target_segment_id: cohort.rollup_target_segment_id,\n        rollup_reason: cohort.rollup_reason,\n        hierarchy_level: hierarchyLevel\n      };\n\n      // Build nested hierarchy with aggregated statistics\n      if (!hierarchyData[productId]) {\n        hierarchyData[productId] = {\n          stores: {},\n          totalUsers: 0,\n          viableSegments: 0,\n          rollupSegments: 0\n        };\n      }\n      if (!hierarchyData[productId].stores[appStore]) {\n        hierarchyData[productId].stores[appStore] = {\n          prices: {},\n          totalUsers: 0,\n          viableSegments: 0,\n          rollupSegments: 0\n        };\n      }\n      if (!hierarchyData[productId].stores[appStore].prices[priceRange]) {\n        hierarchyData[productId].stores[appStore].prices[priceRange] = {\n          tiers: {},\n          totalUsers: 0,\n          viableSegments: 0,\n          rollupSegments: 0,\n          segment: hierarchyLevel === 'price' ? segmentInfo : null\n        };\n      }\n      if (!hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown']) {\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'] = {\n          countries: {},\n          totalUsers: 0,\n          viableSegments: 0,\n          rollupSegments: 0,\n          segment: hierarchyLevel === 'tier' ? segmentInfo : null\n        };\n      }\n      if (!hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown']) {\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'] = {\n          regions: {},\n          totalUsers: 0,\n          viableSegments: 0,\n          rollupSegments: 0,\n          segment: hierarchyLevel === 'country' ? segmentInfo : null\n        };\n      }\n\n      // ALL region-level segments get stored, whether viable or not\n      if (hierarchyLevel === 'region') {\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].regions[region || 'Unknown'] = segmentInfo;\n      }\n\n      // Aggregate user counts and statistics upward\n      const userCount = cohort.cohort_size || 0;\n\n      // Update counts at each level\n      hierarchyData[productId].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].prices[priceRange].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].totalUsers += userCount;\n\n      // Update statistics at each level\n      if (hasMetrics) {\n        hierarchyData[productId].viableSegments++;\n        hierarchyData[productId].stores[appStore].viableSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].viableSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].viableSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].viableSegments++;\n      }\n      if (isRollup) {\n        hierarchyData[productId].rollupSegments++;\n        hierarchyData[productId].stores[appStore].rollupSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].rollupSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].rollupSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].rollupSegments++;\n      }\n    });\n  }\n\n  // Render a single hierarchy line with proper indentation\n  const renderHierarchyLine = (icon, label, userCount, viableCount, rollupCount, indentLevel = 0, segmentData = null) => {\n    const indentStyle = {\n      marginLeft: `${indentLevel * 24}px`\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flex items-center justify-between py-1 px-3 hover:bg-gray-50 dark:hover:bg-gray-700/30 ${indentLevel % 2 === 0 ? 'bg-gray-25 dark:bg-gray-800/20' : 'bg-white dark:bg-gray-800'}`,\n      style: indentStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-2 min-w-0 flex-1\",\n        children: [icon, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-medium text-gray-900 dark:text-gray-100 truncate\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), segmentData && segmentData.segment_id && renderSegmentIdBadge(segmentData.segment_id), segmentData && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: segmentData.is_viable ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-green-600 dark:text-green-400 text-sm font-medium\",\n              children: [\"\\uD83C\\uDFAF \", formatPercentage(segmentData.trial_conversion_rate)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-blue-600 dark:text-blue-400 text-sm\",\n              children: [\"\\u2192 \", segmentData.trial_converted_count || 0, \"/\", segmentData.trial_started_count || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [segmentData.rollup_target_segment_id && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-red-600 dark:text-red-400 text-sm\",\n              children: [\"\\u2192 \", renderSegmentIdBadge(segmentData.rollup_target_segment_id)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 21\n            }, this), segmentData.rollup_reason && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-red-500 dark:text-red-400 text-xs italic\",\n              children: [\"(\", segmentData.rollup_reason, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 21\n            }, this), segmentData.properties_dropped && segmentData.properties_dropped.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-orange-500 dark:text-orange-400 text-xs\",\n              children: [\"Dropped: [\", segmentData.properties_dropped.join(', '), \"]\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 21\n            }, this), segmentData.rollup_description && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-gray-500 dark:text-gray-400 text-xs\",\n              children: segmentData.rollup_description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4 text-sm font-medium\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-600 dark:text-gray-400\",\n          children: [userCount.toLocaleString(), \" users\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), viableCount !== undefined && rollupCount !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-2\",\n          children: [viableCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-green-600 dark:text-green-400\",\n            children: [viableCount, \" viable\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 17\n          }, this), rollupCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-orange-600 dark:text-orange-400\",\n            children: [rollupCount, \" rollup\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), segmentData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: segmentData.is_viable ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium\",\n            children: \"\\u2705 VIABLE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 px-2 py-1 rounded-full text-xs font-medium\",\n            children: \"\\u274C ROLLUP\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white dark:bg-gray-800 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-600 to-purple-600 text-white\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-3\",\n          children: [/*#__PURE__*/_jsxDEV(BarChart3, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-xl font-bold\",\n              children: \"Hierarchical Analysis Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-blue-100 text-sm mt-1\",\n              children: \"Tree-based segment hierarchy with conversion metrics and rollup information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-6 text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold\",\n              children: totalSegmentsWithMetrics\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue-100\",\n              children: \"Viable Segments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 309,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold\",\n              children: totalRollupSegments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue-100\",\n              children: \"Rollup Segments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold\",\n              children: [totalSegmentsWithMetrics + totalRollupSegments > 0 ? Math.round(totalSegmentsWithMetrics / (totalSegmentsWithMetrics + totalRollupSegments) * 100) : 0, \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue-100\",\n              children: \"Coverage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"divide-y divide-gray-100 dark:divide-gray-700\",\n      children: Object.entries(hierarchyData).map(([productId, productData]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [renderHierarchyLine(/*#__PURE__*/_jsxDEV(Package, {\n          className: \"h-5 w-5 text-purple-600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }, this), `🏢 ${productId}`, productData.totalUsers, productData.viableSegments, productData.rollupSegments, 0), Object.entries(productData.stores).map(([appStore, storeData]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [renderHierarchyLine(/*#__PURE__*/_jsxDEV(Store, {\n            className: \"h-4 w-4 text-blue-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 19\n          }, this), `📱 ${formatAppStore(appStore)}`, storeData.totalUsers, storeData.viableSegments, storeData.rollupSegments, 1), Object.entries(storeData.prices).map(([priceRange, priceData]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [renderHierarchyLine(/*#__PURE__*/_jsxDEV(DollarSign, {\n              className: \"h-4 w-4 text-green-600\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 23\n            }, this), `💰 ${priceRange}`, priceData.totalUsers, priceData.viableSegments, priceData.rollupSegments, 2, priceData.segment), Object.entries(priceData.tiers).map(([economicTier, tierData]) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [renderHierarchyLine(/*#__PURE__*/_jsxDEV(TrendingUp, {\n                className: \"h-4 w-4 text-yellow-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 27\n              }, this), `🌍 ${economicTier}`, tierData.totalUsers, tierData.viableSegments, tierData.rollupSegments, 3, tierData.segment), Object.entries(tierData.countries).map(([country, countryData]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [renderHierarchyLine(/*#__PURE__*/_jsxDEV(Globe, {\n                  className: \"h-4 w-4 text-orange-600\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 31\n                }, this), `🏁 ${country}`, countryData.totalUsers, countryData.viableSegments, countryData.rollupSegments, 4, countryData.segment), Object.entries(countryData.regions).map(([region, segment]) => {\n                  // ALWAYS show the segment if it exists\n                  if (!segment) return null;\n                  return renderHierarchyLine(segment.is_viable ? /*#__PURE__*/_jsxDEV(CheckCircle, {\n                    className: \"h-4 w-4 text-green-500\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 399,\n                    columnNumber: 35\n                  }, this) : /*#__PURE__*/_jsxDEV(AlertTriangle, {\n                    className: \"h-4 w-4 text-red-500\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 400,\n                    columnNumber: 35\n                  }, this), `📍 ${region}`, segment.cohort_size || 0, undefined, undefined, 5, segment);\n                })]\n              }, country, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 27\n              }, this))]\n            }, economicTier, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 23\n            }, this))]\n          }, priceRange, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 19\n          }, this))]\n        }, appStore, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 15\n        }, this))]\n      }, productId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_c = AnalysisResultsHierarchy;\nexport default AnalysisResultsHierarchy;\nvar _c;\n$RefreshReg$(_c, \"AnalysisResultsHierarchy\");","map":{"version":3,"names":["React","BarChart3","Package","Store","DollarSign","TrendingUp","Globe","MapPin","CheckCircle","AlertTriangle","formatPercentage","formatAppStore","jsxDEV","_jsxDEV","Fragment","_Fragment","AnalysisResultsHierarchy","analysisResults","expandedSections","onToggleSection","getSegmentIdColor","segmentId","hash","i","length","charCodeAt","hue","Math","abs","formatSegmentIdShort","substring","renderSegmentIdBadge","color","shortId","className","style","backgroundColor","border","children","fileName","_jsxFileName","lineNumber","columnNumber","hierarchyData","totalSegmentsWithMetrics","totalRollupSegments","conversion_probabilities","Object","entries","forEach","segmentData","cohort","metrics","productId","product_id","appStore","app_store","priceRange","price_bucket","economicTier","economic_tier","country","region","isRollup","properties_dropped","hasMetrics","hierarchyLevel","segmentKey","segmentInfo","segment_id","is_viable","trial_conversion_rate","trial_converted_count","trial_started_count","rollup_target_segment_id","rollup_reason","hierarchy_level","stores","totalUsers","viableSegments","rollupSegments","prices","tiers","segment","countries","regions","userCount","cohort_size","renderHierarchyLine","icon","label","viableCount","rollupCount","indentLevel","indentStyle","marginLeft","join","rollup_description","toLocaleString","undefined","round","map","productData","storeData","priceData","tierData","countryData","_c","$RefreshReg$"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/conversion_probability/AnalysisResultsHierarchy.jsx"],"sourcesContent":["import React from 'react';\nimport { BarChart3, Package, Store, DollarSign, TrendingUp, Globe, MapPin, CheckCircle, AlertTriangle } from 'lucide-react';\nimport { formatPercentage, formatAppStore } from './utils/conversionUtils';\n\nconst AnalysisResultsHierarchy = ({ analysisResults, expandedSections, onToggleSection }) => {\n\n  // Generate consistent colors for segment IDs based on hash\n  const getSegmentIdColor = (segmentId) => {\n    if (!segmentId) return '#6B7280';\n    \n    let hash = 0;\n    for (let i = 0; i < segmentId.length; i++) {\n      hash = segmentId.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    \n    const hue = Math.abs(hash) % 360;\n    return `hsl(${hue}, 65%, 50%)`;\n  };\n\n  // Format segment ID to show first 4 and last 4 characters\n  const formatSegmentIdShort = (segmentId) => {\n    if (!segmentId || segmentId.length <= 8) return segmentId;\n    return `${segmentId.substring(0, 4)}...${segmentId.substring(segmentId.length - 4)}`;\n  };\n\n  // Render segment ID badge with consistent color\n  const renderSegmentIdBadge = (segmentId) => {\n    if (!segmentId) return null;\n    \n    const color = getSegmentIdColor(segmentId);\n    const shortId = formatSegmentIdShort(segmentId);\n    \n    return (\n      <span \n        className=\"inline-flex items-center px-2 py-1 rounded text-xs font-mono mx-1\"\n        style={{ \n          backgroundColor: `${color}20`, \n          color: color,\n          border: `1px solid ${color}40`\n        }}\n      >\n        ID: {shortId}\n      </span>\n    );\n  };\n\n  if (!analysisResults) {\n    return (\n      <div className=\"text-center text-gray-500 dark:text-gray-400 py-8\">\n        No analysis results available\n      </div>\n    );\n  }\n\n  // Build hierarchy data with accurate statistics\n  const hierarchyData = {};\n  let totalSegmentsWithMetrics = 0;\n  let totalRollupSegments = 0;\n  \n  if (analysisResults.conversion_probabilities) {\n    Object.entries(analysisResults.conversion_probabilities).forEach(([segmentId, segmentData]) => {\n      const cohort = segmentData.cohort || {};\n      const metrics = segmentData.metrics || {};\n      \n      const productId = cohort.product_id;\n      const appStore = cohort.app_store || 'Unknown';\n      const priceRange = cohort.price_bucket;\n      const economicTier = cohort.economic_tier || '';\n      const country = cohort.country || '';\n      const region = cohort.region || '';\n      \n      if (!productId || !priceRange) return;\n\n      // Determine if this segment has actual metrics vs is rolled up\n      const isRollup = cohort.properties_dropped && cohort.properties_dropped.length > 0;\n      const hasMetrics = !isRollup;\n      \n      if (hasMetrics) totalSegmentsWithMetrics++;\n      if (isRollup) totalRollupSegments++;\n\n      // Determine hierarchy level based on what properties are specified\n      let hierarchyLevel = 'region';\n      if (!region) hierarchyLevel = 'country';\n      if (!country) hierarchyLevel = 'tier';\n      if (!economicTier) hierarchyLevel = 'price';\n      \n      // Store segment at its appropriate level - but ALL segments get stored somewhere\n      const segmentKey = `${productId}|${appStore}|${priceRange}|${economicTier}|${country}|${region}`;\n      const segmentInfo = {\n        ...cohort,\n        ...metrics,\n        segment_id: cohort.segment_id || segmentId,\n        is_viable: hasMetrics,\n        trial_conversion_rate: metrics.trial_conversion_rate || 0,\n        trial_converted_count: metrics.trial_converted_count || 0,\n        trial_started_count: metrics.trial_started_count || 0,\n        rollup_target_segment_id: cohort.rollup_target_segment_id,\n        rollup_reason: cohort.rollup_reason,\n        hierarchy_level: hierarchyLevel\n      };\n\n      // Build nested hierarchy with aggregated statistics\n      if (!hierarchyData[productId]) {\n        hierarchyData[productId] = { \n          stores: {}, \n          totalUsers: 0, \n          viableSegments: 0, \n          rollupSegments: 0 \n        };\n      }\n\n      if (!hierarchyData[productId].stores[appStore]) {\n        hierarchyData[productId].stores[appStore] = { \n          prices: {}, \n          totalUsers: 0, \n          viableSegments: 0, \n          rollupSegments: 0 \n        };\n      }\n      \n      if (!hierarchyData[productId].stores[appStore].prices[priceRange]) {\n        hierarchyData[productId].stores[appStore].prices[priceRange] = { \n          tiers: {}, \n          totalUsers: 0, \n          viableSegments: 0, \n          rollupSegments: 0,\n          segment: hierarchyLevel === 'price' ? segmentInfo : null\n        };\n      }\n\n      if (!hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown']) {\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'] = { \n          countries: {}, \n          totalUsers: 0, \n          viableSegments: 0, \n          rollupSegments: 0,\n          segment: hierarchyLevel === 'tier' ? segmentInfo : null\n        };\n      }\n\n      if (!hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown']) {\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'] = { \n          regions: {}, \n          totalUsers: 0, \n          viableSegments: 0, \n          rollupSegments: 0,\n          segment: hierarchyLevel === 'country' ? segmentInfo : null\n        };\n      }\n\n      // ALL region-level segments get stored, whether viable or not\n      if (hierarchyLevel === 'region') {\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].regions[region || 'Unknown'] = segmentInfo;\n      }\n\n      // Aggregate user counts and statistics upward\n      const userCount = cohort.cohort_size || 0;\n      \n      // Update counts at each level\n      hierarchyData[productId].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].prices[priceRange].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].totalUsers += userCount;\n      hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].totalUsers += userCount;\n\n      // Update statistics at each level\n      if (hasMetrics) {\n        hierarchyData[productId].viableSegments++;\n        hierarchyData[productId].stores[appStore].viableSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].viableSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].viableSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].viableSegments++;\n      }\n      \n      if (isRollup) {\n        hierarchyData[productId].rollupSegments++;\n        hierarchyData[productId].stores[appStore].rollupSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].rollupSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].rollupSegments++;\n        hierarchyData[productId].stores[appStore].prices[priceRange].tiers[economicTier || 'Unknown'].countries[country || 'Unknown'].rollupSegments++;\n      }\n    });\n  }\n\n  // Render a single hierarchy line with proper indentation\n  const renderHierarchyLine = (icon, label, userCount, viableCount, rollupCount, indentLevel = 0, segmentData = null) => {\n    const indentStyle = { marginLeft: `${indentLevel * 24}px` };\n    \n    return (\n      <div \n        className={`flex items-center justify-between py-1 px-3 hover:bg-gray-50 dark:hover:bg-gray-700/30 ${\n          indentLevel % 2 === 0 ? 'bg-gray-25 dark:bg-gray-800/20' : 'bg-white dark:bg-gray-800'\n        }`}\n        style={indentStyle}\n      >\n        {/* Left side: Icon + Label + Segment Info */}\n        <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n          {icon}\n          <span className=\"font-medium text-gray-900 dark:text-gray-100 truncate\">\n            {label}\n          </span>\n          \n          {/* ALWAYS show segment ID FIRST if we have segment data */}\n          {segmentData && segmentData.segment_id && (\n            renderSegmentIdBadge(segmentData.segment_id)\n          )}\n          \n          {/* Segment-specific information - metrics or rollup info */}\n          {segmentData && (\n            <>\n              {segmentData.is_viable ? (\n                <>\n                  <span className=\"text-green-600 dark:text-green-400 text-sm font-medium\">\n                    🎯 {formatPercentage(segmentData.trial_conversion_rate)}\n                  </span>\n                  <span className=\"text-blue-600 dark:text-blue-400 text-sm\">\n                    → {segmentData.trial_converted_count || 0}/{segmentData.trial_started_count || 0}\n                  </span>\n                </>\n              ) : (\n                <>\n                  {segmentData.rollup_target_segment_id && (\n                    <span className=\"text-red-600 dark:text-red-400 text-sm\">\n                      → {renderSegmentIdBadge(segmentData.rollup_target_segment_id)}\n                    </span>\n                  )}\n                  {segmentData.rollup_reason && (\n                    <span className=\"text-red-500 dark:text-red-400 text-xs italic\">\n                      ({segmentData.rollup_reason})\n                    </span>\n                  )}\n                  {segmentData.properties_dropped && segmentData.properties_dropped.length > 0 && (\n                    <span className=\"text-orange-500 dark:text-orange-400 text-xs\">\n                      Dropped: [{segmentData.properties_dropped.join(', ')}]\n                    </span>\n                  )}\n                  {segmentData.rollup_description && (\n                    <span className=\"text-gray-500 dark:text-gray-400 text-xs\">\n                      {segmentData.rollup_description}\n                    </span>\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </div>\n\n        {/* Right side: Statistics */}\n        <div className=\"flex items-center gap-4 text-sm font-medium\">\n          <span className=\"text-gray-600 dark:text-gray-400\">\n            {userCount.toLocaleString()} users\n          </span>\n          \n          {/* Hierarchy level statistics */}\n          {viableCount !== undefined && rollupCount !== undefined && (\n            <div className=\"flex items-center gap-2\">\n              {viableCount > 0 && (\n                <span className=\"text-green-600 dark:text-green-400\">\n                  {viableCount} viable\n                </span>\n              )}\n              {rollupCount > 0 && (\n                <span className=\"text-orange-600 dark:text-orange-400\">\n                  {rollupCount} rollup\n                </span>\n              )}\n            </div>\n          )}\n          \n          {/* Final segment status */}\n          {segmentData && (\n            <div>\n              {segmentData.is_viable ? (\n                <span className=\"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 px-2 py-1 rounded-full text-xs font-medium\">\n                  ✅ VIABLE\n                </span>\n              ) : (\n                <span className=\"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 px-2 py-1 rounded-full text-xs font-medium\">\n                  ❌ ROLLUP\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg\">\n      \n      {/* Clean Header */}\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-blue-600 to-purple-600 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <BarChart3 className=\"h-6 w-6\" />\n            <div>\n              <h2 className=\"text-xl font-bold\">Hierarchical Analysis Results</h2>\n              <p className=\"text-blue-100 text-sm mt-1\">\n                Tree-based segment hierarchy with conversion metrics and rollup information\n              </p>\n            </div>\n          </div>\n          \n          {/* Summary Statistics */}\n          <div className=\"flex items-center gap-6 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{totalSegmentsWithMetrics}</div>\n              <div className=\"text-blue-100\">Viable Segments</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">{totalRollupSegments}</div>\n              <div className=\"text-blue-100\">Rollup Segments</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold\">\n                {totalSegmentsWithMetrics + totalRollupSegments > 0 ? \n                  Math.round((totalSegmentsWithMetrics / (totalSegmentsWithMetrics + totalRollupSegments)) * 100) : 0}%\n              </div>\n              <div className=\"text-blue-100\">Coverage</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Clean Tree Structure */}\n      <div className=\"divide-y divide-gray-100 dark:divide-gray-700\">\n        {Object.entries(hierarchyData).map(([productId, productData]) => (\n          <div key={productId}>\n            \n            {/* Product Level */}\n            {renderHierarchyLine(\n              <Package className=\"h-5 w-5 text-purple-600\" />,\n              `🏢 ${productId}`,\n              productData.totalUsers,\n              productData.viableSegments,\n              productData.rollupSegments,\n              0\n            )}\n\n            {/* Store Level */}\n            {Object.entries(productData.stores).map(([appStore, storeData]) => (\n              <div key={appStore}>\n                {renderHierarchyLine(\n                  <Store className=\"h-4 w-4 text-blue-600\" />,\n                  `📱 ${formatAppStore(appStore)}`,\n                  storeData.totalUsers,\n                  storeData.viableSegments,\n                  storeData.rollupSegments,\n                  1\n                )}\n\n                {/* Price Level */}\n                {Object.entries(storeData.prices).map(([priceRange, priceData]) => (\n                  <div key={priceRange}>\n                    {renderHierarchyLine(\n                      <DollarSign className=\"h-4 w-4 text-green-600\" />,\n                      `💰 ${priceRange}`,\n                      priceData.totalUsers,\n                      priceData.viableSegments,\n                      priceData.rollupSegments,\n                      2,\n                      priceData.segment\n                    )}\n\n                    {/* Economic Tier Level */}\n                    {Object.entries(priceData.tiers).map(([economicTier, tierData]) => (\n                      <div key={economicTier}>\n                        {renderHierarchyLine(\n                          <TrendingUp className=\"h-4 w-4 text-yellow-600\" />,\n                          `🌍 ${economicTier}`,\n                          tierData.totalUsers,\n                          tierData.viableSegments,\n                          tierData.rollupSegments,\n                          3,\n                          tierData.segment\n                        )}\n\n                        {/* Country Level */}\n                        {Object.entries(tierData.countries).map(([country, countryData]) => (\n                          <div key={country}>\n                            {renderHierarchyLine(\n                              <Globe className=\"h-4 w-4 text-orange-600\" />,\n                              `🏁 ${country}`,\n                              countryData.totalUsers,\n                              countryData.viableSegments,\n                              countryData.rollupSegments,\n                              4,\n                              countryData.segment\n                            )}\n\n                            {/* Region Level - ALL Segments */}\n                            {Object.entries(countryData.regions).map(([region, segment]) => {\n                              // ALWAYS show the segment if it exists\n                              if (!segment) return null;\n                              \n                              return renderHierarchyLine(\n                                segment.is_viable ? \n                                  <CheckCircle className=\"h-4 w-4 text-green-500\" /> : \n                                  <AlertTriangle className=\"h-4 w-4 text-red-500\" />,\n                                `📍 ${region}`,\n                                segment.cohort_size || 0,\n                                undefined,\n                                undefined,\n                                5,\n                                segment\n                              );\n                            })}\n                          </div>\n                        ))}\n                      </div>\n                    ))}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AnalysisResultsHierarchy;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}