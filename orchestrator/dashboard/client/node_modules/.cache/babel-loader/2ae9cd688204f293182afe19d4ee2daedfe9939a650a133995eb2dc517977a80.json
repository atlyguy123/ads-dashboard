{"ast":null,"code":"// Dashboard API Service\n// \n// Handles all API calls related to dashboard functionality\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\nclass DashboardApiService {\n  constructor() {\n    this.baseUrl = `${API_BASE_URL}/api/dashboard`;\n  }\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available data configurations\n   */\n  async getConfigurations() {\n    return this.makeRequest('/configurations');\n  }\n\n  /**\n   * Get dashboard data for specified parameters\n   */\n  async getDashboardData(params) {\n    return this.makeRequest('/data', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  /**\n   * Trigger manual data collection\n   */\n  async triggerCollection(params) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/dashboard/collection/trigger`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(params)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to trigger collection');\n      }\n      return data;\n    } catch (error) {\n      console.error('Error triggering collection:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get collection job status\n   */\n  async getCollectionStatus(jobId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/dashboard/collection/status/${jobId}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch collection status');\n      }\n      return data;\n    } catch (error) {\n      console.error('Error fetching collection status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get data coverage summary for a configuration\n   */\n  async getCoverageSummary(configKey) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/dashboard/coverage/${configKey}`);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch coverage summary');\n      }\n      return data;\n    } catch (error) {\n      console.error('Error fetching coverage summary:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Health check for the dashboard API\n   */\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n  async getChartData(params) {\n    return this.makeRequest('/chart-data', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  /**\n   * Get analytics data from the analytics pipeline - NEW ANALYTICS API\n   */\n  async getAnalyticsData(params) {\n    return this.makeRequest('/analytics/data', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    });\n  }\n\n  /**\n   * Get chart data for analytics sparklines and detailed views\n   */\n  async getAnalyticsChartData(params) {\n    const queryParams = new URLSearchParams(params).toString();\n    return this.makeRequest(`/analytics/chart-data?${queryParams}`);\n  }\n\n  /**\n   * Run pipeline analysis for a specific campaign, adset, or ad\n   */\n  async runPipeline(params, dashboardParams = null) {\n    try {\n      // Use dashboard's actual date range if available, otherwise default to last 30 days\n      let dateFrom, dateTo;\n      if (dashboardParams && dashboardParams.start_date && dashboardParams.end_date) {\n        // Dashboard controls use start_date and end_date\n        dateFrom = dashboardParams.start_date;\n        dateTo = dashboardParams.end_date;\n      } else if (dashboardParams && dashboardParams.date_from && dashboardParams.date_to) {\n        // Fallback for other formats that might use date_from and date_to\n        dateFrom = dashboardParams.date_from;\n        dateTo = dashboardParams.date_to;\n      } else {\n        // Fallback to last 30 days\n        dateFrom = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        dateTo = new Date().toISOString().split('T')[0];\n      }\n\n      // Prepare the pipeline parameters matching CohortAnalyzerV3RefactoredPage format\n      const pipelineParams = {\n        date_from: dateFrom,\n        date_to: dateTo,\n        timeline_end_date: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        // 6 months from now\n        pipeline_version: '3.0.0_refactored',\n        use_conversion_probabilities: true,\n        optional_filters: [],\n        secondary_filters: [],\n        config: {\n          product_filter: {\n            include_patterns: [\".*\"],\n            // Include all products by default\n            exclude_patterns: [],\n            specific_product_ids: []\n          },\n          lifecycle: {\n            trial_window_days: 7,\n            cancellation_window_days: 30,\n            smoothing_enabled: true\n          },\n          timeline: {\n            include_estimates: true,\n            include_confidence_intervals: false\n          }\n        }\n      };\n\n      // Set the primary_user_filter based on the ID type (matching cohort page format)\n      if (params.ad_id) {\n        pipelineParams.primary_user_filter = {\n          property_name: 'abi_ad_id',\n          property_values: [params.ad_id],\n          property_source: 'user'\n        };\n      } else if (params.adset_id) {\n        pipelineParams.primary_user_filter = {\n          property_name: 'abi_ad_set_id',\n          property_values: [params.adset_id],\n          property_source: 'user'\n        };\n      } else if (params.campaign_id) {\n        pipelineParams.primary_user_filter = {\n          property_name: 'abi_campaign_id',\n          property_values: [params.campaign_id],\n          property_source: 'user'\n        };\n      } else {\n        // No specific filter - this will get all users in the date range\n        pipelineParams.primary_user_filter = {\n          property_name: '',\n          property_values: [],\n          property_source: 'user'\n        };\n      }\n      console.log('üîç Pipeline Debug: Sending V3 refactored parameters:', pipelineParams);\n      const response = await fetch(`${API_BASE_URL}/api/v3/cohort/analyze-refactored`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(pipelineParams)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to run pipeline');\n      }\n      return data;\n    } catch (error) {\n      console.error('Error running pipeline:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst dashboardApi = new DashboardApiService();\nexport { dashboardApi };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","DashboardApiService","constructor","baseUrl","makeRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","status","console","getConfigurations","getDashboardData","params","method","body","JSON","stringify","triggerCollection","getCollectionStatus","jobId","getCoverageSummary","configKey","healthCheck","getChartData","getAnalyticsData","getAnalyticsChartData","queryParams","URLSearchParams","toString","runPipeline","dashboardParams","dateFrom","dateTo","start_date","end_date","date_from","date_to","Date","now","toISOString","split","pipelineParams","timeline_end_date","pipeline_version","use_conversion_probabilities","optional_filters","secondary_filters","product_filter","include_patterns","exclude_patterns","specific_product_ids","lifecycle","trial_window_days","cancellation_window_days","smoothing_enabled","timeline","include_estimates","include_confidence_intervals","ad_id","primary_user_filter","property_name","property_values","property_source","adset_id","campaign_id","log","dashboardApi"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/services/dashboardApi.js"],"sourcesContent":["// Dashboard API Service\n// \n// Handles all API calls related to dashboard functionality\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\nclass DashboardApiService {\n  constructor() {\n    this.baseUrl = `${API_BASE_URL}/api/dashboard`;\n  }\n\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get available data configurations\n   */\n  async getConfigurations() {\n    return this.makeRequest('/configurations');\n  }\n\n  /**\n   * Get dashboard data for specified parameters\n   */\n  async getDashboardData(params) {\n    return this.makeRequest('/data', {\n      method: 'POST',\n      body: JSON.stringify(params),\n    });\n  }\n\n  /**\n   * Trigger manual data collection\n   */\n  async triggerCollection(params) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/dashboard/collection/trigger`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(params)\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to trigger collection');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error triggering collection:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get collection job status\n   */\n  async getCollectionStatus(jobId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/dashboard/collection/status/${jobId}`);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch collection status');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error fetching collection status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get data coverage summary for a configuration\n   */\n  async getCoverageSummary(configKey) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/dashboard/coverage/${configKey}`);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to fetch coverage summary');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error fetching coverage summary:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Health check for the dashboard API\n   */\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n\n  async getChartData(params) {\n    return this.makeRequest('/chart-data', {\n      method: 'POST',\n      body: JSON.stringify(params),\n    });\n  }\n\n  /**\n   * Get analytics data from the analytics pipeline - NEW ANALYTICS API\n   */\n  async getAnalyticsData(params) {\n    return this.makeRequest('/analytics/data', {\n      method: 'POST',\n      body: JSON.stringify(params),\n    });\n  }\n\n  /**\n   * Get chart data for analytics sparklines and detailed views\n   */\n  async getAnalyticsChartData(params) {\n    const queryParams = new URLSearchParams(params).toString();\n    return this.makeRequest(`/analytics/chart-data?${queryParams}`);\n  }\n\n  /**\n   * Run pipeline analysis for a specific campaign, adset, or ad\n   */\n  async runPipeline(params, dashboardParams = null) {\n    try {\n      // Use dashboard's actual date range if available, otherwise default to last 30 days\n      let dateFrom, dateTo;\n      \n      if (dashboardParams && dashboardParams.start_date && dashboardParams.end_date) {\n        // Dashboard controls use start_date and end_date\n        dateFrom = dashboardParams.start_date;\n        dateTo = dashboardParams.end_date;\n      } else if (dashboardParams && dashboardParams.date_from && dashboardParams.date_to) {\n        // Fallback for other formats that might use date_from and date_to\n        dateFrom = dashboardParams.date_from;\n        dateTo = dashboardParams.date_to;\n      } else {\n        // Fallback to last 30 days\n        dateFrom = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n        dateTo = new Date().toISOString().split('T')[0];\n      }\n\n      // Prepare the pipeline parameters matching CohortAnalyzerV3RefactoredPage format\n      const pipelineParams = {\n        date_from: dateFrom,\n        date_to: dateTo,\n        timeline_end_date: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 6 months from now\n        pipeline_version: '3.0.0_refactored',\n        use_conversion_probabilities: true,\n        optional_filters: [],\n        secondary_filters: [],\n        config: {\n          product_filter: {\n            include_patterns: [\".*\"], // Include all products by default\n            exclude_patterns: [],\n            specific_product_ids: []\n          },\n          lifecycle: {\n            trial_window_days: 7,\n            cancellation_window_days: 30,\n            smoothing_enabled: true\n          },\n          timeline: {\n            include_estimates: true,\n            include_confidence_intervals: false\n          }\n        }\n      };\n\n      // Set the primary_user_filter based on the ID type (matching cohort page format)\n      if (params.ad_id) {\n        pipelineParams.primary_user_filter = {\n          property_name: 'abi_ad_id',\n          property_values: [params.ad_id],\n          property_source: 'user'\n        };\n      } else if (params.adset_id) {\n        pipelineParams.primary_user_filter = {\n          property_name: 'abi_ad_set_id', \n          property_values: [params.adset_id],\n          property_source: 'user'\n        };\n      } else if (params.campaign_id) {\n        pipelineParams.primary_user_filter = {\n          property_name: 'abi_campaign_id',\n          property_values: [params.campaign_id],\n          property_source: 'user'\n        };\n      } else {\n        // No specific filter - this will get all users in the date range\n        pipelineParams.primary_user_filter = {\n          property_name: '',\n          property_values: [],\n          property_source: 'user'\n        };\n      }\n\n      console.log('üîç Pipeline Debug: Sending V3 refactored parameters:', pipelineParams);\n\n      const response = await fetch(`${API_BASE_URL}/api/v3/cohort/analyze-refactored`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(pipelineParams)\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to run pipeline');\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error running pipeline:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst dashboardApi = new DashboardApiService();\nexport { dashboardApi }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}