{"ast":null,"code":"// Analytics Pipeline API Service\n// \n// Handles all API calls related to the analytics pipeline functionality\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\nclass AnalyticsPipelineApiService {\n  constructor() {\n    this.baseUrl = `${API_BASE_URL}/api/analytics-pipeline`;\n  }\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`Analytics Pipeline API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start the analytics pipeline\n   * @param {Object} options - Pipeline options\n   * @param {string} options.date - Date to run pipeline for (YYYY-MM-DD format)\n   * @returns {Promise<Object>} - Pipeline start response with thread_id\n   */\n  async startAnalyticsPipeline(options = {}) {\n    return this.makeRequest('/start', {\n      method: 'POST',\n      body: JSON.stringify(options)\n    });\n  }\n\n  /**\n   * Get current analytics pipeline status and progress\n   * @returns {Promise<Object>} - Current pipeline status including progress, stage, errors\n   */\n  async getAnalyticsPipelineStatus() {\n    return this.makeRequest('/status');\n  }\n\n  /**\n   * Cancel the currently running analytics pipeline\n   * @returns {Promise<Object>} - Cancellation confirmation\n   */\n  async cancelAnalyticsPipeline() {\n    return this.makeRequest('/cancel', {\n      method: 'POST'\n    });\n  }\n\n  /**\n   * Health check for the analytics pipeline API\n   * @returns {Promise<Object>} - API health status with available endpoints\n   */\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst analyticsPipelineApi = new AnalyticsPipelineApiService();\nexport { analyticsPipelineApi };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AnalyticsPipelineApiService","constructor","baseUrl","makeRequest","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","error","status","console","startAnalyticsPipeline","method","body","JSON","stringify","getAnalyticsPipelineStatus","cancelAnalyticsPipeline","healthCheck","analyticsPipelineApi"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/services/analyticsPipelineApi.js"],"sourcesContent":["// Analytics Pipeline API Service\n// \n// Handles all API calls related to the analytics pipeline functionality\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\nclass AnalyticsPipelineApiService {\n  constructor() {\n    this.baseUrl = `${API_BASE_URL}/api/analytics-pipeline`;\n  }\n\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Analytics Pipeline API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start the analytics pipeline\n   * @param {Object} options - Pipeline options\n   * @param {string} options.date - Date to run pipeline for (YYYY-MM-DD format)\n   * @returns {Promise<Object>} - Pipeline start response with thread_id\n   */\n  async startAnalyticsPipeline(options = {}) {\n    return this.makeRequest('/start', {\n      method: 'POST',\n      body: JSON.stringify(options),\n    });\n  }\n\n  /**\n   * Get current analytics pipeline status and progress\n   * @returns {Promise<Object>} - Current pipeline status including progress, stage, errors\n   */\n  async getAnalyticsPipelineStatus() {\n    return this.makeRequest('/status');\n  }\n\n  /**\n   * Cancel the currently running analytics pipeline\n   * @returns {Promise<Object>} - Cancellation confirmation\n   */\n  async cancelAnalyticsPipeline() {\n    return this.makeRequest('/cancel', {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Health check for the analytics pipeline API\n   * @returns {Promise<Object>} - API health status with available endpoints\n   */\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst analyticsPipelineApi = new AnalyticsPipelineApiService();\n\nexport { analyticsPipelineApi }; "],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,2BAA2B,CAAC;EAChCC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,GAAGN,YAAY,yBAAyB;EACzD;EAEA,MAAMO,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACxC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb,CAAC;MACD,GAAGH;IACL,CAAC;IAED,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MACzC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;MACzE;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,6CAA6CX,QAAQ,GAAG,EAAEW,KAAK,CAAC;MAC9E,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMG,sBAAsBA,CAACb,OAAO,GAAG,CAAC,CAAC,EAAE;IACzC,OAAO,IAAI,CAACF,WAAW,CAAC,QAAQ,EAAE;MAChCgB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACjB,OAAO;IAC9B,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,MAAMkB,0BAA0BA,CAAA,EAAG;IACjC,OAAO,IAAI,CAACpB,WAAW,CAAC,SAAS,CAAC;EACpC;;EAEA;AACF;AACA;AACA;EACE,MAAMqB,uBAAuBA,CAAA,EAAG;IAC9B,OAAO,IAAI,CAACrB,WAAW,CAAC,SAAS,EAAE;MACjCgB,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,MAAMM,WAAWA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACtB,WAAW,CAAC,SAAS,CAAC;EACpC;AACF;;AAEA;AACA,MAAMuB,oBAAoB,GAAG,IAAI1B,2BAA2B,CAAC,CAAC;AAE9D,SAAS0B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}