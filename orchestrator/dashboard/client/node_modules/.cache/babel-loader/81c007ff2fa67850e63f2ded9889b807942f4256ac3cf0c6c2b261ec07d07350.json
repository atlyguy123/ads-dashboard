{"ast":null,"code":"import _objectSpread from\"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{ACTION_METRICS,ACTION_TYPE_ALLOWED_BREAKDOWNS,GEOGRAPHY_GROUP,DEVICE_GROUP,PLACEMENT_GROUP,TIME_GROUP,ASSET_GROUP,DELIVERY_ONLY_FIELDS,VALID_PAIRS,VIRTUAL_OS_MAP}from'./metaConstants';// Helper to recognise a virtual OS ID\nexport const isVirtualOS=id=>id==='os_ios'||id==='os_and';// Helper to remove falsy entries from an object before storing to localStorage\nexport const compactObject=obj=>Object.fromEntries(Object.entries(obj).filter(_ref=>{let[_,v]=_ref;return v;}));// Validate combinations of selected fields and breakdowns\nexport const validateMetaBreakdownCombo=(fields,breakdowns)=>{const selectedFieldIds=Object.entries(fields).filter(_ref2=>{let[_,isSelected]=_ref2;return isSelected;}).map(_ref3=>{let[id,_]=_ref3;return id;});const selectedBreakdownIds=Object.entries(breakdowns).filter(_ref4=>{let[_,isSelected]=_ref4;return isSelected;}).map(_ref5=>{let[id,_]=_ref5;return id;}).sort();const hasActionMetrics=selectedFieldIds.some(field=>ACTION_METRICS.includes(field));const errors=[];let valid=true;// Check breakdown limit\nif(selectedBreakdownIds.length>2){errors.push(\"Maximum of 2 breakdowns allowed\");valid=false;}// Check action metric restrictions\nif(hasActionMetrics){if(selectedBreakdownIds.length>1){errors.push(\"When using action metrics, you can select at most 1 breakdown because Meta adds 'action_type' as an implicit breakdown\");valid=false;}if(selectedBreakdownIds.length===1&&!ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(selectedBreakdownIds[0])){errors.push(\"'\".concat(selectedBreakdownIds[0],\"' is no longer valid. Use one of: \")+ACTION_TYPE_ALLOWED_BREAKDOWNS.join(', '));valid=false;}}// Check group restrictions if we have multiple breakdowns\nif(selectedBreakdownIds.length===2){const[bd1,bd2]=selectedBreakdownIds;const isDeliveryOnlyRequest=selectedFieldIds.length>0&&selectedFieldIds.every(field=>DELIVERY_ONLY_FIELDS.includes(field));const isPairInValidPairs=VALID_PAIRS.some(pair=>pair[0]===bd1&&pair[1]===bd2||pair[1]===bd1&&pair[0]===bd2);let pairErrorFound=false;// Flag to prevent multiple errors for the same pair\n// Hourly breakdowns must always stand alone\nif(TIME_GROUP.includes(bd1)||TIME_GROUP.includes(bd2)){errors.push(\"Hourly breakdowns must stand alone\");valid=false;pairErrorFound=true;}if(!pairErrorFound){if(isPairInValidPairs){// Pair is in VALID_PAIRS. No further same-group or general validity check needed for these.\n// Hourly check already done.\n}else{// Pair is NOT in VALID_PAIRS. Check for same-group violations.\nif(GEOGRAPHY_GROUP.includes(bd1)&&GEOGRAPHY_GROUP.includes(bd2)||DEVICE_GROUP.includes(bd1)&&DEVICE_GROUP.includes(bd2)||PLACEMENT_GROUP.includes(bd1)&&PLACEMENT_GROUP.includes(bd2)||// ASSET_GROUP has a special condition with isDeliveryOnlyRequest\n!isDeliveryOnlyRequest&&ASSET_GROUP.includes(bd1)&&ASSET_GROUP.includes(bd2)// TIME_GROUP is implicitly handled by the hourly check above if they are in the same group\n){errors.push(\"Cannot select multiple breakdowns from the same group (\".concat(bd1,\", \").concat(bd2,\") unless explicitly allowed in VALID_PAIRS.\"));valid=false;pairErrorFound=true;}// If no specific group error was found, and it's not in VALID_PAIRS, then it's generally not supported.\nif(!pairErrorFound){errors.push(\"The combination of '\".concat(bd1,\"' and '\").concat(bd2,\"' is not supported by Meta.\"));valid=false;// pairErrorFound = true; // Not strictly needed as it's the last check for this path\n}}}}return{valid,errors};};// Check if a breakdown should be disabled based on current selections\nexport const isBreakdownDisabled=(breakdownId,selectedFields,selectedBreakdowns)=>{// If this breakdown is already selected, it's not disabled (can always be deselected)\nif(selectedBreakdowns[breakdownId]){return false;}const hasAction=Object.entries(selectedFields).some(_ref6=>{let[k,v]=_ref6;return v&&ACTION_METRICS.includes(k);});if(hasAction){// allow at most ONE extra breakdown and it must be in ACTION_TYPE_ALLOWED_BREAKDOWNS\nif(!ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdownId))return true;if(Object.values(selectedBreakdowns).filter(Boolean).length>=1)return true;}const selectedBreakdownIds=Object.entries(selectedBreakdowns).filter(_ref7=>{let[_,isSelected]=_ref7;return isSelected;}).map(_ref8=>{let[id,_]=_ref8;return id;}).sort();// enforce order deterministically\n// treat os_ios/os_and as mutually exclusive\nconst hasVirtualOSSelected=selectedBreakdownIds.some(isVirtualOS);if(hasVirtualOSSelected&&isVirtualOS(breakdownId)&&!selectedBreakdownIds.includes(breakdownId))return true;// can't pick both, unless it's to deselect current\n// Rule 1: Limit to max 2 breakdowns\nif(selectedBreakdownIds.length>=2){return true;}// Check if any action metrics are selected - this implicitly adds action_type as a breakdown\nconst hasActionMetrics=Object.entries(selectedFields).some(_ref9=>{let[field,isSelected]=_ref9;return isSelected&&ACTION_METRICS.includes(field);});// When action metrics are selected (which adds implicit action_type breakdown)\nif(hasActionMetrics){// Only allow breakdowns specifically allowed with action_type\nif(!ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdownId))return true;if(selectedBreakdownIds.length>=1)return true;}// No restrictions if nothing is selected yet\nif(selectedBreakdownIds.length===0){return false;}const currentBreakdown=selectedBreakdownIds[0];// Rule 2: Check \"pick-only-one\" groups\nif(GEOGRAPHY_GROUP.includes(currentBreakdown)&&GEOGRAPHY_GROUP.includes(breakdownId)||DEVICE_GROUP.includes(currentBreakdown)&&DEVICE_GROUP.includes(breakdownId)||PLACEMENT_GROUP.includes(currentBreakdown)&&PLACEMENT_GROUP.includes(breakdownId)||TIME_GROUP.includes(currentBreakdown)&&TIME_GROUP.includes(breakdownId)||ASSET_GROUP.includes(currentBreakdown)&&ASSET_GROUP.includes(breakdownId)){return true;}// Rule 3: Hourly breakdowns must stand alone\nif(TIME_GROUP.includes(currentBreakdown)&&!TIME_GROUP.includes(breakdownId)||TIME_GROUP.includes(breakdownId)&&!TIME_GROUP.includes(currentBreakdown)){return true;}// Rule 4: Check if the pair is in the known-good list\nconst isPairValid=VALID_PAIRS.some(pair=>pair[0]===currentBreakdown&&pair[1]===breakdownId||pair[1]===currentBreakdown&&pair[0]===breakdownId);// Return whether this pair is valid for selection\nreturn!isPairValid;};// Get tooltip message explaining why a breakdown is disabled\nexport const getDisabledTooltip=(breakdownId,selectedFields,selectedBreakdowns)=>{// Create a simulated state as if this breakdown was selected\nconst simulatedBreakdowns=_objectSpread({},selectedBreakdowns);simulatedBreakdowns[breakdownId]=true;// Validate the simulated combo\nconst validation=validateMetaBreakdownCombo(selectedFields,simulatedBreakdowns);// Return the first error message if invalid\nif(!validation.valid){return validation.errors[0];}return\"\";// Should not happen as isBreakdownDisabled would have returned false\n};// Get the comma-separated list of selected fields\nexport const getSelectedFieldsString=selectedFields=>{return Object.entries(selectedFields).filter(_ref0=>{let[_,isSelected]=_ref0;return isSelected;}).map(_ref1=>{let[fieldId,_]=_ref1;return fieldId;}).join(',');};// Get the comma-separated list of selected breakdowns\nexport const getSelectedBreakdownsString=selectedBreakdowns=>{return Object.entries(selectedBreakdowns).filter(_ref10=>{let[_,isSelected]=_ref10;return isSelected;}).map(_ref11=>{let[breakdownId,_]=_ref11;return breakdownId;}).join(',');};// Build API parameters for Meta requests\nexport const buildApiParams=function(startDateInput,endDateInput,incrementInput,selectedFields,selectedBreakdowns){let actionBreakdowns=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;const fields=Object.entries(selectedFields).filter(_ref12=>{let[,v]=_ref12;return v;}).map(_ref13=>{let[k]=_ref13;return k;}).join(',');const active=Object.entries(selectedBreakdowns).filter(_ref14=>{let[,v]=_ref14;return v;}).map(_ref15=>{let[k]=_ref15;return k;});const hasIOS=active.includes('os_ios');const hasAND=active.includes('os_and');// real breakdown list we will send\nconst breakdowns=active.filter(id=>!isVirtualOS(id));// ensure impression_device is included if a virtual OS was picked\nif((hasIOS||hasAND)&&!breakdowns.includes('impression_device'))breakdowns.push('impression_device');const params={start_date:startDateInput,end_date:endDateInput,time_increment:parseInt(incrementInput,10)||1,fields};if(breakdowns.length)params.breakdowns=breakdowns.join(',');// Add action_breakdowns parameter if provided\nif(actionBreakdowns){params.action_breakdowns=actionBreakdowns;}// add filtering for virtual OS\nif(hasIOS||hasAND){const key=hasIOS?'os_ios':'os_and';params.filtering=JSON.stringify([{field:'impression_device',operator:'IN',value:VIRTUAL_OS_MAP[key].filterValues}]);}return params;};// Validate date format (YYYY-MM-DD)\nexport const isValidDate=dateStr=>{const regex=/^\\d{4}-\\d{2}-\\d{2}$/;if(!regex.test(dateStr))return false;const[year,month,day]=dateStr.split('-').map(Number);const date=new Date(year,month-1,day);return date.getFullYear()===year&&date.getMonth()===month-1&&date.getDate()===day;};","map":{"version":3,"names":["ACTION_METRICS","ACTION_TYPE_ALLOWED_BREAKDOWNS","GEOGRAPHY_GROUP","DEVICE_GROUP","PLACEMENT_GROUP","TIME_GROUP","ASSET_GROUP","DELIVERY_ONLY_FIELDS","VALID_PAIRS","VIRTUAL_OS_MAP","isVirtualOS","id","compactObject","obj","Object","fromEntries","entries","filter","_ref","_","v","validateMetaBreakdownCombo","fields","breakdowns","selectedFieldIds","_ref2","isSelected","map","_ref3","selectedBreakdownIds","_ref4","_ref5","sort","hasActionMetrics","some","field","includes","errors","valid","length","push","concat","join","bd1","bd2","isDeliveryOnlyRequest","every","isPairInValidPairs","pair","pairErrorFound","isBreakdownDisabled","breakdownId","selectedFields","selectedBreakdowns","hasAction","_ref6","k","values","Boolean","_ref7","_ref8","hasVirtualOSSelected","_ref9","currentBreakdown","isPairValid","getDisabledTooltip","simulatedBreakdowns","_objectSpread","validation","getSelectedFieldsString","_ref0","_ref1","fieldId","getSelectedBreakdownsString","_ref10","_ref11","buildApiParams","startDateInput","endDateInput","incrementInput","actionBreakdowns","arguments","undefined","_ref12","_ref13","active","_ref14","_ref15","hasIOS","hasAND","params","start_date","end_date","time_increment","parseInt","action_breakdowns","key","filtering","JSON","stringify","operator","value","filterValues","isValidDate","dateStr","regex","test","year","month","day","split","Number","date","Date","getFullYear","getMonth","getDate"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/utils/metaApiUtils.js"],"sourcesContent":["import {\n  ACTION_METRICS,\n  ACTION_TYPE_ALLOWED_BREAKDOWNS,\n  GEOGRAPHY_GROUP,\n  DEVICE_GROUP,\n  PLACEMENT_GROUP,\n  TIME_GROUP,\n  ASSET_GROUP,\n  DELIVERY_ONLY_FIELDS,\n  VALID_PAIRS,\n  VIRTUAL_OS_MAP\n} from './metaConstants';\n\n// Helper to recognise a virtual OS ID\nexport const isVirtualOS = id => id === 'os_ios' || id === 'os_and';\n\n// Helper to remove falsy entries from an object before storing to localStorage\nexport const compactObject = (obj) =>\n  Object.fromEntries(Object.entries(obj).filter(([_, v]) => v));\n\n// Validate combinations of selected fields and breakdowns\nexport const validateMetaBreakdownCombo = (fields, breakdowns) => {\n  const selectedFieldIds = Object.entries(fields)\n    .filter(([_, isSelected]) => isSelected)\n    .map(([id, _]) => id);\n    \n  const selectedBreakdownIds = Object.entries(breakdowns)\n    .filter(([_, isSelected]) => isSelected)\n    .map(([id, _]) => id)\n    .sort();\n  \n  const hasActionMetrics = selectedFieldIds.some(field => ACTION_METRICS.includes(field));\n  const errors = [];\n  let valid = true;\n  \n  // Check breakdown limit\n  if (selectedBreakdownIds.length > 2) {\n    errors.push(\"Maximum of 2 breakdowns allowed\");\n    valid = false;\n  }\n  \n  // Check action metric restrictions\n  if (hasActionMetrics) {\n    if (selectedBreakdownIds.length > 1) {\n      errors.push(\"When using action metrics, you can select at most 1 breakdown because Meta adds 'action_type' as an implicit breakdown\");\n      valid = false;\n    }\n    \n    if (selectedBreakdownIds.length === 1 && !ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(selectedBreakdownIds[0])) {\n      errors.push(\n        `'${selectedBreakdownIds[0]}' is no longer valid. Use one of: ` +\n        ACTION_TYPE_ALLOWED_BREAKDOWNS.join(', ')\n      );\n      valid = false;\n    }\n  }\n  \n  // Check group restrictions if we have multiple breakdowns\n  if (selectedBreakdownIds.length === 2) {\n    const [bd1, bd2] = selectedBreakdownIds;\n    \n    const isDeliveryOnlyRequest = selectedFieldIds.length > 0 && \n      selectedFieldIds.every(field => DELIVERY_ONLY_FIELDS.includes(field));\n\n    const isPairInValidPairs = VALID_PAIRS.some(pair => \n      (pair[0] === bd1 && pair[1] === bd2) || \n      (pair[1] === bd1 && pair[0] === bd2)\n    );\n\n    let pairErrorFound = false; // Flag to prevent multiple errors for the same pair\n\n    // Hourly breakdowns must always stand alone\n    if (TIME_GROUP.includes(bd1) || TIME_GROUP.includes(bd2)) {\n      errors.push(\"Hourly breakdowns must stand alone\");\n      valid = false;\n      pairErrorFound = true;\n    }\n\n    if (!pairErrorFound) {\n      if (isPairInValidPairs) {\n        // Pair is in VALID_PAIRS. No further same-group or general validity check needed for these.\n        // Hourly check already done.\n      } else {\n        // Pair is NOT in VALID_PAIRS. Check for same-group violations.\n        if (\n          (GEOGRAPHY_GROUP.includes(bd1) && GEOGRAPHY_GROUP.includes(bd2)) ||\n          (DEVICE_GROUP.includes(bd1) && DEVICE_GROUP.includes(bd2)) ||\n          (PLACEMENT_GROUP.includes(bd1) && PLACEMENT_GROUP.includes(bd2)) ||\n          // ASSET_GROUP has a special condition with isDeliveryOnlyRequest\n          (!isDeliveryOnlyRequest && ASSET_GROUP.includes(bd1) && ASSET_GROUP.includes(bd2))\n          // TIME_GROUP is implicitly handled by the hourly check above if they are in the same group\n        ) {\n          errors.push(`Cannot select multiple breakdowns from the same group (${bd1}, ${bd2}) unless explicitly allowed in VALID_PAIRS.`);\n          valid = false;\n          pairErrorFound = true;\n        }\n\n        // If no specific group error was found, and it's not in VALID_PAIRS, then it's generally not supported.\n        if (!pairErrorFound) {\n          errors.push(`The combination of '${bd1}' and '${bd2}' is not supported by Meta.`);\n          valid = false;\n          // pairErrorFound = true; // Not strictly needed as it's the last check for this path\n        }\n      }\n    }\n  }\n  \n  return { valid, errors };\n};\n\n// Check if a breakdown should be disabled based on current selections\nexport const isBreakdownDisabled = (breakdownId, selectedFields, selectedBreakdowns) => {\n  // If this breakdown is already selected, it's not disabled (can always be deselected)\n  if (selectedBreakdowns[breakdownId]) {\n    return false;\n  }\n  \n  const hasAction = Object.entries(selectedFields)\n    .some(([k,v]) => v && ACTION_METRICS.includes(k));\n  if (hasAction) {\n    // allow at most ONE extra breakdown and it must be in ACTION_TYPE_ALLOWED_BREAKDOWNS\n    if (!ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdownId)) return true;\n    if (Object.values(selectedBreakdowns).filter(Boolean).length >= 1) return true;\n  }\n  \n  const selectedBreakdownIds = Object.entries(selectedBreakdowns)\n    .filter(([_, isSelected]) => isSelected)\n    .map(([id, _]) => id)\n    .sort(); // enforce order deterministically\n\n  // treat os_ios/os_and as mutually exclusive\n  const hasVirtualOSSelected = selectedBreakdownIds.some(isVirtualOS);\n  if (hasVirtualOSSelected && isVirtualOS(breakdownId) && !selectedBreakdownIds.includes(breakdownId)) return true; // can't pick both, unless it's to deselect current\n\n  // Rule 1: Limit to max 2 breakdowns\n  if (selectedBreakdownIds.length >= 2) {\n    return true;\n  }\n\n  // Check if any action metrics are selected - this implicitly adds action_type as a breakdown\n  const hasActionMetrics = Object.entries(selectedFields)\n    .some(([field, isSelected]) => isSelected && ACTION_METRICS.includes(field));\n  \n  // When action metrics are selected (which adds implicit action_type breakdown)\n  if (hasActionMetrics) {\n    // Only allow breakdowns specifically allowed with action_type\n    if (!ACTION_TYPE_ALLOWED_BREAKDOWNS.includes(breakdownId)) return true;\n    if (selectedBreakdownIds.length >= 1) return true;\n  }\n\n  // No restrictions if nothing is selected yet\n  if (selectedBreakdownIds.length === 0) {\n    return false;\n  }\n\n  const currentBreakdown = selectedBreakdownIds[0];\n  \n  // Rule 2: Check \"pick-only-one\" groups\n  if (\n    (GEOGRAPHY_GROUP.includes(currentBreakdown) && GEOGRAPHY_GROUP.includes(breakdownId)) ||\n    (DEVICE_GROUP.includes(currentBreakdown) && DEVICE_GROUP.includes(breakdownId)) ||\n    (PLACEMENT_GROUP.includes(currentBreakdown) && PLACEMENT_GROUP.includes(breakdownId)) ||\n    (TIME_GROUP.includes(currentBreakdown) && TIME_GROUP.includes(breakdownId)) ||\n    (ASSET_GROUP.includes(currentBreakdown) && ASSET_GROUP.includes(breakdownId))\n  ) {\n    return true;\n  }\n\n  // Rule 3: Hourly breakdowns must stand alone\n  if (\n    (TIME_GROUP.includes(currentBreakdown) && !TIME_GROUP.includes(breakdownId)) ||\n    (TIME_GROUP.includes(breakdownId) && !TIME_GROUP.includes(currentBreakdown))\n  ) {\n    return true;\n  }\n\n  // Rule 4: Check if the pair is in the known-good list\n  const isPairValid = VALID_PAIRS.some(pair => \n    (pair[0] === currentBreakdown && pair[1] === breakdownId) || \n    (pair[1] === currentBreakdown && pair[0] === breakdownId)\n  );\n  \n  // Return whether this pair is valid for selection\n  return !isPairValid;\n};\n\n// Get tooltip message explaining why a breakdown is disabled\nexport const getDisabledTooltip = (breakdownId, selectedFields, selectedBreakdowns) => {\n  // Create a simulated state as if this breakdown was selected\n  const simulatedBreakdowns = { ...selectedBreakdowns };\n  simulatedBreakdowns[breakdownId] = true;\n  \n  // Validate the simulated combo\n  const validation = validateMetaBreakdownCombo(selectedFields, simulatedBreakdowns);\n  \n  // Return the first error message if invalid\n  if (!validation.valid) {\n    return validation.errors[0]; \n  }\n  \n  return \"\"; // Should not happen as isBreakdownDisabled would have returned false\n};\n\n// Get the comma-separated list of selected fields\nexport const getSelectedFieldsString = (selectedFields) => {\n  return Object.entries(selectedFields)\n    .filter(([_, isSelected]) => isSelected)\n    .map(([fieldId, _]) => fieldId)\n    .join(',');\n};\n\n// Get the comma-separated list of selected breakdowns\nexport const getSelectedBreakdownsString = (selectedBreakdowns) => {\n  return Object.entries(selectedBreakdowns)\n    .filter(([_, isSelected]) => isSelected)\n    .map(([breakdownId, _]) => breakdownId)\n    .join(',');\n};\n\n// Build API parameters for Meta requests\nexport const buildApiParams = (startDateInput, endDateInput, incrementInput, selectedFields, selectedBreakdowns, actionBreakdowns = null) => {\n  const fields = Object.entries(selectedFields)\n                  .filter(([,v]) => v).map(([k]) => k).join(',');\n\n  const active = Object.entries(selectedBreakdowns)\n                  .filter(([,v]) => v).map(([k]) => k);\n\n  const hasIOS  = active.includes('os_ios');\n  const hasAND  = active.includes('os_and');\n\n  // real breakdown list we will send\n  const breakdowns = active.filter(id => !isVirtualOS(id));\n\n  // ensure impression_device is included if a virtual OS was picked\n  if ((hasIOS || hasAND) && !breakdowns.includes('impression_device'))\n      breakdowns.push('impression_device');\n\n  const params = {\n    start_date: startDateInput,\n    end_date:   endDateInput,\n    time_increment: parseInt(incrementInput,10) || 1,\n    fields\n  };\n\n  if (breakdowns.length) params.breakdowns = breakdowns.join(',');\n\n  // Add action_breakdowns parameter if provided\n  if (actionBreakdowns) {\n    params.action_breakdowns = actionBreakdowns;\n  }\n\n  // add filtering for virtual OS\n  if (hasIOS || hasAND) {\n    const key  = hasIOS ? 'os_ios' : 'os_and';\n    params.filtering = JSON.stringify([{\n      field: 'impression_device',\n      operator: 'IN',\n      value: VIRTUAL_OS_MAP[key].filterValues\n    }]);\n  }\n\n  return params;\n};\n\n// Validate date format (YYYY-MM-DD)\nexport const isValidDate = (dateStr) => {\n  const regex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!regex.test(dateStr)) return false;\n  \n  const [year, month, day] = dateStr.split('-').map(Number);\n  const date = new Date(year, month - 1, day);\n  \n  return date.getFullYear() === year && \n         date.getMonth() === month - 1 && \n         date.getDate() === day;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}