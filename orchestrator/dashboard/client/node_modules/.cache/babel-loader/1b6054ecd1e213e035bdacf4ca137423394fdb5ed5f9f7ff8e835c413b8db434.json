{"ast":null,"code":"var _jsxFileName = \"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/dashboard/ROASSparkline.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { dashboardApi } from '../../services/dashboardApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ROASSparkline = ({\n  entityType,\n  entityId,\n  currentROAS,\n  conversionCount = 0,\n  breakdown = 'all',\n  startDate,\n  endDate\n}) => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const svgRef = useRef(null);\n\n  // Get ROAS performance color with intensity based on conversion count\n  const getROASPerformanceColor = (roas, conversions = 0) => {\n    const roasValue = parseFloat(roas) || 0;\n    const hasSignificantData = conversions >= 5; // 5+ conversions = darker, <5 = lighter\n\n    if (roasValue < 1.0) {\n      return hasSignificantData ? 'text-red-600' : 'text-red-400';\n    }\n    if (roasValue >= 1.0 && roasValue < 1.5) {\n      return hasSignificantData ? 'text-yellow-600' : 'text-yellow-400';\n    }\n    // >= 1.5\n    return hasSignificantData ? 'text-green-600' : 'text-green-400';\n  };\n\n  // Calculate limited date range (max 14 days)\n  const getLimitedDateRange = (start, end) => {\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n    if (daysDiff <= 14) {\n      return {\n        start,\n        end\n      };\n    }\n\n    // Take the last 14 days from the end date\n    const limitedStart = new Date(endDate);\n    limitedStart.setDate(limitedStart.getDate() - 13); // 13 days back + end date = 14 days\n\n    return {\n      start: limitedStart.toISOString().split('T')[0],\n      end\n    };\n  };\n\n  // Load chart data\n  useEffect(() => {\n    const loadChartData = async () => {\n      if (!entityId || !startDate || !endDate) {\n        return;\n      }\n      setLoading(true);\n      setError(null);\n      try {\n        // Limit to 14 days maximum\n        const {\n          start: limitedStart,\n          end: limitedEnd\n        } = getLimitedDateRange(startDate, endDate);\n        const apiParams = {\n          entity_type: entityType,\n          entity_id: entityId,\n          breakdown: breakdown,\n          start_date: limitedStart,\n          end_date: limitedEnd\n        };\n        const response = await dashboardApi.getAnalyticsChartData(apiParams);\n        if (response && response.success && response.chart_data) {\n          setChartData(response.chart_data);\n        } else {\n          console.error('ROASSparkline: Invalid API response for', entityId, response);\n          setError('Invalid API response');\n        }\n      } catch (error) {\n        console.error('ROASSparkline: API call failed for', entityId, error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadChartData();\n  }, [entityType, entityId, breakdown, startDate, endDate]);\n\n  // Handle mouse move over SVG\n  const handleMouseMove = event => {\n    if (!svgRef.current || chartData.length < 2) return;\n    const svgRect = svgRef.current.getBoundingClientRect();\n    const mouseX = event.clientX - svgRect.left;\n    const width = 60;\n    const padding = 2;\n    const dataWidth = width - 2 * padding;\n\n    // Calculate which data point is closest\n    const relativeX = Math.max(0, Math.min(dataWidth, mouseX - padding));\n    const dataIndex = Math.round(relativeX / dataWidth * (chartData.length - 1));\n    if (dataIndex >= 0 && dataIndex < chartData.length) {\n      setHoveredPoint(dataIndex);\n      setTooltipPosition({\n        x: event.clientX,\n        y: event.clientY - 60\n      });\n    }\n  };\n  const handleMouseLeave = () => {\n    setHoveredPoint(null);\n  };\n\n  // Format date for tooltip\n  const formatDate = dateStr => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Format ROAS value\n  const formatROAS = value => {\n    const roas = parseFloat(value) || 0;\n    return roas.toFixed(2);\n  };\n\n  // Calculate current ROAS color (using conversionCount passed as prop)\n  const colorClass = getROASPerformanceColor(currentROAS, conversionCount);\n\n  // Check if we have enough valid data for sparkline\n  const hasEnoughData = chartData.length >= 2 && chartData.some(d => parseFloat(d.daily_roas) > 0 || parseFloat(d.daily_spend) > 0 || parseFloat(d.daily_estimated_revenue) > 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center space-x-3 min-w-[120px] relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: `font-medium text-sm ${colorClass}`,\n      children: formatROAS(currentROAS)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-w-[60px] relative\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-[60px] h-[20px] bg-blue-200 animate-pulse rounded flex items-center justify-center text-xs\",\n        children: \"\\u23F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-[60px] h-[20px] flex items-center justify-center text-red-400 text-xs border border-red-300\",\n        children: \"\\u274C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this) : hasEnoughData ?\n      // Real sparkline using actual data\n      (() => {\n        const width = 60;\n        const height = 20;\n        const padding = 2;\n        const values = chartData.map(d => parseFloat(d.daily_roas) || 0);\n        const minValue = Math.min(...values);\n        const maxValue = Math.max(...values);\n        const range = maxValue - minValue || 0.1; // Prevent division by zero\n\n        const points = values.map((value, index) => {\n          const x = padding + index / (values.length - 1) * (width - 2 * padding);\n          const y = height - padding - (value - minValue) / range * (height - 2 * padding);\n          return `${x},${y}`;\n        });\n\n        // Create colored segments using midpoint approach\n        const segments = [];\n        for (let i = 0; i < points.length - 1; i++) {\n          // Calculate midpoint ROAS and conversion values for segment coloring\n          const startROAS = values[i];\n          const endROAS = values[i + 1];\n          const midpointROAS = (startROAS + endROAS) / 2;\n          const startConversions = parseInt(chartData[i].daily_mixpanel_purchases) || 0;\n          const endConversions = parseInt(chartData[i + 1].daily_mixpanel_purchases) || 0;\n          const midpointConversions = Math.round((startConversions + endConversions) / 2);\n          const segmentColor = getROASPerformanceColor(midpointROAS, midpointConversions);\n          segments.push({\n            path: `M ${points[i]} L ${points[i + 1]}`,\n            color: segmentColor\n          });\n        }\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            ref: svgRef,\n            width: \"60\",\n            height: \"20\",\n            className: \"overflow-visible cursor-crosshair\",\n            onMouseMove: handleMouseMove,\n            onMouseLeave: handleMouseLeave,\n            children: [segments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n              d: segment.path,\n              fill: \"none\",\n              stroke: \"currentColor\",\n              strokeWidth: \"1.5\",\n              className: segment.color\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this)), values.map((value, index) => {\n              const x = padding + index / (values.length - 1) * (width - 2 * padding);\n              const y = height - padding - (value - minValue) / range * (height - 2 * padding);\n              const isHovered = hoveredPoint === index;\n              const dayConversions = parseInt(chartData[index].daily_mixpanel_purchases) || 0;\n              const dayColor = getROASPerformanceColor(value, dayConversions);\n              return /*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: x,\n                cy: y,\n                r: isHovered ? \"2.5\" : \"1\",\n                fill: \"currentColor\",\n                className: dayColor,\n                style: {\n                  filter: isHovered ? 'drop-shadow(0 0 3px rgba(0,0,0,0.3))' : 'none'\n                }\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 23\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this), hoveredPoint !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"fixed z-50 bg-gray-900 text-white text-xs rounded px-2 py-1 pointer-events-none shadow-lg\",\n            style: {\n              left: tooltipPosition.x - 120,\n              // Move tooltip to the left of cursor\n              top: tooltipPosition.y,\n              transform: 'none' // Remove centering transform\n            },\n            children: [(() => {\n              const dayData = chartData[hoveredPoint];\n              const spend = parseFloat(dayData.daily_spend) || 0;\n              const revenue = parseFloat(dayData.daily_estimated_revenue) || 0;\n              const backendROAS = parseFloat(dayData.daily_roas) || 0;\n\n              // Verify ROAS calculation\n              const calculatedROAS = spend > 0 ? revenue / spend : 0;\n              const roasMatch = Math.abs(backendROAS - calculatedROAS) < 0.01;\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"font-medium text-white\",\n                  children: formatDate(dayData.date)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: getROASPerformanceColor(backendROAS, dayData.daily_mixpanel_purchases || 0).replace('text-', 'text-').replace('600', '400'),\n                  children: [\"ROAS: \", formatROAS(backendROAS), !roasMatch && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"text-yellow-400 ml-1\",\n                    title: `Calculated: ${calculatedROAS.toFixed(2)}`,\n                    children: \"\\u26A0\\uFE0F\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 270,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true);\n            })(), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-300 text-xs\",\n              children: [\"Spend: $\", (parseFloat(chartData[hoveredPoint].daily_spend) || 0).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-300 text-xs\",\n              children: [\"Revenue: $\", (parseFloat(chartData[hoveredPoint].daily_estimated_revenue) || 0).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 27\n            }, this), (() => {\n              const spend = parseFloat(chartData[hoveredPoint].daily_spend) || 0;\n              const revenue = parseFloat(chartData[hoveredPoint].daily_estimated_revenue) || 0;\n              const accuracyRatio = parseFloat(chartData[hoveredPoint].period_accuracy_ratio) || 0;\n              if (spend > 0) {\n                const baseROAS = (revenue / spend).toFixed(2);\n                if (accuracyRatio > 0 && accuracyRatio !== 1.0) {\n                  const adjustedRevenue = revenue / accuracyRatio;\n                  const adjustedROAS = (adjustedRevenue / spend).toFixed(2);\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-gray-400 text-xs\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [\"Base: $\", revenue.toFixed(2), \" \\xF7 $\", spend.toFixed(2), \" = \", baseROAS]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 37\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [\"Ratio: \", (accuracyRatio * 100).toFixed(1), \"% (MP/Meta)\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 298,\n                      columnNumber: 37\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [\"Adj: $\", adjustedRevenue.toFixed(2), \" \\xF7 $\", spend.toFixed(2), \" = \", adjustedROAS]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 299,\n                      columnNumber: 37\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 35\n                  }, this);\n                } else {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-gray-400 text-xs\",\n                    children: [\"Calc: $\", revenue.toFixed(2), \" \\xF7 $\", spend.toFixed(2), \" = \", baseROAS]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 35\n                  }, this);\n                }\n              }\n              return null;\n            })(), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-green-300 text-xs\",\n              children: [\"Conversions: \", chartData[hoveredPoint].daily_mixpanel_purchases || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-blue-300 text-xs\",\n              children: [\"Trials: \", chartData[hoveredPoint].daily_mixpanel_trials || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 11\n            }, this), chartData[hoveredPoint].daily_meta_trials && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-gray-400 text-xs\",\n              children: [\"Meta Trials: \", chartData[hoveredPoint].daily_meta_trials]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true);\n      })() :\n      /*#__PURE__*/\n      // No data placeholder - subtle dashed gray line\n      _jsxDEV(\"div\", {\n        className: \"w-[60px] h-[20px] flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          width: \"60\",\n          height: \"20\",\n          className: \"overflow-visible\",\n          children: /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: \"2\",\n            y1: \"10\",\n            x2: \"58\",\n            y2: \"10\",\n            stroke: \"currentColor\",\n            strokeWidth: \"1\",\n            strokeDasharray: \"2,2\",\n            className: \"text-gray-300 dark:text-gray-600\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(ROASSparkline, \"y1jbfTjogO0whjmDMGchrevQwDs=\");\n_c = ROASSparkline;\nexport default ROASSparkline;\nvar _c;\n$RefreshReg$(_c, \"ROASSparkline\");","map":{"version":3,"names":["React","useState","useEffect","useRef","dashboardApi","jsxDEV","_jsxDEV","Fragment","_Fragment","ROASSparkline","entityType","entityId","currentROAS","conversionCount","breakdown","startDate","endDate","_s","chartData","setChartData","loading","setLoading","error","setError","hoveredPoint","setHoveredPoint","tooltipPosition","setTooltipPosition","x","y","svgRef","getROASPerformanceColor","roas","conversions","roasValue","parseFloat","hasSignificantData","getLimitedDateRange","start","end","Date","daysDiff","Math","ceil","limitedStart","setDate","getDate","toISOString","split","loadChartData","limitedEnd","apiParams","entity_type","entity_id","start_date","end_date","response","getAnalyticsChartData","success","chart_data","console","message","handleMouseMove","event","current","length","svgRect","getBoundingClientRect","mouseX","clientX","left","width","padding","dataWidth","relativeX","max","min","dataIndex","round","clientY","handleMouseLeave","formatDate","dateStr","date","toLocaleDateString","month","day","formatROAS","value","toFixed","colorClass","hasEnoughData","some","d","daily_roas","daily_spend","daily_estimated_revenue","className","children","fileName","_jsxFileName","lineNumber","columnNumber","height","values","map","minValue","maxValue","range","points","index","segments","i","startROAS","endROAS","midpointROAS","startConversions","parseInt","daily_mixpanel_purchases","endConversions","midpointConversions","segmentColor","push","path","color","ref","onMouseMove","onMouseLeave","segment","fill","stroke","strokeWidth","isHovered","dayConversions","dayColor","cx","cy","r","style","filter","top","transform","dayData","spend","revenue","backendROAS","calculatedROAS","roasMatch","abs","replace","title","accuracyRatio","period_accuracy_ratio","baseROAS","adjustedRevenue","adjustedROAS","daily_mixpanel_trials","daily_meta_trials","x1","y1","x2","y2","strokeDasharray","_c","$RefreshReg$"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/dashboard/ROASSparkline.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { dashboardApi } from '../../services/dashboardApi';\n\nconst ROASSparkline = ({ \n  entityType, \n  entityId, \n  currentROAS,\n  conversionCount = 0,\n  breakdown = 'all',\n  startDate,\n  endDate \n}) => {\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hoveredPoint, setHoveredPoint] = useState(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  const svgRef = useRef(null);\n\n  // Get ROAS performance color with intensity based on conversion count\n  const getROASPerformanceColor = (roas, conversions = 0) => {\n    const roasValue = parseFloat(roas) || 0;\n    const hasSignificantData = conversions >= 5; // 5+ conversions = darker, <5 = lighter\n    \n    if (roasValue < 1.0) {\n      return hasSignificantData ? 'text-red-600' : 'text-red-400';\n    }\n    if (roasValue >= 1.0 && roasValue < 1.5) {\n      return hasSignificantData ? 'text-yellow-600' : 'text-yellow-400';\n    }\n    // >= 1.5\n    return hasSignificantData ? 'text-green-600' : 'text-green-400';\n  };\n\n  // Calculate limited date range (max 14 days)\n  const getLimitedDateRange = (start, end) => {\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n    \n    if (daysDiff <= 14) {\n      return { start, end };\n    }\n    \n    // Take the last 14 days from the end date\n    const limitedStart = new Date(endDate);\n    limitedStart.setDate(limitedStart.getDate() - 13); // 13 days back + end date = 14 days\n    \n    return {\n      start: limitedStart.toISOString().split('T')[0],\n      end\n    };\n  };\n\n  // Load chart data\n  useEffect(() => {\n    const loadChartData = async () => {\n      if (!entityId || !startDate || !endDate) {\n        return;\n      }\n      \n      setLoading(true);\n      setError(null);\n      \n      try {\n        // Limit to 14 days maximum\n        const { start: limitedStart, end: limitedEnd } = getLimitedDateRange(startDate, endDate);\n        \n        const apiParams = {\n          entity_type: entityType,\n          entity_id: entityId,\n          breakdown: breakdown,\n          start_date: limitedStart,\n          end_date: limitedEnd\n        };\n        \n        const response = await dashboardApi.getAnalyticsChartData(apiParams);\n        \n        if (response && response.success && response.chart_data) {\n          setChartData(response.chart_data);\n        } else {\n          console.error('ROASSparkline: Invalid API response for', entityId, response);\n          setError('Invalid API response');\n        }\n      } catch (error) {\n        console.error('ROASSparkline: API call failed for', entityId, error.message);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadChartData();\n  }, [entityType, entityId, breakdown, startDate, endDate]);\n\n  // Handle mouse move over SVG\n  const handleMouseMove = (event) => {\n    if (!svgRef.current || chartData.length < 2) return;\n    \n    const svgRect = svgRef.current.getBoundingClientRect();\n    const mouseX = event.clientX - svgRect.left;\n    \n    const width = 60;\n    const padding = 2;\n    const dataWidth = width - 2 * padding;\n    \n    // Calculate which data point is closest\n    const relativeX = Math.max(0, Math.min(dataWidth, mouseX - padding));\n    const dataIndex = Math.round((relativeX / dataWidth) * (chartData.length - 1));\n    \n    if (dataIndex >= 0 && dataIndex < chartData.length) {\n      setHoveredPoint(dataIndex);\n      setTooltipPosition({ \n        x: event.clientX, \n        y: event.clientY - 60 \n      });\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setHoveredPoint(null);\n  };\n\n  // Format date for tooltip\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n  };\n\n  // Format ROAS value\n  const formatROAS = (value) => {\n    const roas = parseFloat(value) || 0;\n    return roas.toFixed(2);\n  };\n\n  // Calculate current ROAS color (using conversionCount passed as prop)\n  const colorClass = getROASPerformanceColor(currentROAS, conversionCount);\n  \n  // Check if we have enough valid data for sparkline\n  const hasEnoughData = chartData.length >= 2 && chartData.some(d => \n    parseFloat(d.daily_roas) > 0 || parseFloat(d.daily_spend) > 0 || parseFloat(d.daily_estimated_revenue) > 0\n  );\n\n  return (\n    <div className=\"flex items-center space-x-3 min-w-[120px] relative\">\n      {/* ROAS Value */}\n      <span className={`font-medium text-sm ${colorClass}`}>\n        {formatROAS(currentROAS)}\n      </span>\n      \n      {/* Sparkline Area */}\n      <div className=\"min-w-[60px] relative\">\n        {loading ? (\n          <div className=\"w-[60px] h-[20px] bg-blue-200 animate-pulse rounded flex items-center justify-center text-xs\">\n            ⏳\n          </div>\n        ) : error ? (\n          <div className=\"w-[60px] h-[20px] flex items-center justify-center text-red-400 text-xs border border-red-300\">\n            ❌\n          </div>\n        ) : hasEnoughData ? (\n          // Real sparkline using actual data\n          (() => {\n            const width = 60;\n            const height = 20;\n            const padding = 2;\n            \n            const values = chartData.map(d => parseFloat(d.daily_roas) || 0);\n            const minValue = Math.min(...values);\n            const maxValue = Math.max(...values);\n            const range = maxValue - minValue || 0.1; // Prevent division by zero\n            \n            const points = values.map((value, index) => {\n              const x = padding + (index / (values.length - 1)) * (width - 2 * padding);\n              const y = height - padding - ((value - minValue) / range) * (height - 2 * padding);\n              return `${x},${y}`;\n            });\n            \n            // Create colored segments using midpoint approach\n            const segments = [];\n            for (let i = 0; i < points.length - 1; i++) {\n              // Calculate midpoint ROAS and conversion values for segment coloring\n              const startROAS = values[i];\n              const endROAS = values[i + 1];\n              const midpointROAS = (startROAS + endROAS) / 2;\n              \n              const startConversions = parseInt(chartData[i].daily_mixpanel_purchases) || 0;\n              const endConversions = parseInt(chartData[i + 1].daily_mixpanel_purchases) || 0;\n              const midpointConversions = Math.round((startConversions + endConversions) / 2);\n              \n              const segmentColor = getROASPerformanceColor(midpointROAS, midpointConversions);\n              segments.push({\n                path: `M ${points[i]} L ${points[i + 1]}`,\n                color: segmentColor\n              });\n            }\n            \n            return (\n              <>\n                <svg \n                  ref={svgRef}\n                  width=\"60\" \n                  height=\"20\" \n                  className=\"overflow-visible cursor-crosshair\"\n                  onMouseMove={handleMouseMove}\n                  onMouseLeave={handleMouseLeave}\n                >\n                  {/* Render each segment with its own color */}\n                  {segments.map((segment, index) => (\n                    <path\n                      key={index}\n                      d={segment.path}\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"1.5\"\n                      className={segment.color}\n                    />\n                  ))}\n                  {values.map((value, index) => {\n                    const x = padding + (index / (values.length - 1)) * (width - 2 * padding);\n                    const y = height - padding - ((value - minValue) / range) * (height - 2 * padding);\n                    const isHovered = hoveredPoint === index;\n                    const dayConversions = parseInt(chartData[index].daily_mixpanel_purchases) || 0;\n                    const dayColor = getROASPerformanceColor(value, dayConversions);\n                    \n                    return (\n                      <circle\n                        key={index}\n                        cx={x}\n                        cy={y}\n                        r={isHovered ? \"2.5\" : \"1\"}\n                        fill=\"currentColor\"\n                        className={dayColor}\n                        style={{\n                          filter: isHovered ? 'drop-shadow(0 0 3px rgba(0,0,0,0.3))' : 'none'\n                        }}\n                      />\n                    );\n                  })}\n                </svg>\n                \n                {/* Tooltip */}\n                {hoveredPoint !== null && (\n                  <div \n                    className=\"fixed z-50 bg-gray-900 text-white text-xs rounded px-2 py-1 pointer-events-none shadow-lg\"\n                    style={{\n                      left: tooltipPosition.x - 120, // Move tooltip to the left of cursor\n                      top: tooltipPosition.y,\n                      transform: 'none' // Remove centering transform\n                    }}\n                  >\n                    {(() => {\n                      const dayData = chartData[hoveredPoint];\n                      const spend = parseFloat(dayData.daily_spend) || 0;\n                      const revenue = parseFloat(dayData.daily_estimated_revenue) || 0;\n                      const backendROAS = parseFloat(dayData.daily_roas) || 0;\n                      \n                      // Verify ROAS calculation\n                      const calculatedROAS = spend > 0 ? revenue / spend : 0;\n                      const roasMatch = Math.abs(backendROAS - calculatedROAS) < 0.01;\n                      \n                      return (\n                        <>\n                          <div className=\"font-medium text-white\">\n                            {formatDate(dayData.date)}\n                          </div>\n                          <div className={getROASPerformanceColor(backendROAS, dayData.daily_mixpanel_purchases || 0).replace('text-', 'text-').replace('600', '400')}>\n                            ROAS: {formatROAS(backendROAS)}\n                            {!roasMatch && (\n                              <span className=\"text-yellow-400 ml-1\" title={`Calculated: ${calculatedROAS.toFixed(2)}`}>\n                                ⚠️\n                              </span>\n                            )}\n                          </div>\n                        </>\n                      );\n                    })()}\n                          <div className=\"text-gray-300 text-xs\">\n                            Spend: ${(parseFloat(chartData[hoveredPoint].daily_spend) || 0).toFixed(2)}\n                          </div>\n                          <div className=\"text-gray-300 text-xs\">\n                            Revenue: ${(parseFloat(chartData[hoveredPoint].daily_estimated_revenue) || 0).toFixed(2)}\n                          </div>\n                          {(() => {\n                            const spend = parseFloat(chartData[hoveredPoint].daily_spend) || 0;\n                            const revenue = parseFloat(chartData[hoveredPoint].daily_estimated_revenue) || 0;\n                            const accuracyRatio = parseFloat(chartData[hoveredPoint].period_accuracy_ratio) || 0;\n                            \n                            if (spend > 0) {\n                              const baseROAS = (revenue / spend).toFixed(2);\n                              \n                              if (accuracyRatio > 0 && accuracyRatio !== 1.0) {\n                                const adjustedRevenue = revenue / accuracyRatio;\n                                const adjustedROAS = (adjustedRevenue / spend).toFixed(2);\n                                return (\n                                  <div className=\"text-gray-400 text-xs\">\n                                    <div>Base: ${revenue.toFixed(2)} ÷ ${spend.toFixed(2)} = {baseROAS}</div>\n                                    <div>Ratio: {(accuracyRatio * 100).toFixed(1)}% (MP/Meta)</div>\n                                    <div>Adj: ${adjustedRevenue.toFixed(2)} ÷ ${spend.toFixed(2)} = {adjustedROAS}</div>\n                                  </div>\n                                );\n                              } else {\n                                return (\n                                  <div className=\"text-gray-400 text-xs\">\n                                    Calc: ${revenue.toFixed(2)} ÷ ${spend.toFixed(2)} = {baseROAS}\n                                  </div>\n                                );\n                              }\n                            }\n                            return null;\n                          })()}\n          {/* Show conversion counts for confidence assessment */}\n          <div className=\"text-green-300 text-xs\">\n            Conversions: {chartData[hoveredPoint].daily_mixpanel_purchases || 0}\n          </div>\n          <div className=\"text-blue-300 text-xs\">\n            Trials: {chartData[hoveredPoint].daily_mixpanel_trials || 0}\n          </div>\n          {/* Show Meta comparison if available */}\n          {chartData[hoveredPoint].daily_meta_trials && (\n            <div className=\"text-gray-400 text-xs\">\n              Meta Trials: {chartData[hoveredPoint].daily_meta_trials}\n            </div>\n          )}\n                  </div>\n                )}\n              </>\n            );\n          })()\n        ) : (\n          // No data placeholder - subtle dashed gray line\n          <div className=\"w-[60px] h-[20px] flex items-center justify-center\">\n            <svg width=\"60\" height=\"20\" className=\"overflow-visible\">\n              <line\n                x1=\"2\"\n                y1=\"10\"\n                x2=\"58\"\n                y2=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"1\"\n                strokeDasharray=\"2,2\"\n                className=\"text-gray-300 dark:text-gray-600\"\n              />\n            </svg>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ROASSparkline; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}