{"ast":null,"code":"import _objectSpread from\"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{api}from'../../services/api';import{META_ACTION_TYPES,ALL_META_ACTION_TYPES,SUGGESTED_BUSINESS_CONCEPTS,getActionTypeCategory,getBusinessConceptSuggestions}from'./utils/metaActionTypes';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ActionMapper=()=>{const[mappings,setMappings]=useState({});const[availableActions,setAvailableActions]=useState([]);const[loading,setLoading]=useState(false);const[newMapping,setNewMapping]=useState({conceptName:'',actionTypes:[],aggregationType:'sum'// 'sum', 'count', 'average'\n});const[showAddForm,setShowAddForm]=useState(false);const[showSuggestions,setShowSuggestions]=useState(false);// Default business concepts from comprehensive analysis\nconst businessConcepts=Object.keys(SUGGESTED_BUSINESS_CONCEPTS);useEffect(()=>{loadMappings();loadKnownActionTypes();},[]);const loadKnownActionTypes=()=>{// Start with our comprehensive list of 49 known action types\nsetAvailableActions(ALL_META_ACTION_TYPES);// Also try to discover additional ones from historical data\ndiscoverAvailableActions();};const loadMappings=async()=>{try{// Try to load from backend first\nconst backendMappings=await api.getActionMappings();if(backendMappings.mappings&&Object.keys(backendMappings.mappings).length>0){setMappings(backendMappings.mappings);// Also sync to localStorage for offline access\nlocalStorage.setItem('meta_action_mappings',JSON.stringify(backendMappings.mappings));return;}// Fallback to localStorage\nconst savedMappings=localStorage.getItem('meta_action_mappings');if(savedMappings){const localMappings=JSON.parse(savedMappings);setMappings(localMappings);// Sync localStorage mappings to backend\nif(Object.keys(localMappings).length>0){await api.saveActionMappings(localMappings);}}}catch(error){console.error('Error loading mappings:',error);// Fallback to localStorage if backend fails\ntry{const savedMappings=localStorage.getItem('meta_action_mappings');if(savedMappings){setMappings(JSON.parse(savedMappings));}}catch(localError){console.error('Error loading from localStorage:',localError);}}};const saveMappings=async newMappings=>{try{// Save to backend\nawait api.saveActionMappings(newMappings);// Update local state\nsetMappings(newMappings);// Also save to localStorage as backup\nlocalStorage.setItem('meta_action_mappings',JSON.stringify(newMappings));console.log('Action mappings saved successfully');}catch(error){console.error('Error saving mappings to backend:',error);// Fallback to localStorage only\nsetMappings(newMappings);localStorage.setItem('meta_action_mappings',JSON.stringify(newMappings));alert('Mappings saved locally, but failed to sync to server. They will be synced next time the page loads.');}};const discoverAvailableActions=async()=>{setLoading(true);try{// Get recent historical data to discover action types\nconst configs=await api.getHistoricalConfigurations();const discoveredActionTypes=new Set();for(const config of configs.slice(0,3)){// Check recent configs\nif(config.day_count>0){try{const data=await api.exportHistoricalData({start_date:config.latest_date,end_date:config.latest_date,fields:config.fields,breakdowns:config.breakdowns});// Extract action types from the data\ndata.data.forEach(dayData=>{let records=[];// More defensive extraction of records\nif(dayData.data&&dayData.data.data&&Array.isArray(dayData.data.data)){records=dayData.data.data;}else if(dayData.data&&Array.isArray(dayData.data)){records=dayData.data;}else{console.warn('Unexpected data structure in ActionMapper:',dayData);return;// Skip this dayData\n}if(!Array.isArray(records)){console.warn('Records is not an array in ActionMapper:',typeof records,records);return;}records.forEach(record=>{if(!record||typeof record!=='object'){console.warn('Invalid record in ActionMapper:',record);return;}// Extract from actions\nif(record.actions&&Array.isArray(record.actions)){record.actions.forEach(action=>{if(action&&action.action_type){discoveredActionTypes.add(action.action_type);}});}// Extract from action_values\nif(record.action_values&&Array.isArray(record.action_values)){record.action_values.forEach(action=>{if(action&&action.action_type){discoveredActionTypes.add(action.action_type);}});}// Extract from conversions\nif(record.conversions&&Array.isArray(record.conversions)){record.conversions.forEach(action=>{if(action&&action.action_type){discoveredActionTypes.add(action.action_type);}});}// Extract from conversion_values\nif(record.conversion_values&&Array.isArray(record.conversion_values)){record.conversion_values.forEach(action=>{if(action&&action.action_type){discoveredActionTypes.add(action.action_type);}});}});});}catch(error){console.error(\"Error loading data for config \".concat(config.config_hash,\":\"),error);}}}// Merge discovered actions with our comprehensive list\nconst allActions=new Set([...ALL_META_ACTION_TYPES,...Array.from(discoveredActionTypes)]);setAvailableActions(Array.from(allActions).sort());}catch(error){console.error('Error discovering actions:',error);// Fallback to our comprehensive list\nsetAvailableActions(ALL_META_ACTION_TYPES);}finally{setLoading(false);}};const addMapping=()=>{if(!newMapping.conceptName||newMapping.actionTypes.length===0){alert('Please enter a concept name and select at least one action type');return;}const newMappings=_objectSpread(_objectSpread({},mappings),{},{[newMapping.conceptName]:{actionTypes:newMapping.actionTypes,aggregationType:newMapping.aggregationType,createdAt:new Date().toISOString()}});saveMappings(newMappings);setNewMapping({conceptName:'',actionTypes:[],aggregationType:'sum'});setShowAddForm(false);};const deleteMapping=conceptName=>{if(window.confirm(\"Are you sure you want to delete the mapping for \\\"\".concat(conceptName,\"\\\"?\"))){const newMappings=_objectSpread({},mappings);delete newMappings[conceptName];saveMappings(newMappings);}};const toggleActionType=actionType=>{const currentTypes=newMapping.actionTypes;const newTypes=currentTypes.includes(actionType)?currentTypes.filter(t=>t!==actionType):[...currentTypes,actionType];setNewMapping(_objectSpread(_objectSpread({},newMapping),{},{actionTypes:newTypes}));};const categorizeActionTypes=actionTypes=>{const categories={};// Initialize categories based on our comprehensive categorization\nObject.keys(META_ACTION_TYPES).forEach(category=>{const categoryName=category.replace(/_/g,' ').toLowerCase().replace(/\\b\\w/g,l=>l.toUpperCase());categories[categoryName]=[];});// Add 'Other' category for unknown action types\ncategories['Other']=[];actionTypes.forEach(actionType=>{const category=getActionTypeCategory(actionType);if(category==='OTHER'){categories['Other'].push(actionType);}else{const categoryName=category.replace(/_/g,' ').toLowerCase().replace(/\\b\\w/g,l=>l.toUpperCase());if(categories[categoryName]){categories[categoryName].push(actionType);}else{categories['Other'].push(actionType);}}});return categories;};const getSuggestions=()=>{if(newMapping.actionTypes.length===0)return[];return getBusinessConceptSuggestions(newMapping.actionTypes);};const applySuggestion=suggestion=>{setNewMapping(_objectSpread(_objectSpread({},newMapping),{},{conceptName:suggestion.concept,actionTypes:[...new Set([...newMapping.actionTypes,...suggestion.matchingActions])]}));};const getMappingStats=()=>{const totalMappings=Object.keys(mappings).length;const totalActionsMapped=Object.values(mappings).reduce((sum,mapping)=>sum+mapping.actionTypes.length,0);const unmappedActions=availableActions.filter(action=>!Object.values(mappings).some(mapping=>mapping.actionTypes.includes(action)));return{totalMappings,totalActionsMapped,unmappedActions};};const stats=getMappingStats();return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-4\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold\",children:\"Meta Action Mapping\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowAddForm(!showAddForm),className:\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\",children:showAddForm?'Cancel':'Add New Mapping'})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600 dark:text-gray-400 mb-4\",children:\"Map Meta action types to business concepts for better reporting and analysis. This helps aggregate related actions into meaningful metrics.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 dark:bg-blue-900 p-3 rounded\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-blue-600 dark:text-blue-300\",children:\"Total Mappings\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-bold text-blue-800 dark:text-blue-100\",children:stats.totalMappings})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-green-50 dark:bg-green-900 p-3 rounded\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-green-600 dark:text-green-300\",children:\"Actions Mapped\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-bold text-green-800 dark:text-green-100\",children:stats.totalActionsMapped})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-orange-50 dark:bg-orange-900 p-3 rounded\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-orange-600 dark:text-orange-300\",children:\"Unmapped Actions\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xl font-bold text-orange-800 dark:text-orange-100\",children:stats.unmappedActions.length})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-500\",children:[availableActions.length,\" unique action types available (including \",ALL_META_ACTION_TYPES.length,\" known from comprehensive analysis)\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:discoverAvailableActions,disabled:loading,className:\"text-sm text-blue-600 hover:text-blue-800 disabled:text-gray-400\",children:loading?'Discovering...':'Refresh Action Types'})]})]}),showAddForm&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-medium mb-4\",children:\"Create New Mapping\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium mb-1\",children:\"Concept Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMapping.conceptName,onChange:e=>setNewMapping(_objectSpread(_objectSpread({},newMapping),{},{conceptName:e.target.value})),placeholder:\"e.g., conversions, leads, purchases\",className:\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-xs text-gray-500\",children:[\"Suggested: \",businessConcepts.join(', ')]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium mb-1\",children:\"Aggregation Type\"}),/*#__PURE__*/_jsxs(\"select\",{value:newMapping.aggregationType,onChange:e=>setNewMapping(_objectSpread(_objectSpread({},newMapping),{},{aggregationType:e.target.value})),className:\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"sum\",children:\"Sum (total count/value)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"count\",children:\"Count (number of action types)\"}),/*#__PURE__*/_jsx(\"option\",{value:\"average\",children:\"Average (mean value)\"})]})]})]}),newMapping.actionTypes.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between mb-2\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-sm font-medium text-blue-800 dark:text-blue-200\",children:\"\\uD83D\\uDCA1 Smart Suggestions\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowSuggestions(!showSuggestions),className:\"text-xs text-blue-600 hover:text-blue-800\",children:[showSuggestions?'Hide':'Show',\" Suggestions\"]})]}),showSuggestions&&/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2\",children:[getSuggestions().map((suggestion,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-2 bg-white dark:bg-gray-700 rounded text-xs\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium text-blue-600\",children:suggestion.concept}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-gray-500 ml-2\",children:[\"(\",Math.round(suggestion.confidence*100),\"% match)\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-400 mt-1\",children:suggestion.description})]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>applySuggestion(suggestion),className:\"px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\",children:\"Apply\"})]},index)),getSuggestions().length===0&&/*#__PURE__*/_jsx(\"div\",{className:\"text-xs text-gray-500 italic\",children:\"No business concept suggestions for your current selection.\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsxs(\"label\",{className:\"block text-sm font-medium mb-2\",children:[\"Select Action Types (\",newMapping.actionTypes.length,\" selected)\"]}),Object.entries(categorizeActionTypes(availableActions)).map(_ref=>{let[category,actions]=_ref;return actions.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\",children:category}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-2\",children:actions.map(actionType=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>toggleActionType(actionType),className:\"px-3 py-1 rounded-full text-xs \".concat(newMapping.actionTypes.includes(actionType)?'bg-blue-500 text-white':'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300'),children:actionType},actionType))})]},category);})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:addMapping,className:\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\",children:\"Create Mapping\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowAddForm(false),className:\"px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400\",children:\"Cancel\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-medium mb-4\",children:[\"Current Mappings (\",Object.keys(mappings).length,\")\"]}),Object.keys(mappings).length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"text-center py-8 text-gray-500\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"No mappings created yet.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm mt-2\",children:\"Create your first mapping to start organizing action types into business concepts.\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"space-y-4\",children:Object.entries(mappings).map(_ref2=>{let[conceptName,mapping]=_ref2;return/*#__PURE__*/_jsxs(\"div\",{className:\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-start mb-2\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"text-lg font-medium text-blue-800 dark:text-blue-200\",children:conceptName}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-500\",children:[\"Aggregation: \",mapping.aggregationType,\" \\u2022 \",mapping.actionTypes.length,\" action types\"]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>deleteMapping(conceptName),className:\"text-red-500 hover:text-red-700 text-sm\",children:\"Delete\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-2\",children:mapping.actionTypes.map(actionType=>/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs\",children:actionType},actionType))})]},conceptName);})})]}),stats.unmappedActions.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"text-lg font-medium mb-4\",children:[\"Unmapped Action Types (\",stats.unmappedActions.length,\")\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-wrap gap-2\",children:stats.unmappedActions.map(actionType=>/*#__PURE__*/_jsx(\"span\",{className:\"px-2 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 rounded text-xs\",children:actionType},actionType))})]})]});};export default ActionMapper;","map":{"version":3,"names":["React","useState","useEffect","api","META_ACTION_TYPES","ALL_META_ACTION_TYPES","SUGGESTED_BUSINESS_CONCEPTS","getActionTypeCategory","getBusinessConceptSuggestions","jsx","_jsx","jsxs","_jsxs","ActionMapper","mappings","setMappings","availableActions","setAvailableActions","loading","setLoading","newMapping","setNewMapping","conceptName","actionTypes","aggregationType","showAddForm","setShowAddForm","showSuggestions","setShowSuggestions","businessConcepts","Object","keys","loadMappings","loadKnownActionTypes","discoverAvailableActions","backendMappings","getActionMappings","length","localStorage","setItem","JSON","stringify","savedMappings","getItem","localMappings","parse","saveActionMappings","error","console","localError","saveMappings","newMappings","log","alert","configs","getHistoricalConfigurations","discoveredActionTypes","Set","config","slice","day_count","data","exportHistoricalData","start_date","latest_date","end_date","fields","breakdowns","forEach","dayData","records","Array","isArray","warn","record","actions","action","action_type","add","action_values","conversions","conversion_values","concat","config_hash","allActions","from","sort","addMapping","_objectSpread","createdAt","Date","toISOString","deleteMapping","window","confirm","toggleActionType","actionType","currentTypes","newTypes","includes","filter","t","categorizeActionTypes","categories","category","categoryName","replace","toLowerCase","l","toUpperCase","push","getSuggestions","applySuggestion","suggestion","concept","matchingActions","getMappingStats","totalMappings","totalActionsMapped","values","reduce","sum","mapping","unmappedActions","some","stats","className","children","onClick","disabled","type","value","onChange","e","target","placeholder","join","map","index","Math","round","confidence","description","entries","_ref","_ref2"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/components/meta/ActionMapper.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { api } from '../../services/api';\nimport { \n  META_ACTION_TYPES, \n  ALL_META_ACTION_TYPES, \n  SUGGESTED_BUSINESS_CONCEPTS,\n  getActionTypeCategory,\n  getBusinessConceptSuggestions \n} from './utils/metaActionTypes';\n\nconst ActionMapper = () => {\n  const [mappings, setMappings] = useState({});\n  const [availableActions, setAvailableActions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMapping, setNewMapping] = useState({\n    conceptName: '',\n    actionTypes: [],\n    aggregationType: 'sum' // 'sum', 'count', 'average'\n  });\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n\n  // Default business concepts from comprehensive analysis\n  const businessConcepts = Object.keys(SUGGESTED_BUSINESS_CONCEPTS);\n\n  useEffect(() => {\n    loadMappings();\n    loadKnownActionTypes();\n  }, []);\n\n  const loadKnownActionTypes = () => {\n    // Start with our comprehensive list of 49 known action types\n    setAvailableActions(ALL_META_ACTION_TYPES);\n    \n    // Also try to discover additional ones from historical data\n    discoverAvailableActions();\n  };\n\n  const loadMappings = async () => {\n    try {\n      // Try to load from backend first\n      const backendMappings = await api.getActionMappings();\n      if (backendMappings.mappings && Object.keys(backendMappings.mappings).length > 0) {\n        setMappings(backendMappings.mappings);\n        // Also sync to localStorage for offline access\n        localStorage.setItem('meta_action_mappings', JSON.stringify(backendMappings.mappings));\n        return;\n      }\n      \n      // Fallback to localStorage\n      const savedMappings = localStorage.getItem('meta_action_mappings');\n      if (savedMappings) {\n        const localMappings = JSON.parse(savedMappings);\n        setMappings(localMappings);\n        // Sync localStorage mappings to backend\n        if (Object.keys(localMappings).length > 0) {\n          await api.saveActionMappings(localMappings);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading mappings:', error);\n      // Fallback to localStorage if backend fails\n      try {\n        const savedMappings = localStorage.getItem('meta_action_mappings');\n        if (savedMappings) {\n          setMappings(JSON.parse(savedMappings));\n        }\n      } catch (localError) {\n        console.error('Error loading from localStorage:', localError);\n      }\n    }\n  };\n\n  const saveMappings = async (newMappings) => {\n    try {\n      // Save to backend\n      await api.saveActionMappings(newMappings);\n      \n      // Update local state\n      setMappings(newMappings);\n      \n      // Also save to localStorage as backup\n      localStorage.setItem('meta_action_mappings', JSON.stringify(newMappings));\n      \n      console.log('Action mappings saved successfully');\n    } catch (error) {\n      console.error('Error saving mappings to backend:', error);\n      \n      // Fallback to localStorage only\n      setMappings(newMappings);\n      localStorage.setItem('meta_action_mappings', JSON.stringify(newMappings));\n      \n      alert('Mappings saved locally, but failed to sync to server. They will be synced next time the page loads.');\n    }\n  };\n\n  const discoverAvailableActions = async () => {\n    setLoading(true);\n    try {\n      // Get recent historical data to discover action types\n      const configs = await api.getHistoricalConfigurations();\n      const discoveredActionTypes = new Set();\n\n      for (const config of configs.slice(0, 3)) { // Check recent configs\n        if (config.day_count > 0) {\n          try {\n            const data = await api.exportHistoricalData({\n              start_date: config.latest_date,\n              end_date: config.latest_date,\n              fields: config.fields,\n              breakdowns: config.breakdowns\n            });\n\n            // Extract action types from the data\n            data.data.forEach(dayData => {\n              let records = [];\n              \n              // More defensive extraction of records\n              if (dayData.data && dayData.data.data && Array.isArray(dayData.data.data)) {\n                records = dayData.data.data;\n              } else if (dayData.data && Array.isArray(dayData.data)) {\n                records = dayData.data;\n              } else {\n                console.warn('Unexpected data structure in ActionMapper:', dayData);\n                return; // Skip this dayData\n              }\n              \n              if (!Array.isArray(records)) {\n                console.warn('Records is not an array in ActionMapper:', typeof records, records);\n                return;\n              }\n              \n              records.forEach(record => {\n                if (!record || typeof record !== 'object') {\n                  console.warn('Invalid record in ActionMapper:', record);\n                  return;\n                }\n                \n                // Extract from actions\n                if (record.actions && Array.isArray(record.actions)) {\n                  record.actions.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from action_values\n                if (record.action_values && Array.isArray(record.action_values)) {\n                  record.action_values.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from conversions\n                if (record.conversions && Array.isArray(record.conversions)) {\n                  record.conversions.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n                // Extract from conversion_values\n                if (record.conversion_values && Array.isArray(record.conversion_values)) {\n                  record.conversion_values.forEach(action => {\n                    if (action && action.action_type) {\n                      discoveredActionTypes.add(action.action_type);\n                    }\n                  });\n                }\n              });\n            });\n          } catch (error) {\n            console.error(`Error loading data for config ${config.config_hash}:`, error);\n          }\n        }\n      }\n\n      // Merge discovered actions with our comprehensive list\n      const allActions = new Set([...ALL_META_ACTION_TYPES, ...Array.from(discoveredActionTypes)]);\n      setAvailableActions(Array.from(allActions).sort());\n    } catch (error) {\n      console.error('Error discovering actions:', error);\n      // Fallback to our comprehensive list\n      setAvailableActions(ALL_META_ACTION_TYPES);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addMapping = () => {\n    if (!newMapping.conceptName || newMapping.actionTypes.length === 0) {\n      alert('Please enter a concept name and select at least one action type');\n      return;\n    }\n\n    const newMappings = {\n      ...mappings,\n      [newMapping.conceptName]: {\n        actionTypes: newMapping.actionTypes,\n        aggregationType: newMapping.aggregationType,\n        createdAt: new Date().toISOString()\n      }\n    };\n\n    saveMappings(newMappings);\n    setNewMapping({ conceptName: '', actionTypes: [], aggregationType: 'sum' });\n    setShowAddForm(false);\n  };\n\n  const deleteMapping = (conceptName) => {\n    if (window.confirm(`Are you sure you want to delete the mapping for \"${conceptName}\"?`)) {\n      const newMappings = { ...mappings };\n      delete newMappings[conceptName];\n      saveMappings(newMappings);\n    }\n  };\n\n  const toggleActionType = (actionType) => {\n    const currentTypes = newMapping.actionTypes;\n    const newTypes = currentTypes.includes(actionType)\n      ? currentTypes.filter(t => t !== actionType)\n      : [...currentTypes, actionType];\n    \n    setNewMapping({ ...newMapping, actionTypes: newTypes });\n  };\n\n  const categorizeActionTypes = (actionTypes) => {\n    const categories = {};\n    \n    // Initialize categories based on our comprehensive categorization\n    Object.keys(META_ACTION_TYPES).forEach(category => {\n      const categoryName = category.replace(/_/g, ' ').toLowerCase()\n        .replace(/\\b\\w/g, l => l.toUpperCase());\n      categories[categoryName] = [];\n    });\n    \n    // Add 'Other' category for unknown action types\n    categories['Other'] = [];\n\n    actionTypes.forEach(actionType => {\n      const category = getActionTypeCategory(actionType);\n      if (category === 'OTHER') {\n        categories['Other'].push(actionType);\n      } else {\n        const categoryName = category.replace(/_/g, ' ').toLowerCase()\n          .replace(/\\b\\w/g, l => l.toUpperCase());\n        if (categories[categoryName]) {\n          categories[categoryName].push(actionType);\n        } else {\n          categories['Other'].push(actionType);\n        }\n      }\n    });\n\n    return categories;\n  };\n\n  const getSuggestions = () => {\n    if (newMapping.actionTypes.length === 0) return [];\n    return getBusinessConceptSuggestions(newMapping.actionTypes);\n  };\n\n  const applySuggestion = (suggestion) => {\n    setNewMapping({\n      ...newMapping,\n      conceptName: suggestion.concept,\n      actionTypes: [...new Set([...newMapping.actionTypes, ...suggestion.matchingActions])]\n    });\n  };\n\n  const getMappingStats = () => {\n    const totalMappings = Object.keys(mappings).length;\n    const totalActionsMapped = Object.values(mappings).reduce((sum, mapping) => sum + mapping.actionTypes.length, 0);\n    const unmappedActions = availableActions.filter(action => \n      !Object.values(mappings).some(mapping => mapping.actionTypes.includes(action))\n    );\n\n    return { totalMappings, totalActionsMapped, unmappedActions };\n  };\n\n  const stats = getMappingStats();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-xl font-semibold\">Meta Action Mapping</h2>\n          <button\n            onClick={() => setShowAddForm(!showAddForm)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            {showAddForm ? 'Cancel' : 'Add New Mapping'}\n          </button>\n        </div>\n\n        <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n          Map Meta action types to business concepts for better reporting and analysis. \n          This helps aggregate related actions into meaningful metrics.\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-900 p-3 rounded\">\n            <div className=\"text-sm text-blue-600 dark:text-blue-300\">Total Mappings</div>\n            <div className=\"text-xl font-bold text-blue-800 dark:text-blue-100\">{stats.totalMappings}</div>\n          </div>\n          <div className=\"bg-green-50 dark:bg-green-900 p-3 rounded\">\n            <div className=\"text-sm text-green-600 dark:text-green-300\">Actions Mapped</div>\n            <div className=\"text-xl font-bold text-green-800 dark:text-green-100\">{stats.totalActionsMapped}</div>\n          </div>\n          <div className=\"bg-orange-50 dark:bg-orange-900 p-3 rounded\">\n            <div className=\"text-sm text-orange-600 dark:text-orange-300\">Unmapped Actions</div>\n            <div className=\"text-xl font-bold text-orange-800 dark:text-orange-100\">{stats.unmappedActions.length}</div>\n          </div>\n        </div>\n\n        {/* Discovery */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-500\">\n            {availableActions.length} unique action types available (including {ALL_META_ACTION_TYPES.length} known from comprehensive analysis)\n          </span>\n          <button\n            onClick={discoverAvailableActions}\n            disabled={loading}\n            className=\"text-sm text-blue-600 hover:text-blue-800 disabled:text-gray-400\"\n          >\n            {loading ? 'Discovering...' : 'Refresh Action Types'}\n          </button>\n        </div>\n      </div>\n\n      {/* Add New Mapping Form */}\n      {showAddForm && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Create New Mapping</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Concept Name\n              </label>\n              <input\n                type=\"text\"\n                value={newMapping.conceptName}\n                onChange={(e) => setNewMapping({ ...newMapping, conceptName: e.target.value })}\n                placeholder=\"e.g., conversions, leads, purchases\"\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n              />\n              <div className=\"mt-1 text-xs text-gray-500\">\n                Suggested: {businessConcepts.join(', ')}\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium mb-1\">\n                Aggregation Type\n              </label>\n              <select\n                value={newMapping.aggregationType}\n                onChange={(e) => setNewMapping({ ...newMapping, aggregationType: e.target.value })}\n                className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600\"\n              >\n                <option value=\"sum\">Sum (total count/value)</option>\n                <option value=\"count\">Count (number of action types)</option>\n                <option value=\"average\">Average (mean value)</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Intelligent Suggestions */}\n          {newMapping.actionTypes.length > 0 && (\n            <div className=\"mb-4 p-4 bg-blue-50 dark:bg-blue-900 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">💡 Smart Suggestions</h4>\n                <button\n                  onClick={() => setShowSuggestions(!showSuggestions)}\n                  className=\"text-xs text-blue-600 hover:text-blue-800\"\n                >\n                  {showSuggestions ? 'Hide' : 'Show'} Suggestions\n                </button>\n              </div>\n              \n              {showSuggestions && (\n                <div className=\"space-y-2\">\n                  {getSuggestions().map((suggestion, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-white dark:bg-gray-700 rounded text-xs\">\n                      <div>\n                        <span className=\"font-medium text-blue-600\">{suggestion.concept}</span>\n                        <span className=\"text-gray-500 ml-2\">({Math.round(suggestion.confidence * 100)}% match)</span>\n                        <div className=\"text-gray-400 mt-1\">{suggestion.description}</div>\n                      </div>\n                      <button\n                        onClick={() => applySuggestion(suggestion)}\n                        className=\"px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                      >\n                        Apply\n                      </button>\n                    </div>\n                  ))}\n                  {getSuggestions().length === 0 && (\n                    <div className=\"text-xs text-gray-500 italic\">\n                      No business concept suggestions for your current selection.\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium mb-2\">\n              Select Action Types ({newMapping.actionTypes.length} selected)\n            </label>\n            \n            {Object.entries(categorizeActionTypes(availableActions)).map(([category, actions]) => (\n              actions.length > 0 && (\n                <div key={category} className=\"mb-4\">\n                  <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">{category}</h4>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {actions.map(actionType => (\n                      <button\n                        key={actionType}\n                        onClick={() => toggleActionType(actionType)}\n                        className={`px-3 py-1 rounded-full text-xs ${\n                          newMapping.actionTypes.includes(actionType)\n                            ? 'bg-blue-500 text-white'\n                            : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300'\n                        }`}\n                      >\n                        {actionType}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )\n            ))}\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={addMapping}\n              className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n            >\n              Create Mapping\n            </button>\n            <button\n              onClick={() => setShowAddForm(false)}\n              className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Existing Mappings */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-medium mb-4\">Current Mappings ({Object.keys(mappings).length})</h3>\n        \n        {Object.keys(mappings).length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>No mappings created yet.</p>\n            <p className=\"text-sm mt-2\">Create your first mapping to start organizing action types into business concepts.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {Object.entries(mappings).map(([conceptName, mapping]) => (\n              <div key={conceptName} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <h4 className=\"text-lg font-medium text-blue-800 dark:text-blue-200\">{conceptName}</h4>\n                    <div className=\"text-sm text-gray-500\">\n                      Aggregation: {mapping.aggregationType} • {mapping.actionTypes.length} action types\n                    </div>\n                  </div>\n                  <button\n                    onClick={() => deleteMapping(conceptName)}\n                    className=\"text-red-500 hover:text-red-700 text-sm\"\n                  >\n                    Delete\n                  </button>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {mapping.actionTypes.map(actionType => (\n                    <span\n                      key={actionType}\n                      className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs\"\n                    >\n                      {actionType}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Unmapped Actions */}\n      {stats.unmappedActions.length > 0 && (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Unmapped Action Types ({stats.unmappedActions.length})</h3>\n          <div className=\"flex flex-wrap gap-2\">\n            {stats.unmappedActions.map(actionType => (\n              <span\n                key={actionType}\n                className=\"px-2 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 rounded text-xs\"\n              >\n                {actionType}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ActionMapper; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}