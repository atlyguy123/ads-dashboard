{"ast":null,"code":"import _objectSpread from\"/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Analytics Pipeline API Service\n// \n// Handles all API calls related to the analytics pipeline functionality\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5001';class AnalyticsPipelineApiService{constructor(){this.baseUrl=\"\".concat(API_BASE_URL,\"/api/analytics-pipeline\");}async makeRequest(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=\"\".concat(this.baseUrl).concat(endpoint);const config=_objectSpread({headers:_objectSpread({'Content-Type':'application/json'},options.headers)},options);try{const response=await fetch(url,config);const data=await response.json();if(!response.ok){throw new Error(data.error||\"HTTP error! status: \".concat(response.status));}return data;}catch(error){console.error(\"Analytics Pipeline API request failed for \".concat(endpoint,\":\"),error);throw error;}}/**\n   * Start the analytics pipeline\n   * @param {Object} options - Pipeline options\n   * @param {string} options.date - Date to run pipeline for (YYYY-MM-DD format)\n   * @returns {Promise<Object>} - Pipeline start response with thread_id\n   */async startAnalyticsPipeline(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return this.makeRequest('/start',{method:'POST',body:JSON.stringify(options)});}/**\n   * Get current analytics pipeline status and progress\n   * @returns {Promise<Object>} - Current pipeline status including progress, stage, errors\n   */async getAnalyticsPipelineStatus(){return this.makeRequest('/status');}/**\n   * Cancel the currently running analytics pipeline\n   * @returns {Promise<Object>} - Cancellation confirmation\n   */async cancelAnalyticsPipeline(){return this.makeRequest('/cancel',{method:'POST'});}/**\n   * Health check for the analytics pipeline API\n   * @returns {Promise<Object>} - API health status with available endpoints\n   */async healthCheck(){return this.makeRequest('/health');}}// Create and export a singleton instance\nconst analyticsPipelineApi=new AnalyticsPipelineApiService();export{analyticsPipelineApi};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","AnalyticsPipelineApiService","constructor","baseUrl","concat","makeRequest","endpoint","options","arguments","length","undefined","url","config","_objectSpread","headers","response","fetch","data","json","ok","Error","error","status","console","startAnalyticsPipeline","method","body","JSON","stringify","getAnalyticsPipelineStatus","cancelAnalyticsPipeline","healthCheck","analyticsPipelineApi"],"sources":["/Users/joshuakaufman/untitled folder 3/orchestrator/dashboard/client/src/services/analyticsPipelineApi.js"],"sourcesContent":["// Analytics Pipeline API Service\n// \n// Handles all API calls related to the analytics pipeline functionality\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001';\n\nclass AnalyticsPipelineApiService {\n  constructor() {\n    this.baseUrl = `${API_BASE_URL}/api/analytics-pipeline`;\n  }\n\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      \n      return data;\n    } catch (error) {\n      console.error(`Analytics Pipeline API request failed for ${endpoint}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start the analytics pipeline\n   * @param {Object} options - Pipeline options\n   * @param {string} options.date - Date to run pipeline for (YYYY-MM-DD format)\n   * @returns {Promise<Object>} - Pipeline start response with thread_id\n   */\n  async startAnalyticsPipeline(options = {}) {\n    return this.makeRequest('/start', {\n      method: 'POST',\n      body: JSON.stringify(options),\n    });\n  }\n\n  /**\n   * Get current analytics pipeline status and progress\n   * @returns {Promise<Object>} - Current pipeline status including progress, stage, errors\n   */\n  async getAnalyticsPipelineStatus() {\n    return this.makeRequest('/status');\n  }\n\n  /**\n   * Cancel the currently running analytics pipeline\n   * @returns {Promise<Object>} - Cancellation confirmation\n   */\n  async cancelAnalyticsPipeline() {\n    return this.makeRequest('/cancel', {\n      method: 'POST',\n    });\n  }\n\n  /**\n   * Health check for the analytics pipeline API\n   * @returns {Promise<Object>} - API health status with available endpoints\n   */\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst analyticsPipelineApi = new AnalyticsPipelineApiService();\n\nexport { analyticsPipelineApi }; "],"mappings":"yJAAA;AACA;AACA;AAEA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,uBAAuB,CAE7E,KAAM,CAAAC,2BAA4B,CAChCC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,OAAO,IAAAC,MAAA,CAAMP,YAAY,2BAAyB,CACzD,CAEA,KAAM,CAAAQ,WAAWA,CAACC,QAAQ,CAAgB,IAAd,CAAAC,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACtC,KAAM,CAAAG,GAAG,IAAAP,MAAA,CAAM,IAAI,CAACD,OAAO,EAAAC,MAAA,CAAGE,QAAQ,CAAE,CACxC,KAAM,CAAAM,MAAM,CAAAC,aAAA,EACVC,OAAO,CAAAD,aAAA,EACL,cAAc,CAAE,kBAAkB,EAC/BN,OAAO,CAACO,OAAO,CACnB,EACEP,OAAO,CACX,CAED,GAAI,CACF,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACL,GAAG,CAAEC,MAAM,CAAC,CACzC,KAAM,CAAAK,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAElC,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAACH,IAAI,CAACI,KAAK,yBAAAjB,MAAA,CAA2BW,QAAQ,CAACO,MAAM,CAAE,CAAC,CACzE,CAEA,MAAO,CAAAL,IAAI,CACb,CAAE,MAAOI,KAAK,CAAE,CACdE,OAAO,CAACF,KAAK,8CAAAjB,MAAA,CAA8CE,QAAQ,MAAKe,KAAK,CAAC,CAC9E,KAAM,CAAAA,KAAK,CACb,CACF,CAEA;AACF;AACA;AACA;AACA;AACA,KACE,KAAM,CAAAG,sBAAsBA,CAAA,CAAe,IAAd,CAAAjB,OAAO,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACvC,MAAO,KAAI,CAACH,WAAW,CAAC,QAAQ,CAAE,CAChCoB,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACrB,OAAO,CAC9B,CAAC,CAAC,CACJ,CAEA;AACF;AACA;AACA,KACE,KAAM,CAAAsB,0BAA0BA,CAAA,CAAG,CACjC,MAAO,KAAI,CAACxB,WAAW,CAAC,SAAS,CAAC,CACpC,CAEA;AACF;AACA;AACA,KACE,KAAM,CAAAyB,uBAAuBA,CAAA,CAAG,CAC9B,MAAO,KAAI,CAACzB,WAAW,CAAC,SAAS,CAAE,CACjCoB,MAAM,CAAE,MACV,CAAC,CAAC,CACJ,CAEA;AACF;AACA;AACA,KACE,KAAM,CAAAM,WAAWA,CAAA,CAAG,CAClB,MAAO,KAAI,CAAC1B,WAAW,CAAC,SAAS,CAAC,CACpC,CACF,CAEA;AACA,KAAM,CAAA2B,oBAAoB,CAAG,GAAI,CAAA/B,2BAA2B,CAAC,CAAC,CAE9D,OAAS+B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}